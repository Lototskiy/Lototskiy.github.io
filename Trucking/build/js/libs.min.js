!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){"use strict";function v(e){return null!=e&&e===e.window}var t=[],s=Object.getPrototypeOf,o=t.slice,m=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,n=t.indexOf,i={},r=i.toString,g=i.hasOwnProperty,a=g.toString,d=a.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},C=S.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,i){var s,n,r=(i=i||C).createElement("script");if(r.text=e,t)for(s in c)(n=t[s]||t.getAttribute&&t.getAttribute(s))&&r.setAttribute(s,n);i.head.appendChild(r).parentNode.removeChild(r)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[r.call(e)]||"object":typeof e}var u="3.5.0",E=function(e,t){return new E.fn.init(e,t)};function h(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!b(e)&&!v(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:u,constructor:E,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(i){return this.pushStack(E.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,i,s,n,r,a=arguments[0]||{},o=1,l=arguments.length,d=!1;for("boolean"==typeof a&&(d=a,a=arguments[o]||{},o++),"object"==typeof a||b(a)||(a={}),o===l&&(a=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)s=e[t],"__proto__"!==t&&a!==s&&(d&&s&&(E.isPlainObject(s)||(n=Array.isArray(s)))?(i=a[t],r=n&&!Array.isArray(i)?[]:n||E.isPlainObject(i)?i:{},n=!1,a[t]=E.extend(d,r,s)):void 0!==s&&(a[t]=s));return a},E.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==r.call(e))&&(!(t=s(e))||"function"==typeof(i=g.call(t,"constructor")&&t.constructor)&&a.call(i)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){w(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,s=0;if(h(e))for(i=e.length;s<i&&!1!==t.call(e[s],s,e[s]);s++);else for(s in e)if(!1===t.call(e[s],s,e[s]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(h(Object(e))?E.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:n.call(t,e,i)},merge:function(e,t){for(var i=+t.length,s=0,n=e.length;s<i;s++)e[n++]=t[s];return e.length=n,e},grep:function(e,t,i){for(var s=[],n=0,r=e.length,a=!i;n<r;n++)!t(e[n],n)!=a&&s.push(e[n]);return s},map:function(e,t,i){var s,n,r=0,a=[];if(h(e))for(s=e.length;r<s;r++)null!=(n=t(e[r],r,i))&&a.push(n);else for(r in e)null!=(n=t(e[r],r,i))&&a.push(n);return m(a)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var p=function(i){function u(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function n(){T()}var e,p,w,r,a,f,h,v,x,l,d,T,S,o,C,m,c,g,y,E="sizzle"+ +new Date,b=i.document,k=0,s=0,$=le(),M=le(),P=le(),A=le(),L=function(e,t){return e===t&&(d=!0),0},z={}.hasOwnProperty,t=[],D=t.pop,O=t.push,I=t.push,H=t.slice,N=function(e,t){for(var i=0,s=e.length;i<s;i++)if(e[i]===t)return i;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\["+q+"*("+B+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+q+"*\\]",R=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(q+"+","g"),G=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),X=new RegExp("^"+q+"*,"+q+"*"),Y=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),V=new RegExp(q+"|>"),U=new RegExp(R),_=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,se=new RegExp("\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\([^\\r\\n\\f])","g"),ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=we(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{I.apply(t=H.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){I={apply:t.length?function(e,t){O.apply(e,H.call(t))}:function(e,t){for(var i=e.length,s=0;e[i++]=t[s++];);e.length=i-1}}}function oe(t,e,i,s){var n,r,a,o,l,d,c,u=e&&e.ownerDocument,h=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return i;if(!s&&(T(e),e=e||S,C)){if(11!==h&&(l=te.exec(t)))if(n=l[1]){if(9===h){if(!(a=e.getElementById(n)))return i;if(a.id===n)return i.push(a),i}else if(u&&(a=u.getElementById(n))&&y(e,a)&&a.id===n)return i.push(a),i}else{if(l[2])return I.apply(i,e.getElementsByTagName(t)),i;if((n=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return I.apply(i,e.getElementsByClassName(n)),i}if(p.qsa&&!A[t+" "]&&(!m||!m.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(c=t,u=e,1===h&&(V.test(t)||Y.test(t))){for((u=ie.test(t)&&ge(e.parentNode)||e)===e&&p.scope||((o=e.getAttribute("id"))?o=o.replace(ne,re):e.setAttribute("id",o=E)),r=(d=f(t)).length;r--;)d[r]=(o?"#"+o:":scope")+" "+be(d[r]);c=d.join(",")}try{return I.apply(i,u.querySelectorAll(c)),i}catch(e){A(t,!0)}finally{o===E&&e.removeAttribute("id")}}}return v(t.replace(G,"$1"),e,i,s)}function le(){var i=[];function s(e,t){return i.push(e+" ")>w.cacheLength&&delete s[i.shift()],s[e+" "]=t}return s}function de(e){return e[E]=!0,e}function ce(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var i=e.split("|"),s=i.length;s--;)w.attrHandle[i[s]]=t}function he(e,t){var i=t&&e,s=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(s)return s;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function ve(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function me(a){return de(function(r){return r=+r,de(function(e,t){for(var i,s=a([],e.length,r),n=s.length;n--;)e[i=s[n]]&&(e[i]=!(t[i]=e[i]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=oe.support={},a=oe.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Q.test(t||i&&i.nodeName||"HTML")},T=oe.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:b;return s!=S&&9===s.nodeType&&s.documentElement&&(o=(S=s).documentElement,C=!a(S),b!=S&&(i=S.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",n,!1):i.attachEvent&&i.attachEvent("onunload",n)),p.scope=ce(function(e){return o.appendChild(e).appendChild(S.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ce(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(S.getElementsByClassName),p.getById=ce(function(e){return o.appendChild(e).id=E,!S.getElementsByName||!S.getElementsByName(E).length}),p.getById?(w.filter.ID=function(e){var t=e.replace(se,u);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i=t.getElementById(e);return i?[i]:[]}}):(w.filter.ID=function(e){var i=e.replace(se,u);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var i,s,n,r=t.getElementById(e);if(r){if((i=r.getAttributeNode("id"))&&i.value===e)return[r];for(n=t.getElementsByName(e),s=0;r=n[s++];)if((i=r.getAttributeNode("id"))&&i.value===e)return[r]}return[]}}),w.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,s=[],n=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;i=r[n++];)1===i.nodeType&&s.push(i);return s},w.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},c=[],m=[],(p.qsa=ee.test(S.querySelectorAll))&&(ce(function(e){var t;o.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+q+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+q+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+E+"-]").length||m.push("~="),(t=S.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+q+"*name"+q+"*="+q+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+q+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),o.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(p.matchesSelector=ee.test(g=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),c.push("!=",R)}),m=m.length&&new RegExp(m.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(o.compareDocumentPosition),y=t||ee.test(o.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,s=t&&t.parentNode;return e===s||!(!s||1!==s.nodeType||!(i.contains?i.contains(s):e.compareDocumentPosition&&16&e.compareDocumentPosition(s)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},L=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===i?e==S||e.ownerDocument==b&&y(b,e)?-1:t==S||t.ownerDocument==b&&y(b,t)?1:l?N(l,e)-N(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var i,s=0,n=e.parentNode,r=t.parentNode,a=[e],o=[t];if(!n||!r)return e==S?-1:t==S?1:n?-1:r?1:l?N(l,e)-N(l,t):0;if(n===r)return he(e,t);for(i=e;i=i.parentNode;)a.unshift(i);for(i=t;i=i.parentNode;)o.unshift(i);for(;a[s]===o[s];)s++;return s?he(a[s],o[s]):a[s]==b?-1:o[s]==b?1:0}),S},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(T(e),p.matchesSelector&&C&&!A[t+" "]&&(!c||!c.test(t))&&(!m||!m.test(t)))try{var i=g.call(e,t);if(i||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){A(t,!0)}return 0<oe(t,S,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=S&&T(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=S&&T(e);var i=w.attrHandle[t.toLowerCase()],s=i&&z.call(w.attrHandle,t.toLowerCase())?i(e,t,!C):void 0;return void 0!==s?s:p.attributes||!C?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},oe.escape=function(e){return(e+"").replace(ne,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],s=0,n=0;if(d=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(L),d){for(;t=e[n++];)t===e[n]&&(s=i.push(n));for(;s--;)e.splice(i[s],1)}return l=null,e},r=oe.getText=function(e){var t,i="",s=0,n=e.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=r(e)}else if(3===n||4===n)return e.nodeValue}else for(;t=e[s++];)i+=r(t);return i},(w=oe.selectors={cacheLength:50,createPseudo:de,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(se,u),e[3]=(e[3]||e[4]||e[5]||"").replace(se,u),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&U.test(i)&&(t=f(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(se,u).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,s,n){return function(e){var t=oe.attr(e,i);return null==t?"!="===s:!s||(t+="","="===s?t===n:"!="===s?t!==n:"^="===s?n&&0===t.indexOf(n):"*="===s?n&&-1<t.indexOf(n):"$="===s?n&&t.slice(-n.length)===n:"~="===s?-1<(" "+t.replace(F," ")+" ").indexOf(n):"|="===s&&(t===n||t.slice(0,n.length+1)===n+"-"))}},CHILD:function(f,e,t,v,m){var g="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===v&&0===m?function(e){return!!e.parentNode}:function(e,t,i){var s,n,r,a,o,l,d=g!=y?"nextSibling":"previousSibling",c=e.parentNode,u=b&&e.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(c){if(g){for(;d;){for(a=e;a=a[d];)if(b?a.nodeName.toLowerCase()===u:1===a.nodeType)return!1;l=d="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&h){for(p=(o=(s=(n=(r=(a=c)[E]||(a[E]={}))[a.uniqueID]||(r[a.uniqueID]={}))[f]||[])[0]===k&&s[1])&&s[2],a=o&&c.childNodes[o];a=++o&&a&&a[d]||(p=o=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){n[f]=[k,o,p];break}}else if(h&&(p=o=(s=(n=(r=(a=e)[E]||(a[E]={}))[a.uniqueID]||(r[a.uniqueID]={}))[f]||[])[0]===k&&s[1]),!1===p)for(;(a=++o&&a&&a[d]||(p=o=0)||l.pop())&&((b?a.nodeName.toLowerCase()!==u:1!==a.nodeType)||!++p||(h&&((n=(r=a[E]||(a[E]={}))[a.uniqueID]||(r[a.uniqueID]={}))[f]=[k,p]),a!==e)););return(p-=m)===v||p%v==0&&0<=p/v}}},PSEUDO:function(e,r){var t,a=w.pseudos[e]||w.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return a[E]?a(r):1<a.length?(t=[e,e,"",r],w.setFilters.hasOwnProperty(e.toLowerCase())?de(function(e,t){for(var i,s=a(e,r),n=s.length;n--;)e[i=N(e,s[n])]=!(t[i]=s[n])}):function(e){return a(e,0,t)}):a}},pseudos:{not:de(function(e){var s=[],n=[],o=h(e.replace(G,"$1"));return o[E]?de(function(e,t,i,s){for(var n,r=o(e,null,s,[]),a=e.length;a--;)(n=r[a])&&(e[a]=!(t[a]=n))}):function(e,t,i){return s[0]=e,o(s,null,i,n),s[0]=null,!n.pop()}}),has:de(function(t){return function(e){return 0<oe(t,e).length}}),contains:de(function(t){return t=t.replace(se,u),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:de(function(i){return _.test(i||"")||oe.error("unsupported lang: "+i),i=i.replace(se,u).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me(function(){return[0]}),last:me(function(e,t){return[t-1]}),eq:me(function(e,t,i){return[i<0?i+t:i]}),even:me(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:me(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:me(function(e,t,i){for(var s=i<0?i+t:t<i?t:i;0<=--s;)e.push(s);return e}),gt:me(function(e,t,i){for(var s=i<0?i+t:i;++s<t;)e.push(s);return e})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})w.pseudos[e]=fe(e);function ye(){}function be(e){for(var t=0,i=e.length,s="";t<i;t++)s+=e[t].value;return s}function we(o,e,t){var l=e.dir,d=e.next,c=d||l,u=t&&"parentNode"===c,h=s++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||u)return o(e,t,i);return!1}:function(e,t,i){var s,n,r,a=[k,h];if(i){for(;e=e[l];)if((1===e.nodeType||u)&&o(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||u)if(n=(r=e[E]||(e[E]={}))[e.uniqueID]||(r[e.uniqueID]={}),d&&d===e.nodeName.toLowerCase())e=e[l]||e;else{if((s=n[c])&&s[0]===k&&s[1]===h)return a[2]=s[2];if((n[c]=a)[2]=o(e,t,i))return!0}return!1}}function xe(n){return 1<n.length?function(e,t,i){for(var s=n.length;s--;)if(!n[s](e,t,i))return!1;return!0}:n[0]}function Te(e,t,i,s,n){for(var r,a=[],o=0,l=e.length,d=null!=t;o<l;o++)(r=e[o])&&(i&&!i(r,s,n)||(a.push(r),d&&t.push(o)));return a}function Se(p,f,v,m,g,e){return m&&!m[E]&&(m=Se(m)),g&&!g[E]&&(g=Se(g,e)),de(function(e,t,i,s){var n,r,a,o=[],l=[],d=t.length,c=e||function(e,t,i){for(var s=0,n=t.length;s<n;s++)oe(e,t[s],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!p||!e&&f?c:Te(c,o,p,i,s),h=v?g||(e?p:d||m)?[]:t:u;if(v&&v(u,h,i,s),m)for(n=Te(h,l),m(n,[],i,s),r=n.length;r--;)(a=n[r])&&(h[l[r]]=!(u[l[r]]=a));if(e){if(g||p){if(g){for(n=[],r=h.length;r--;)(a=h[r])&&n.push(u[r]=a);g(null,h=[],n,s)}for(r=h.length;r--;)(a=h[r])&&-1<(n=g?N(e,a):o[r])&&(e[n]=!(t[n]=a))}}else h=Te(h===t?h.splice(d,h.length):h),g?g(null,t,h,s):I.apply(t,h)})}function Ce(e){for(var n,t,i,s=e.length,r=w.relative[e[0].type],a=r||w.relative[" "],o=r?1:0,l=we(function(e){return e===n},a,!0),d=we(function(e){return-1<N(n,e)},a,!0),c=[function(e,t,i){var s=!r&&(i||t!==x)||((n=t).nodeType?l:d)(e,t,i);return n=null,s}];o<s;o++)if(t=w.relative[e[o].type])c=[we(xe(c),t)];else{if((t=w.filter[e[o].type].apply(null,e[o].matches))[E]){for(i=++o;i<s&&!w.relative[e[i].type];i++);return Se(1<o&&xe(c),1<o&&be(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(G,"$1"),t,o<i&&Ce(e.slice(o,i)),i<s&&Ce(e=e.slice(i)),i<s&&be(e))}c.push(t)}return xe(c)}function Ee(m,g){function e(e,t,i,s,n){var r,a,o,l=0,d="0",c=e&&[],u=[],h=x,p=e||b&&w.find.TAG("*",n),f=k+=null==h?1:Math.random()||.1,v=p.length;for(n&&(x=t==S||t||n);d!==v&&null!=(r=p[d]);d++){if(b&&r){for(a=0,t||r.ownerDocument==S||(T(r),i=!C);o=m[a++];)if(o(r,t||S,i)){s.push(r);break}n&&(k=f)}y&&((r=!o&&r)&&l--,e&&c.push(r))}if(l+=d,y&&d!==l){for(a=0;o=g[a++];)o(c,u,t,i);if(e){if(0<l)for(;d--;)c[d]||u[d]||(u[d]=D.call(s));u=Te(u)}I.apply(s,u),n&&!e&&0<u.length&&1<l+g.length&&oe.uniqueSort(s)}return n&&(k=f,x=h),c}var y=0<g.length,b=0<m.length;return y?de(e):e}return ye.prototype=w.filters=w.pseudos,w.setFilters=new ye,f=oe.tokenize=function(e,t){var i,s,n,r,a,o,l,d=M[e+" "];if(d)return t?0:d.slice(0);for(a=e,o=[],l=w.preFilter;a;){for(r in i&&!(s=X.exec(a))||(s&&(a=a.slice(s[0].length)||a),o.push(n=[])),i=!1,(s=Y.exec(a))&&(i=s.shift(),n.push({value:i,type:s[0].replace(G," ")}),a=a.slice(i.length)),w.filter)!(s=K[r].exec(a))||l[r]&&!(s=l[r](s))||(i=s.shift(),n.push({value:i,type:r,matches:s}),a=a.slice(i.length));if(!i)break}return t?a.length:a?oe.error(e):M(e,o).slice(0)},h=oe.compile=function(e,t){var i,s=[],n=[],r=P[e+" "];if(!r){for(i=(t=t||f(e)).length;i--;)(r=Ce(t[i]))[E]?s.push(r):n.push(r);(r=P(e,Ee(n,s))).selector=e}return r},v=oe.select=function(e,t,i,s){var n,r,a,o,l,d="function"==typeof e&&e,c=!s&&f(e=d.selector||e);if(i=i||[],1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(a=r[0]).type&&9===t.nodeType&&C&&w.relative[r[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(se,u),t)||[])[0]))return i;d&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(n=K.needsContext.test(e)?0:r.length;n--&&(a=r[n],!w.relative[o=a.type]);)if((l=w.find[o])&&(s=l(a.matches[0].replace(se,u),ie.test(r[0].type)&&ge(t.parentNode)||t))){if(r.splice(n,1),!(e=s.length&&be(r)))return I.apply(i,s),i;break}}return(d||h(e,c))(s,t,!C,i,!t||ie.test(e)&&ge(t.parentNode)||t),i},p.sortStable=E.split("").sort(L).join("")===E,p.detectDuplicates=!!d,T(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||ue(j,function(e,t,i){var s;if(!i)return!0===e[t]?t.toLowerCase():(s=e.getAttributeNode(t))&&s.specified?s.value:null}),oe}(S);E.find=p,E.expr=p.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;function f(e,t,i){for(var s=[],n=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(n&&E(e).is(i))break;s.push(e)}return s}function T(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var k=E.expr.match.needsContext;function $(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,i,s){return b(i)?E.grep(e,function(e,t){return!!i.call(e,t,e)!==s}):i.nodeType?E.grep(e,function(e){return e===i!==s}):"string"!=typeof i?E.grep(e,function(e){return-1<n.call(i,e)!==s}):E.filter(i,e,s)}E.filter=function(e,t,i){var s=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===s.nodeType?E.find.matchesSelector(s,e)?[s]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,i,s=this.length,n=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<s;t++)if(E.contains(n[t],this))return!0}));for(i=this.pushStack([]),t=0;t<s;t++)E.find(e,n[t],i);return 1<s?E.uniqueSort(i):i},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var A,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,i){var s,n;if(!e)return this;if(i=i||A,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==i.ready?i.ready(e):e(E):E.makeArray(e,this);if(!(s="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!s[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(s[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(s[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),M.test(s[1])&&E.isPlainObject(t))for(s in t)b(this[s])?this[s](t[s]):this.attr(s,t[s]);return this}return(n=C.getElementById(s[2]))&&(this[0]=n,this.length=1),this}).prototype=E.fn,A=E(C);var z=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var i,s=0,n=this.length,r=[],a="string"!=typeof e&&E(e);if(!k.test(e))for(;s<n;s++)for(i=this[s];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(a?-1<a.index(i):1===i.nodeType&&E.find.matchesSelector(i,e))){r.push(i);break}return this.pushStack(1<r.length?E.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?n.call(E(e),this[0]):n.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,i){return f(e,"parentNode",i)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,i){return f(e,"nextSibling",i)},prevUntil:function(e,t,i){return f(e,"previousSibling",i)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:($(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(s,n){E.fn[s]=function(e,t){var i=E.map(this,n,e);return"Until"!==s.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=E.filter(t,i)),1<this.length&&(D[s]||E.uniqueSort(i),z.test(s)&&i.reverse()),this.pushStack(i)}});var I=/[^\x20\t\r\n\f]+/g;function H(e){return e}function N(e){throw e}function j(e,t,i,s){var n;try{e&&b(n=e.promise)?n.call(e).done(t).fail(i):e&&b(n=e.then)?n.call(e,t,i):t.apply(void 0,[e].slice(s))}catch(e){i.apply(void 0,[e])}}E.Callbacks=function(s){var e,i;s="string"==typeof s?(e=s,i={},E.each(e.match(I)||[],function(e,t){i[t]=!0}),i):E.extend({},s);function n(){for(o=o||s.once,a=r=!0;d.length;c=-1)for(t=d.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&s.stopOnFalse&&(c=l.length,t=!1);s.memory||(t=!1),r=!1,o&&(l=t?[]:"")}var r,t,a,o,l=[],d=[],c=-1,u={add:function(){return l&&(t&&!r&&(c=l.length-1,d.push(t)),function i(e){E.each(e,function(e,t){b(t)?s.unique&&u.has(t)||l.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),t&&!r&&n()),this},remove:function(){return E.each(arguments,function(e,t){for(var i;-1<(i=E.inArray(t,l,i));)l.splice(i,1),i<=c&&c--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return o=d=[],l=t="",this},disabled:function(){return!l},lock:function(){return o=d=[],t||r||(l=t=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],d.push(t),r||n()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!a}};return u},E.extend({Deferred:function(e){var r=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",a={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var n=arguments;return E.Deferred(function(s){E.each(r,function(e,t){var i=b(n[t[4]])&&n[t[4]];o[t[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(s.notify).done(s.resolve).fail(s.reject):s[t[0]+"With"](this,i?[e]:arguments)})}),n=null}).promise()},then:function(t,i,s){var l=0;function d(n,r,a,o){return function(){function e(){var e,t;if(!(n<l)){if((e=a.apply(i,s))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?o?t.call(e,d(l,r,H,o),d(l,r,N,o)):(l++,t.call(e,d(l,r,H,o),d(l,r,N,o),d(l,r,H,r.notifyWith))):(a!==H&&(i=void 0,s=[e]),(o||r.resolveWith)(i,s))}}var i=this,s=arguments,t=o?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=n+1&&(a!==N&&(i=void 0,s=[e]),r.rejectWith(i,s))}};n?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),S.setTimeout(t))}}return E.Deferred(function(e){r[0][3].add(d(0,e,b(s)?s:H,e.notifyWith)),r[1][3].add(d(0,e,b(t)?t:H)),r[2][3].add(d(0,e,b(i)?i:N))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},o={};return E.each(r,function(e,t){var i=t[2],s=t[5];a[t[1]]=i.add,s&&i.add(function(){n=s},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),i.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=i.fireWith}),a.promise(o),e&&e.call(o,o),o},when:function(e){function t(t){return function(e){n[t]=this,r[t]=1<arguments.length?o.call(arguments):e,--i||a.resolveWith(n,r)}}var i=arguments.length,s=i,n=Array(s),r=o.call(arguments),a=E.Deferred();if(i<=1&&(j(e,a.done(t(s)).resolve,a.reject,!i),"pending"===a.state()||b(r[s]&&r[s].then)))return a.then();for(;s--;)j(r[s],t(s),a.reject);return a.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){S.console&&S.console.warn&&e&&q.test(e.name)&&S.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){S.setTimeout(function(){throw e})};var B=E.Deferred();function W(){C.removeEventListener("DOMContentLoaded",W),S.removeEventListener("load",W),E.ready()}E.fn.ready=function(e){return B.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||B.resolveWith(C,[E])}}),E.ready.then=B.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?S.setTimeout(E.ready):(C.addEventListener("DOMContentLoaded",W),S.addEventListener("load",W));var R=function(e,t,i,s,n,r,a){var o=0,l=e.length,d=null==i;if("object"===x(i))for(o in n=!0,i)R(e,t,o,i[o],!0,r,a);else if(void 0!==s&&(n=!0,b(s)||(a=!0),d&&(t=a?(t.call(e,s),null):(d=t,function(e,t,i){return d.call(E(e),i)})),t))for(;o<l;o++)t(e[o],i,a?s:s.call(e[o],o,t(e[o],i)));return n?e:d?t.call(e):l?t(e[0],i):r},F=/^-ms-/,G=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(F,"ms-").replace(G,X)}function V(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function U(){this.expando=E.expando+U.uid++}U.uid=1,U.prototype={cache:function(e){var t=e[this.expando];return t||(t=Object.create(null),V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var s,n=this.cache(e);if("string"==typeof t)n[Y(t)]=i;else for(s in t)n[Y(s)]=t[s];return n},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,s=e[this.expando];if(void 0!==s){if(void 0!==t){i=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in s?[t]:t.match(I)||[]).length;for(;i--;)delete s[t[i]]}void 0!==t&&!E.isEmptyObject(s)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var _=new U,K=new U,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(e,t,i){var s,n;if(void 0===i&&1===e.nodeType)if(s="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(s))){try{i="true"===(n=i)||"false"!==n&&("null"===n?null:n===+n+""?+n:Q.test(n)?JSON.parse(n):n)}catch(e){}K.set(e,t,i)}else i=void 0;return i}E.extend({hasData:function(e){return K.hasData(e)||_.hasData(e)},data:function(e,t,i){return K.access(e,t,i)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,i){return _.access(e,t,i)},_removeData:function(e,t){_.remove(e,t)}}),E.fn.extend({data:function(i,e){var t,s,n,r=this[0],a=r&&r.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):R(this,function(e){var t;if(r&&void 0===e)return void 0!==(t=K.get(r,i))||void 0!==(t=Z(r,i))?t:void 0;this.each(function(){K.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(n=K.get(r),1===r.nodeType&&!_.get(r,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(s=a[t].name).indexOf("data-")&&(s=Y(s.slice(5)),Z(r,s,n[s]));_.set(r,"hasDataAttrs",!0)}return n},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),E.extend({queue:function(e,t,i){var s;if(e)return t=(t||"fx")+"queue",s=_.get(e,t),i&&(!s||Array.isArray(i)?s=_.access(e,t,E.makeArray(i)):s.push(i)),s||[]},dequeue:function(e,t){t=t||"fx";var i=E.queue(e,t),s=i.length,n=i.shift(),r=E._queueHooks(e,t);"inprogress"===n&&(n=i.shift(),s--),n&&("fx"===t&&i.unshift("inprogress"),delete r.stop,n.call(e,function(){E.dequeue(e,t)},r)),!s&&r&&r.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return _.get(e,i)||_.access(e,i,{empty:E.Callbacks("once memory").add(function(){_.remove(e,[t+"queue",i])})})}}),E.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===i?this:this.each(function(){var e=E.queue(this,t,i);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--n||r.resolveWith(a,[a])}var s,n=1,r=E.Deferred(),a=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(s=_.get(a[o],e+"queueHooks"))&&s.empty&&(n++,s.empty.add(i));return i(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=C.documentElement,ne=function(e){return E.contains(e.ownerDocument,e)},re={composed:!0};se.getRootNode&&(ne=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ne(e)&&"none"===E.css(e,"display")};function oe(e,t,i,s){var n,r,a=20,o=s?function(){return s.cur()}:function(){return E.css(e,t,"")},l=o(),d=i&&i[3]||(E.cssNumber[t]?"":"px"),c=e.nodeType&&(E.cssNumber[t]||"px"!==d&&+l)&&te.exec(E.css(e,t));if(c&&c[3]!==d){for(l/=2,d=d||c[3],c=+l||1;a--;)E.style(e,t,c+d),(1-r)*(1-(r=o()/l||.5))<=0&&(a=0),c/=r;c*=2,E.style(e,t,c+d),i=i||[]}return i&&(c=+c||+l||0,n=i[1]?c+(i[1]+1)*i[2]:+i[2],s&&(s.unit=d,s.start=c,s.end=n)),n}var le={};function de(e,t){for(var i,s,n,r,a,o,l,d=[],c=0,u=e.length;c<u;c++)(s=e[c]).style&&(i=s.style.display,t?("none"===i&&(d[c]=_.get(s,"display")||null,d[c]||(s.style.display="")),""===s.style.display&&ae(s)&&(d[c]=(l=a=r=void 0,a=(n=s).ownerDocument,o=n.nodeName,(l=le[o])||(r=a.body.appendChild(a.createElement(o)),l=E.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),le[o]=l)))):"none"!==i&&(d[c]="none",_.set(s,"display",i)));for(c=0;c<u;c++)null!=d[c]&&(e[c].style.display=d[c]);return e}E.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var ce,ue,he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;ce=C.createDocumentFragment().appendChild(C.createElement("div")),(ue=C.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),ce.appendChild(ue),y.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML="<option></option>",y.option=!!ce.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var i;return i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&$(e,t)?E.merge([e],i):i}function ge(e,t){for(var i=0,s=e.length;i<s;i++)_.set(e[i],"globalEval",!t||_.get(t[i],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,y.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,i,s,n){for(var r,a,o,l,d,c,u=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((r=e[p])||0===r)if("object"===x(r))E.merge(h,r.nodeType?[r]:r);else if(ye.test(r)){for(a=a||u.appendChild(t.createElement("div")),o=(pe.exec(r)||["",""])[1].toLowerCase(),l=ve[o]||ve._default,a.innerHTML=l[1]+E.htmlPrefilter(r)+l[2],c=l[0];c--;)a=a.lastChild;E.merge(h,a.childNodes),(a=u.firstChild).textContent=""}else h.push(t.createTextNode(r));for(u.textContent="",p=0;r=h[p++];)if(s&&-1<E.inArray(r,s))n&&n.push(r);else if(d=ne(r),a=me(u.appendChild(r),"script"),d&&ge(a),i)for(c=0;r=a[c++];)fe.test(r.type||"")&&i.push(r);return u}var we=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ce(){return!1}function Ee(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,i,s,n,r){var a,o;if("object"==typeof t){for(o in"string"!=typeof i&&(s=s||i,i=void 0),t)ke(e,o,i,s,t[o],r);return e}if(null==s&&null==n?(n=i,s=i=void 0):null==n&&("string"==typeof i?(n=s,s=void 0):(n=s,s=i,i=void 0)),!1===n)n=Ce;else if(!n)return e;return 1===r&&(a=n,(n=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,n,s,i)})}function $e(e,n,r){r?(_.set(e,n,!1),E.event.add(e,n,{namespace:!1,handler:function(e){var t,i,s=_.get(this,n);if(1&e.isTrigger&&this[n]){if(s.length)(E.event.special[n]||{}).delegateType&&e.stopPropagation();else if(s=o.call(arguments),_.set(this,n,s),t=r(this,n),this[n](),s!==(i=_.get(this,n))||t?_.set(this,n,!1):i={},s!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else s.length&&(_.set(this,n,{value:E.event.trigger(E.extend(s[0],E.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===_.get(e,n)&&E.event.add(e,n,Se)}E.event={global:{},add:function(t,e,i,s,n){var r,a,o,l,d,c,u,h,p,f,v,m=_.get(t);if(V(t))for(i.handler&&(i=(r=i).handler,n=r.selector),n&&E.find.matchesSelector(se,n),i.guid||(i.guid=E.guid++),(l=m.events)||(l=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),d=(e=(e||"").match(I)||[""]).length;d--;)p=v=(o=Te.exec(e[d])||[])[1],f=(o[2]||"").split(".").sort(),p&&(u=E.event.special[p]||{},p=(n?u.delegateType:u.bindType)||p,u=E.event.special[p]||{},c=E.extend({type:p,origType:v,data:s,handler:i,guid:i.guid,selector:n,needsContext:n&&E.expr.match.needsContext.test(n),namespace:f.join(".")},r),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,s,f,a)||t.addEventListener&&t.addEventListener(p,a)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),n?h.splice(h.delegateCount++,0,c):h.push(c),E.event.global[p]=!0)},remove:function(e,t,i,s,n){var r,a,o,l,d,c,u,h,p,f,v,m=_.hasData(e)&&_.get(e);if(m&&(l=m.events)){for(d=(t=(t||"").match(I)||[""]).length;d--;)if(p=v=(o=Te.exec(t[d])||[])[1],f=(o[2]||"").split(".").sort(),p){for(u=E.event.special[p]||{},h=l[p=(s?u.delegateType:u.bindType)||p]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=h.length;r--;)c=h[r],!n&&v!==c.origType||i&&i.guid!==c.guid||o&&!o.test(c.namespace)||s&&s!==c.selector&&("**"!==s||!c.selector)||(h.splice(r,1),c.selector&&h.delegateCount--,u.remove&&u.remove.call(e,c));a&&!h.length&&(u.teardown&&!1!==u.teardown.call(e,f,m.handle)||E.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[d],i,s,!0);E.isEmptyObject(l)&&_.remove(e,"handle events")}},dispatch:function(e){var t,i,s,n,r,a,o=new Array(arguments.length),l=E.event.fix(e),d=(_.get(this,"events")||Object.create(null))[l.type]||[],c=E.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,d),t=0;(n=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=n.elem,i=0;(r=n.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(s=((E.event.special[r.origType]||{}).handle||r.handler).apply(n.elem,o))&&!1===(l.result=s)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,s,n,r,a,o=[],l=t.delegateCount,d=e.target;if(l&&d.nodeType&&!("click"===e.type&&1<=e.button))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==e.type||!0!==d.disabled)){for(r=[],a={},i=0;i<l;i++)void 0===a[n=(s=t[i]).selector+" "]&&(a[n]=s.needsContext?-1<E(n,this).index(d):E.find(n,this,null,[d]).length),a[n]&&r.push(s);r.length&&o.push({elem:d,handlers:r})}return d=this,l<t.length&&o.push({elem:d,handlers:t.slice(l)}),o},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&$(t,"input")&&$e(t,"click",Se),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&$(t,"input")&&$e(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&$(t,"input")&&_.get(t,"click")||$(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return $e(this,e,Ee),!1},trigger:function(){return $e(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,n){E.event.special[e]={delegateType:n,bindType:n,handle:function(e){var t,i=e.relatedTarget,s=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=s.origType,t=s.handler.apply(this,arguments),e.type=n),t}}}),E.fn.extend({on:function(e,t,i,s){return ke(this,e,t,i,s)},one:function(e,t,i,s){return ke(this,e,t,i,s,1)},off:function(e,t,i){var s,n;if(e&&e.preventDefault&&e.handleObj)return s=e.handleObj,E(e.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Ce),this.each(function(){E.event.remove(this,e,i,t)});for(n in e)this.off(n,t,e[n]);return this}});var Me=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return $(e,"table")&&$(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function ze(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var i,s,n,r,a,o;if(1===t.nodeType){if(_.hasData(e)&&(o=_.get(e).events))for(n in _.remove(t,"handle events"),o)for(i=0,s=o[n].length;i<s;i++)E.event.add(t,n,o[n][i]);K.hasData(e)&&(r=K.access(e),a=E.extend({},r),K.set(t,a))}}function Ie(i,s,n,r){s=m(s);var e,t,a,o,l,d,c=0,u=i.length,h=u-1,p=s[0],f=b(p);if(f||1<u&&"string"==typeof p&&!y.checkClone&&Pe.test(p))return i.each(function(e){var t=i.eq(e);f&&(s[0]=p.call(this,e,t.html())),Ie(t,s,n,r)});if(u&&(t=(e=be(s,i[0].ownerDocument,!1,i,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(o=(a=E.map(me(e,"script"),ze)).length;c<u;c++)l=e,c!==h&&(l=E.clone(l,!0,!0),o&&E.merge(a,me(l,"script"))),n.call(i[c],l,c);if(o)for(d=a[a.length-1].ownerDocument,E.map(a,De),c=0;c<o;c++)l=a[c],fe.test(l.type||"")&&!_.access(l,"globalEval")&&E.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},d):w(l.textContent.replace(Ae,""),l,d))}return i}function He(e,t,i){for(var s,n=t?E.filter(t,e):e,r=0;null!=(s=n[r]);r++)i||1!==s.nodeType||E.cleanData(me(s)),s.parentNode&&(i&&ne(s)&&ge(me(s,"script")),s.parentNode.removeChild(s));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var s,n,r,a,o,l,d,c=e.cloneNode(!0),u=ne(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=me(c),s=0,n=(r=me(e)).length;s<n;s++)o=r[s],l=a[s],"input"===(d=l.nodeName.toLowerCase())&&he.test(o.type)?l.checked=o.checked:"input"!==d&&"textarea"!==d||(l.defaultValue=o.defaultValue);if(t)if(i)for(r=r||me(e),a=a||me(c),s=0,n=r.length;s<n;s++)Oe(r[s],a[s]);else Oe(e,c);return 0<(a=me(c,"script")).length&&ge(a,!u&&me(e,"script")),c},cleanData:function(e){for(var t,i,s,n=E.event.special,r=0;void 0!==(i=e[r]);r++)if(V(i)){if(t=i[_.expando]){if(t.events)for(s in t.events)n[s]?E.event.remove(i,s):E.removeEvent(i,s,t.handle);i[_.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),E.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return R(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return R(this,function(e){var t=this[0]||{},i=0,s=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ve[(pe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;i<s;i++)1===(t=this[i]||{}).nodeType&&(E.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Ie(this,arguments,function(e){var t=this.parentNode;E.inArray(this,i)<0&&(E.cleanData(me(this)),t&&t.replaceChild(e,this))},i)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){E.fn[e]=function(e){for(var t,i=[],s=E(e),n=s.length-1,r=0;r<=n;r++)t=r===n?this:this.clone(!0),E(s[r])[a](t),l.apply(i,t.get());return this.pushStack(i)}});function Ne(e,t,i){var s,n,r={};for(n in t)r[n]=e.style[n],e.style[n]=t[n];for(n in s=i.call(e),t)e.style[n]=r[n];return s}var je,qe,Be,We,Re,Fe,Ge,Xe,Ye=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Ue=new RegExp(ie.join("|"),"i");function _e(){if(Xe){Ge.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(Ge).appendChild(Xe);var e=S.getComputedStyle(Xe);je="1%"!==e.top,Fe=12===Ke(e.marginLeft),Xe.style.right="60%",We=36===Ke(e.right),qe=36===Ke(e.width),Xe.style.position="absolute",Be=12===Ke(Xe.offsetWidth/3),se.removeChild(Ge),Xe=null}}function Ke(e){return Math.round(parseFloat(e))}function Qe(e,t,i){var s,n,r,a,o=e.style;return(i=i||Ve(e))&&(""!==(a=i.getPropertyValue(t)||i[t])||ne(e)||(a=E.style(e,t)),!y.pixelBoxStyles()&&Ye.test(a)&&Ue.test(t)&&(s=o.width,n=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=a,a=i.width,o.width=s,o.minWidth=n,o.maxWidth=r)),void 0!==a?a+"":a}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ge=C.createElement("div"),(Xe=C.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xe.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return _e(),qe},pixelBoxStyles:function(){return _e(),We},pixelPosition:function(){return _e(),je},reliableMarginLeft:function(){return _e(),Fe},scrollboxSize:function(){return _e(),Be},reliableTrDimensions:function(){var e,t,i,s;return null==Re&&(e=C.createElement("table"),t=C.createElement("tr"),i=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",se.appendChild(e).appendChild(t).appendChild(i),s=S.getComputedStyle(t),Re=3<parseInt(s.height),se.removeChild(e)),Re}}));var Ze=["Webkit","Moz","ms"],et=C.createElement("div").style,tt={};function it(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Ze.length;i--;)if((e=Ze[i]+t)in et)return e}(e)||e)}var st=/^(none|table(?!-c[ea]).+)/,nt=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function ot(e,t,i){var s=te.exec(t);return s?Math.max(0,s[2]-(i||0))+(s[3]||"px"):t}function lt(e,t,i,s,n,r){var a="width"===t?1:0,o=0,l=0;if(i===(s?"border":"content"))return 0;for(;a<4;a+=2)"margin"===i&&(l+=E.css(e,i+ie[a],!0,n)),s?("content"===i&&(l-=E.css(e,"padding"+ie[a],!0,n)),"margin"!==i&&(l-=E.css(e,"border"+ie[a]+"Width",!0,n))):(l+=E.css(e,"padding"+ie[a],!0,n),"padding"!==i?l+=E.css(e,"border"+ie[a]+"Width",!0,n):o+=E.css(e,"border"+ie[a]+"Width",!0,n));return!s&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-o-.5))||0),l}function dt(e,t,i){var s=Ve(e),n=(!y.boxSizingReliable()||i)&&"border-box"===E.css(e,"boxSizing",!1,s),r=n,a=Qe(e,t,s),o="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(a)){if(!i)return a;a="auto"}return(!y.boxSizingReliable()&&n||!y.reliableTrDimensions()&&$(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,s))&&e.getClientRects().length&&(n="border-box"===E.css(e,"boxSizing",!1,s),(r=o in e)&&(a=e[o])),(a=parseFloat(a)||0)+lt(e,t,i||(n?"border":"content"),r,s,a)+"px"}function ct(e,t,i,s,n){return new ct.prototype.init(e,t,i,s,n)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Qe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,s){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var n,r,a,o=Y(t),l=nt.test(t),d=e.style;if(l||(t=it(o)),a=E.cssHooks[t]||E.cssHooks[o],void 0===i)return a&&"get"in a&&void 0!==(n=a.get(e,!1,s))?n:d[t];"string"===(r=typeof i)&&(n=te.exec(i))&&n[1]&&(i=oe(e,t,n),r="number"),null!=i&&i==i&&("number"!==r||l||(i+=n&&n[3]||(E.cssNumber[o]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(d[t]="inherit"),a&&"set"in a&&void 0===(i=a.set(e,i,s))||(l?d.setProperty(t,i):d[t]=i))}},css:function(e,t,i,s){var n,r,a,o=Y(t);return nt.test(t)||(t=it(o)),(a=E.cssHooks[t]||E.cssHooks[o])&&"get"in a&&(n=a.get(e,!0,i)),void 0===n&&(n=Qe(e,t,s)),"normal"===n&&t in at&&(n=at[t]),""===i||i?(r=parseFloat(n),!0===i||isFinite(r)?r||0:n):n}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,i){if(t)return!st.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,l,i):Ne(e,rt,function(){return dt(e,l,i)})},set:function(e,t,i){var s,n=Ve(e),r=!y.scrollboxSize()&&"absolute"===n.position,a=(r||i)&&"border-box"===E.css(e,"boxSizing",!1,n),o=i?lt(e,l,i,a,n):0;return a&&r&&(o-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(n[l])-lt(e,l,"border",!1,n)-.5)),o&&(s=te.exec(t))&&"px"!==(s[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),ot(0,t,o)}}}),E.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ne(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(n,r){E.cssHooks[n+r]={expand:function(e){for(var t=0,i={},s="string"==typeof e?e.split(" "):[e];t<4;t++)i[n+ie[t]+r]=s[t]||s[t-2]||s[0];return i}},"margin"!==n&&(E.cssHooks[n+r].set=ot)}),E.fn.extend({css:function(e,t){return R(this,function(e,t,i){var s,n,r={},a=0;if(Array.isArray(t)){for(s=Ve(e),n=t.length;a<n;a++)r[t[a]]=E.css(e,t[a],!1,s);return r}return void 0!==i?E.style(e,t,i):E.css(e,t)},e,t,1<arguments.length)}}),(E.Tween=ct).prototype={constructor:ct,init:function(e,t,i,s,n,r){this.elem=e,this.prop=i,this.easing=n||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=s,this.unit=r||(E.cssNumber[i]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,i=ct.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ct.prototype.init,E.fx.step={};var ut,ht,pt,ft,vt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;function gt(){ht&&(!1===C.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(gt):S.setTimeout(gt,E.fx.interval),E.fx.tick())}function yt(){return S.setTimeout(function(){ut=void 0}),ut=Date.now()}function bt(e,t){var i,s=0,n={height:e};for(t=t?1:0;s<4;s+=2-t)n["margin"+(i=ie[s])]=n["padding"+i]=e;return t&&(n.opacity=n.width=e),n}function wt(e,t,i){for(var s,n=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),r=0,a=n.length;r<a;r++)if(s=n[r].call(i,t,e))return s}function xt(r,e,t){var i,a,s=0,n=xt.prefilters.length,o=E.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=ut||yt(),t=Math.max(0,d.startTime+d.duration-e),i=1-(t/d.duration||0),s=0,n=d.tweens.length;s<n;s++)d.tweens[s].run(i);return o.notifyWith(r,[d,i,t]),i<1&&n?t:(n||o.notifyWith(r,[d,1,0]),o.resolveWith(r,[d]),!1)},d=o.promise({elem:r,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:ut||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=E.Tween(r,d.opts,e,t,d.opts.specialEasing[e]||d.opts.easing);return d.tweens.push(i),i},stop:function(e){var t=0,i=e?d.tweens.length:0;if(a)return this;for(a=!0;t<i;t++)d.tweens[t].run(1);return e?(o.notifyWith(r,[d,1,0]),o.resolveWith(r,[d,e])):o.rejectWith(r,[d,e]),this}}),c=d.props;for(!function(e,t){var i,s,n,r,a;for(i in e)if(n=t[s=Y(i)],r=e[i],Array.isArray(r)&&(n=r[1],r=e[i]=r[0]),i!==s&&(e[s]=r,delete e[i]),(a=E.cssHooks[s])&&"expand"in a)for(i in r=a.expand(r),delete e[s],r)i in e||(e[i]=r[i],t[i]=n);else t[s]=n}(c,d.opts.specialEasing);s<n;s++)if(i=xt.prefilters[s].call(d,r,c,d.opts))return b(i.stop)&&(E._queueHooks(d.elem,d.opts.queue).stop=i.stop.bind(i)),i;return E.map(c,wt,d),b(d.opts.start)&&d.opts.start.call(r,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),E.fx.timer(E.extend(l,{elem:r,anim:d,queue:d.opts.queue})),d}E.Animation=E.extend(xt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return oe(i.elem,e,te.exec(t),i),i}]},tweener:function(e,t){for(var i,s=0,n=(e=b(e)?(t=e,["*"]):e.match(I)).length;s<n;s++)i=e[s],xt.tweeners[i]=xt.tweeners[i]||[],xt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var s,n,r,a,o,l,d,c,u="width"in t||"height"in t,h=this,p={},f=e.style,v=e.nodeType&&ae(e),m=_.get(e,"fxshow");for(s in i.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,o=a.empty.fire,a.empty.fire=function(){a.unqueued||o()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()})})),t)if(n=t[s],vt.test(n)){if(delete t[s],r=r||"toggle"===n,n===(v?"hide":"show")){if("show"!==n||!m||void 0===m[s])continue;v=!0}p[s]=m&&m[s]||E.style(e,s)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(s in u&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(d=m&&m.display)&&(d=_.get(e,"display")),"none"===(c=E.css(e,"display"))&&(d?c=d:(de([e],!0),d=e.style.display||d,c=E.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===E.css(e,"float")&&(l||(h.done(function(){f.display=d}),null==d&&(c=f.display,d="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(m?"hidden"in m&&(v=m.hidden):m=_.access(e,"fxshow",{display:d}),r&&(m.hidden=!v),v&&de([e],!0),h.done(function(){for(s in v||de([e]),_.remove(e,"fxshow"),p)E.style(e,s,p[s])})),l=wt(v?m[s]:0,s,h),s in m||(m[s]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),E.speed=function(e,t,i){var s=e&&"object"==typeof e?E.extend({},e):{complete:i||!i&&t||b(e)&&e,duration:e,easing:i&&t||t&&!b(t)&&t};return E.fx.off?s.duration=0:"number"!=typeof s.duration&&(s.duration in E.fx.speeds?s.duration=E.fx.speeds[s.duration]:s.duration=E.fx.speeds._default),null!=s.queue&&!0!==s.queue||(s.queue="fx"),s.old=s.complete,s.complete=function(){b(s.old)&&s.old.call(this),s.queue&&E.dequeue(this,s.queue)},s},E.fn.extend({fadeTo:function(e,t,i,s){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,i,s)},animate:function(t,e,i,s){function n(){var e=xt(this,E.extend({},t),a);(r||_.get(this,"finish"))&&e.stop(!0)}var r=E.isEmptyObject(t),a=E.speed(e,i,s);return n.finish=n,r||!1===a.queue?this.each(n):this.queue(a.queue,n)},stop:function(n,e,r){function a(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof n&&(r=e,e=n,n=void 0),e&&this.queue(n||"fx",[]),this.each(function(){var e=!0,t=null!=n&&n+"queueHooks",i=E.timers,s=_.get(this);if(t)s[t]&&s[t].stop&&a(s[t]);else for(t in s)s[t]&&s[t].stop&&mt.test(t)&&a(s[t]);for(t=i.length;t--;)i[t].elem!==this||null!=n&&i[t].queue!==n||(i[t].anim.stop(r),e=!1,i.splice(t,1));!e&&r||E.dequeue(this,n)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=_.get(this),i=t[a+"queue"],s=t[a+"queueHooks"],n=E.timers,r=i?i.length:0;for(t.finish=!0,E.queue(this,a,[]),s&&s.stop&&s.stop.call(this,!0),e=n.length;e--;)n[e].elem===this&&n[e].queue===a&&(n[e].anim.stop(!0),n.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,s){var n=E.fn[s];E.fn[s]=function(e,t,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(bt(s,!0),e,t,i)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,s){E.fn[e]=function(e,t,i){return this.animate(s,e,t,i)}}),E.timers=[],E.fx.tick=function(){var e,t=0,i=E.timers;for(ut=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||E.fx.stop(),ut=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ht||(ht=!0,gt())},E.fx.stop=function(){ht=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(s,e){return s=E.fx&&E.fx.speeds[s]||s,e=e||"fx",this.queue(e,function(e,t){var i=S.setTimeout(e,s);t.stop=function(){S.clearTimeout(i)}})},pt=C.createElement("input"),ft=C.createElement("select").appendChild(C.createElement("option")),pt.type="checkbox",y.checkOn=""!==pt.value,y.optSelected=ft.selected,(pt=C.createElement("input")).value="t",pt.type="radio",y.radioValue="t"===pt.value;var Tt,St=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return R(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,i){var s,n,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?E.prop(e,t,i):(1===r&&E.isXMLDoc(e)||(n=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?Tt:void 0)),void 0!==i?null===i?void E.removeAttr(e,t):n&&"set"in n&&void 0!==(s=n.set(e,i,t))?s:(e.setAttribute(t,i+""),i):!(n&&"get"in n&&null!==(s=n.get(e,t)))&&null==(s=E.find.attr(e,t))?void 0:s)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&$(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,s=0,n=t&&t.match(I);if(n&&1===e.nodeType)for(;i=n[s++];)e.removeAttribute(i)}}),Tt={set:function(e,t,i){return!1===t?E.removeAttr(e,i):e.setAttribute(i,i),i}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var a=St[t]||E.find.attr;St[t]=function(e,t,i){var s,n,r=t.toLowerCase();return i||(n=St[r],St[r]=s,s=null!=a(e,t,i)?r:null,St[r]=n),s}});var Ct=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function kt(e){return(e.match(I)||[]).join(" ")}function $t(e){return e.getAttribute&&e.getAttribute("class")||""}function Mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}E.fn.extend({prop:function(e,t){return R(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,i){var s,n,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&E.isXMLDoc(e)||(t=E.propFix[t]||t,n=E.propHooks[t]),void 0!==i?n&&"set"in n&&void 0!==(s=n.set(e,i,t))?s:e[t]=i:n&&"get"in n&&null!==(s=n.get(e,t))?s:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):Ct.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,i,s,n,r,a,o,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,$t(this)))});if((e=Mt(t)).length)for(;i=this[l++];)if(n=$t(i),s=1===i.nodeType&&" "+kt(n)+" "){for(a=0;r=e[a++];)s.indexOf(" "+r+" ")<0&&(s+=r+" ");n!==(o=kt(s))&&i.setAttribute("class",o)}return this},removeClass:function(t){var e,i,s,n,r,a,o,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,$t(this)))});if(!arguments.length)return this.attr("class","");if((e=Mt(t)).length)for(;i=this[l++];)if(n=$t(i),s=1===i.nodeType&&" "+kt(n)+" "){for(a=0;r=e[a++];)for(;-1<s.indexOf(" "+r+" ");)s=s.replace(" "+r+" "," ");n!==(o=kt(s))&&i.setAttribute("class",o)}return this},toggleClass:function(n,t){var r=typeof n,a="string"==r||Array.isArray(n);return"boolean"==typeof t&&a?t?this.addClass(n):this.removeClass(n):b(n)?this.each(function(e){E(this).toggleClass(n.call(this,e,$t(this),t),t)}):this.each(function(){var e,t,i,s;if(a)for(t=0,i=E(this),s=Mt(n);e=s[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==n&&"boolean"!=r||((e=$t(this))&&_.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==n&&_.get(this,"__className__")||""))})},hasClass:function(e){var t,i,s=0;for(t=" "+e+" ";i=this[s++];)if(1===i.nodeType&&-1<(" "+kt($t(i))+" ").indexOf(t))return!0;return!1}});var Pt=/\r/g;E.fn.extend({val:function(i){var s,e,n,t=this[0];return arguments.length?(n=b(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=n?i.call(this,e,E(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(s=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in s&&void 0!==s.set(this,t,"value")||(this.value=t))})):t?(s=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in s&&void 0!==(e=s.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Pt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:kt(E.text(e))}},select:{get:function(e){var t,i,s,n=e.options,r=e.selectedIndex,a="select-one"===e.type,o=a?null:[],l=a?r+1:n.length;for(s=r<0?l:a?r:0;s<l;s++)if(((i=n[s]).selected||s===r)&&!i.disabled&&(!i.parentNode.disabled||!$(i.parentNode,"optgroup"))){if(t=E(i).val(),a)return t;o.push(t)}return o},set:function(e,t){for(var i,s,n=e.options,r=E.makeArray(t),a=n.length;a--;)((s=n[a]).selected=-1<E.inArray(E.valHooks.option.get(s),r))&&(i=!0);return i||(e.selectedIndex=-1),r}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in S;function At(e){e.stopPropagation()}var Lt=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,i,s){var n,r,a,o,l,d,c,u,h=[i||C],p=g.call(e,"type")?e.type:e,f=g.call(e,"namespace")?e.namespace.split("."):[];if(r=u=a=i=i||C,3!==i.nodeType&&8!==i.nodeType&&!Lt.test(p+E.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[E.expando]?e:new E.Event(p,"object"==typeof e&&e)).isTrigger=s?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},s||!c.trigger||!1!==c.trigger.apply(i,t))){if(!s&&!c.noBubble&&!v(i)){for(o=c.delegateType||p,Lt.test(o+p)||(r=r.parentNode);r;r=r.parentNode)h.push(r),a=r;a===(i.ownerDocument||C)&&h.push(a.defaultView||a.parentWindow||S)}for(n=0;(r=h[n++])&&!e.isPropagationStopped();)u=r,e.type=1<n?o:c.bindType||p,(d=(_.get(r,"events")||Object.create(null))[e.type]&&_.get(r,"handle"))&&d.apply(r,t),(d=l&&r[l])&&d.apply&&V(r)&&(e.result=d.apply(r,t),!1===e.result&&e.preventDefault());return e.type=p,s||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(h.pop(),t)||!V(i)||l&&b(i[p])&&!v(i)&&((a=i[l])&&(i[l]=null),E.event.triggered=p,e.isPropagationStopped()&&u.addEventListener(p,At),i[p](),e.isPropagationStopped()&&u.removeEventListener(p,At),E.event.triggered=void 0,a&&(i[l]=a)),e.result}},simulate:function(e,t,i){var s=E.extend(new E.Event,i,{type:e,isSimulated:!0});E.event.trigger(s,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return E.event.trigger(e,t,i,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(i,s){function n(e){E.event.simulate(s,e.target,E.event.fix(e))}E.event.special[s]={setup:function(){var e=this.ownerDocument||this.document||this,t=_.access(e,s);t||e.addEventListener(i,n,!0),_.access(e,s,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=_.access(e,s)-1;t?_.access(e,s,t):(e.removeEventListener(i,n,!0),_.remove(e,s))}}});var zt=S.location,Dt={guid:Date.now()},Ot=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var It=/\[\]$/,Ht=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(i,e,s,n){var t;if(Array.isArray(e))E.each(e,function(e,t){s||It.test(i)?n(i,t):qt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,s,n)});else if(s||"object"!==x(e))n(i,e);else for(t in e)qt(i+"["+t+"]",e[t],s,n)}E.param=function(e,t){function i(e,t){var i=b(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var s,n=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(s in e)qt(s,e[s],t,i);return n.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&jt.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var i=E(this).val();return null==i?null:Array.isArray(i)?E.map(i,function(e){return{name:t.name,value:e.replace(Ht,"\r\n")}}):{name:t.name,value:i.replace(Ht,"\r\n")}}).get()}});var Bt=/%20/g,Wt=/#.*$/,Rt=/([?&])_=[^&]*/,Ft=/^(.*?):[ \t]*([^\r\n]*)$/gm,Gt=/^(?:GET|HEAD)$/,Xt=/^\/\//,Yt={},Vt={},Ut="*/".concat("*"),_t=C.createElement("a");function Kt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,s=0,n=e.toLowerCase().match(I)||[];if(b(t))for(;i=n[s++];)"+"===i[0]?(i=i.slice(1)||"*",(r[i]=r[i]||[]).unshift(t)):(r[i]=r[i]||[]).push(t)}}function Qt(t,n,r,a){var o={},l=t===Vt;function d(e){var s;return o[e]=!0,E.each(t[e]||[],function(e,t){var i=t(n,r,a);return"string"!=typeof i||l||o[i]?l?!(s=i):void 0:(n.dataTypes.unshift(i),d(i),!1)}),s}return d(n.dataTypes[0])||!o["*"]&&d("*")}function Jt(e,t){var i,s,n=E.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((n[i]?e:s=s||{})[i]=t[i]);return s&&E.extend(!0,e,s),e}_t.href=zt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(zt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ut,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,E.ajaxSettings),t):Jt(E.ajaxSettings,e)},ajaxPrefilter:Kt(Yt),ajaxTransport:Kt(Vt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,u,h,i,p,s,f,v,n,r,m=E.ajaxSetup({},t),g=m.context||m,y=m.context&&(g.nodeType||g.jquery)?E(g):E.event,b=E.Deferred(),w=E.Callbacks("once memory"),x=m.statusCode||{},a={},o={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(f){if(!i)for(i={};t=Ft.exec(h);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(e,t){return null==f&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==f&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),d(0,t),this}};if(b.promise(T),m.url=((e||m.url||zt.href)+"").replace(Xt,zt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(I)||[""],null==m.crossDomain){s=C.createElement("a");try{s.href=m.url,s.href=s.href,m.crossDomain=_t.protocol+"//"+_t.host!=s.protocol+"//"+s.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=E.param(m.data,m.traditional)),Qt(Yt,m,t,T),f)return T;for(n in(v=E.event&&m.global)&&0==E.active++&&E.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Gt.test(m.type),u=m.url.replace(Wt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Bt,"+")):(r=m.url.slice(u.length),m.data&&(m.processData||"string"==typeof m.data)&&(u+=(Ot.test(u)?"&":"?")+m.data,delete m.data),!1===m.cache&&(u=u.replace(Rt,"$1"),r=(Ot.test(u)?"&":"?")+"_="+Dt.guid+++r),m.url=u+r),m.ifModified&&(E.lastModified[u]&&T.setRequestHeader("If-Modified-Since",E.lastModified[u]),E.etag[u]&&T.setRequestHeader("If-None-Match",E.etag[u])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&T.setRequestHeader("Content-Type",m.contentType),T.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Ut+"; q=0.01":""):m.accepts["*"]),m.headers)T.setRequestHeader(n,m.headers[n]);if(m.beforeSend&&(!1===m.beforeSend.call(g,T,m)||f))return T.abort();if(l="abort",w.add(m.complete),T.done(m.success),T.fail(m.error),c=Qt(Vt,m,t,T)){if(T.readyState=1,v&&y.trigger("ajaxSend",[T,m]),f)return T;m.async&&0<m.timeout&&(p=S.setTimeout(function(){T.abort("timeout")},m.timeout));try{f=!1,c.send(a,d)}catch(e){if(f)throw e;d(-1,e)}}else d(-1,"No Transport");function d(e,t,i,s){var n,r,a,o,l,d=t;f||(f=!0,p&&S.clearTimeout(p),c=void 0,h=s||"",T.readyState=0<e?4:0,n=200<=e&&e<300||304===e,i&&(o=function(e,t,i){for(var s,n,r,a,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===s&&(s=e.mimeType||t.getResponseHeader("Content-Type"));if(s)for(n in o)if(o[n]&&o[n].test(s)){l.unshift(n);break}if(l[0]in i)r=l[0];else{for(n in i){if(!l[0]||e.converters[n+" "+l[0]]){r=n;break}a=a||n}r=r||a}if(r)return r!==l[0]&&l.unshift(r),i[r]}(m,T,i)),!n&&-1<E.inArray("script",m.dataTypes)&&(m.converters["text script"]=function(){}),o=function(e,t,i,s){var n,r,a,o,l,d={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)d[a.toLowerCase()]=e.converters[a];for(r=c.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!l&&s&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=d[l+" "+r]||d["* "+r]))for(n in d)if((o=n.split(" "))[1]===r&&(a=d[l+" "+o[0]]||d["* "+o[0]])){!0===a?a=d[n]:!0!==d[n]&&(r=o[0],c.unshift(o[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(m,o,T,n),n?(m.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(E.lastModified[u]=l),(l=T.getResponseHeader("etag"))&&(E.etag[u]=l)),204===e||"HEAD"===m.type?d="nocontent":304===e?d="notmodified":(d=o.state,r=o.data,n=!(a=o.error))):(a=d,!e&&d||(d="error",e<0&&(e=0))),T.status=e,T.statusText=(t||d)+"",n?b.resolveWith(g,[r,d,T]):b.rejectWith(g,[T,d,a]),T.statusCode(x),x=void 0,v&&y.trigger(n?"ajaxSuccess":"ajaxError",[T,m,n?r:a]),w.fireWith(g,[T,d]),v&&(y.trigger("ajaxComplete",[T,m]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return E.get(e,t,i,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,n){E[n]=function(e,t,i,s){return b(t)&&(s=s||i,i=t,t=void 0),E.ajax(E.extend({url:e,type:n,dataType:s,data:t,success:i},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,i){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,i)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(e){E(this).wrapInner(i.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=b(t);return this.each(function(e){E(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},ei=E.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,E.ajaxTransport(function(n){var r,a;if(y.cors||ei&&!n.crossDomain)return{send:function(e,t){var i,s=n.xhr();if(s.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(i in n.xhrFields)s[i]=n.xhrFields[i];for(i in n.mimeType&&s.overrideMimeType&&s.overrideMimeType(n.mimeType),n.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)s.setRequestHeader(i,e[i]);r=function(e){return function(){r&&(r=a=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?t(0,"error"):t(s.status,s.statusText):t(Zt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=r(),a=s.onerror=s.ontimeout=r("error"),void 0!==s.onabort?s.onabort=a:s.onreadystatechange=function(){4===s.readyState&&S.setTimeout(function(){r&&a()})},r=r("abort");try{s.send(n.hasContent&&n.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(i){var s,n;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){s=E("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",n=function(e){s.remove(),n=null,e&&t("error"===e.type?404:200,e.type)}),C.head.appendChild(s[0])},abort:function(){n&&n()}}});var ti,ii=[],si=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ii.pop()||E.expando+"_"+Dt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,i){var s,n,r,a=!1!==e.jsonp&&(si.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&si.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return s=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(si,"$1"+s):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+s),e.converters["script json"]=function(){return r||E.error(s+" was not called"),r[0]},e.dataTypes[0]="json",n=S[s],S[s]=function(){r=arguments},i.always(function(){void 0===n?E(S).removeProp(s):S[s]=n,e[s]&&(e.jsonpCallback=t.jsonpCallback,ii.push(s)),r&&b(n)&&n(r[0]),r=n=void 0}),"script"}),y.createHTMLDocument=((ti=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),E.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((s=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(s)):t=C),r=!i&&[],(n=M.exec(e))?[t.createElement(n[1])]:(n=be([e],t,r),r&&r.length&&E(r).remove(),E.merge([],n.childNodes)));var s,n,r},E.fn.load=function(e,t,i){var s,n,r,a=this,o=e.indexOf(" ");return-1<o&&(s=kt(e.slice(o)),e=e.slice(0,o)),b(t)?(i=t,t=void 0):t&&"object"==typeof t&&(n="POST"),0<a.length&&E.ajax({url:e,type:n||"GET",dataType:"html",data:t}).done(function(e){r=arguments,a.html(s?E("<div>").append(E.parseHTML(e)).find(s):e)}).always(i&&function(e,t){a.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,i){var s,n,r,a,o,l,d=E.css(e,"position"),c=E(e),u={};"static"===d&&(e.style.position="relative"),o=c.offset(),r=E.css(e,"top"),l=E.css(e,"left"),n=("absolute"===d||"fixed"===d)&&-1<(r+l).indexOf("auto")?(a=(s=c.position()).top,s.left):(a=parseFloat(r)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,i,E.extend({},o))),null!=t.top&&(u.top=t.top-o.top+a),null!=t.left&&(u.left=t.left-o.left+n),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),c.css(u))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,i,s=this[0];return s?s.getClientRects().length?(e=s.getBoundingClientRect(),i=s.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,s=this[0],n={top:0,left:0};if("fixed"===E.css(s,"position"))t=s.getBoundingClientRect();else{for(t=this.offset(),i=s.ownerDocument,e=s.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==s&&1===e.nodeType&&((n=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),n.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-n.top-E.css(s,"marginTop",!0),left:t.left-n.left-E.css(s,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||se})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var r="pageYOffset"===n;E.fn[t]=function(e){return R(this,function(e,t,i){var s;if(v(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===i)return s?s[n]:e[t];s?s.scrollTo(r?s.pageXOffset:i,r?i:s.pageYOffset):e[t]=i},t,e,arguments.length)}}),E.each(["top","left"],function(e,i){E.cssHooks[i]=Je(y.pixelPosition,function(e,t){if(t)return t=Qe(e,i),Ye.test(t)?E(e).position()[i]+"px":t})}),E.each({Height:"height",Width:"width"},function(a,o){E.each({padding:"inner"+a,content:o,"":"outer"+a},function(s,r){E.fn[r]=function(e,t){var i=arguments.length&&(s||"boolean"!=typeof e),n=s||(!0===e||!0===t?"margin":"border");return R(this,function(e,t,i){var s;return v(e)?0===r.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+a],s["scroll"+a],e.body["offset"+a],s["offset"+a],s["client"+a])):void 0===i?E.css(e,t,n):E.style(e,t,i,n)},o,i?e:void 0,i)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,s){return this.on(t,e,i,s)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){E.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}});var ni=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var i,s,n;if("string"==typeof t&&(i=e[t],t=e,e=i),b(e))return s=o.call(arguments,2),(n=function(){return e.apply(t||this,s.concat(o.call(arguments)))}).guid=e.guid=e.guid||E.guid++,n},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=$,E.isFunction=b,E.isWindow=v,E.camelCase=Y,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(ni,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var ri=S.jQuery,ai=S.$;return E.noConflict=function(e){return S.$===E&&(S.$=ai),e&&S.jQuery===E&&(S.jQuery=ri),E},void 0===e&&(S.jQuery=S.$=E),E}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(d){"use strict";var n,a=window.Slick||{};n=0,(a=function(e,t){var i,s=this;s.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:d(e),appendDots:d(e),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,t){return d('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},s.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},d.extend(s,s.initials),s.activeBreakpoint=null,s.animType=null,s.animProp=null,s.breakpoints=[],s.breakpointSettings=[],s.cssTransitions=!1,s.focussed=!1,s.interrupted=!1,s.hidden="hidden",s.paused=!0,s.positionProp=null,s.respondTo=null,s.rowCount=1,s.shouldClick=!0,s.$slider=d(e),s.$slidesCache=null,s.transformType=null,s.transitionType=null,s.visibilityChange="visibilitychange",s.windowWidth=0,s.windowTimer=null,i=d(e).data("slick")||{},s.options=d.extend({},s.defaults,t,i),s.currentSlide=s.options.initialSlide,s.originalSettings=s.options,void 0!==document.mozHidden?(s.hidden="mozHidden",s.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(s.hidden="webkitHidden",s.visibilityChange="webkitvisibilitychange"),s.autoPlay=d.proxy(s.autoPlay,s),s.autoPlayClear=d.proxy(s.autoPlayClear,s),s.autoPlayIterator=d.proxy(s.autoPlayIterator,s),s.changeSlide=d.proxy(s.changeSlide,s),s.clickHandler=d.proxy(s.clickHandler,s),s.selectHandler=d.proxy(s.selectHandler,s),s.setPosition=d.proxy(s.setPosition,s),s.swipeHandler=d.proxy(s.swipeHandler,s),s.dragHandler=d.proxy(s.dragHandler,s),s.keyHandler=d.proxy(s.keyHandler,s),s.instanceUid=n++,s.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,s.registerBreakpoints(),s.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},a.prototype.addSlide=a.prototype.slickAdd=function(e,t,i){var s=this;if("boolean"==typeof t)i=t,t=null;else if(t<0||t>=s.slideCount)return!1;s.unload(),"number"==typeof t?0===t&&0===s.$slides.length?d(e).appendTo(s.$slideTrack):i?d(e).insertBefore(s.$slides.eq(t)):d(e).insertAfter(s.$slides.eq(t)):!0===i?d(e).prependTo(s.$slideTrack):d(e).appendTo(s.$slideTrack),s.$slides=s.$slideTrack.children(this.options.slide),s.$slideTrack.children(this.options.slide).detach(),s.$slideTrack.append(s.$slides),s.$slides.each(function(e,t){d(t).attr("data-slick-index",e)}),s.$slidesCache=s.$slides,s.reinit()},a.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},a.prototype.animateSlide=function(e,t){var i={},s=this;s.animateHeight(),!0===s.options.rtl&&!1===s.options.vertical&&(e=-e),!1===s.transformsEnabled?!1===s.options.vertical?s.$slideTrack.animate({left:e},s.options.speed,s.options.easing,t):s.$slideTrack.animate({top:e},s.options.speed,s.options.easing,t):!1===s.cssTransitions?(!0===s.options.rtl&&(s.currentLeft=-s.currentLeft),d({animStart:s.currentLeft}).animate({animStart:e},{duration:s.options.speed,easing:s.options.easing,step:function(e){e=Math.ceil(e),!1===s.options.vertical?i[s.animType]="translate("+e+"px, 0px)":i[s.animType]="translate(0px,"+e+"px)",s.$slideTrack.css(i)},complete:function(){t&&t.call()}})):(s.applyTransition(),e=Math.ceil(e),!1===s.options.vertical?i[s.animType]="translate3d("+e+"px, 0px, 0px)":i[s.animType]="translate3d(0px,"+e+"px, 0px)",s.$slideTrack.css(i),t&&setTimeout(function(){s.disableTransition(),t.call()},s.options.speed))},a.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=d(e).not(this.$slider)),e},a.prototype.asNavFor=function(t){var e=this.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var e=d(this).slick("getSlick");e.unslicked||e.slideHandler(t,!0)})},a.prototype.applyTransition=function(e){var t=this,i={};!1===t.options.fade?i[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:i[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},a.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},a.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},a.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},a.prototype.buildArrows=function(){var e=this;!0===e.options.arrows&&(e.$prevArrow=d(e.options.prevArrow).addClass("slick-arrow"),e.$nextArrow=d(e.options.nextArrow).addClass("slick-arrow"),e.slideCount>e.options.slidesToShow?(e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.prependTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),!0!==e.options.infinite&&e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},a.prototype.buildDots=function(){var e,t,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),t=d("<ul />").addClass(i.options.dotsClass),e=0;e<=i.getDotCount();e+=1)t.append(d("<li />").append(i.options.customPaging.call(this,i,e)));i.$dots=t.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},a.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(e.options.slide+":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,t){d(t).attr("data-slick-index",e).data("originalStyling",d(t).attr("style")||"")}),e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?d('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),!0!==e.options.centerMode&&!0!==e.options.swipeToSlide||(e.options.slidesToScroll=1),d("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),!0===e.options.draggable&&e.$list.addClass("draggable")},a.prototype.buildRows=function(){var e,t,i,s,n,r,a,o=this;if(s=document.createDocumentFragment(),r=o.$slider.children(),0<o.options.rows){for(a=o.options.slidesPerRow*o.options.rows,n=Math.ceil(r.length/a),e=0;e<n;e++){var l=document.createElement("div");for(t=0;t<o.options.rows;t++){var d=document.createElement("div");for(i=0;i<o.options.slidesPerRow;i++){var c=e*a+(t*o.options.slidesPerRow+i);r.get(c)&&d.appendChild(r.get(c))}l.appendChild(d)}s.appendChild(l)}o.$slider.empty().append(s),o.$slider.children().children().children().css({width:100/o.options.slidesPerRow+"%",display:"inline-block"})}},a.prototype.checkResponsive=function(e,t){var i,s,n,r=this,a=!1,o=r.$slider.width(),l=window.innerWidth||d(window).width();if("window"===r.respondTo?n=l:"slider"===r.respondTo?n=o:"min"===r.respondTo&&(n=Math.min(l,o)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(i in s=null,r.breakpoints)r.breakpoints.hasOwnProperty(i)&&(!1===r.originalSettings.mobileFirst?n<r.breakpoints[i]&&(s=r.breakpoints[i]):n>r.breakpoints[i]&&(s=r.breakpoints[i]));null!==s?null!==r.activeBreakpoint&&s===r.activeBreakpoint&&!t||(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=d.extend({},r.originalSettings,r.breakpointSettings[s]),!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e)),a=s):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===e&&(r.currentSlide=r.options.initialSlide),r.refresh(e),a=s),e||!1===a||r.$slider.trigger("breakpoint",[r,a])}},a.prototype.changeSlide=function(e,t){var i,s,n=this,r=d(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),i=n.slideCount%n.options.slidesToScroll!=0?0:(n.slideCount-n.currentSlide)%n.options.slidesToScroll,e.data.message){case"previous":s=0==i?n.options.slidesToScroll:n.options.slidesToShow-i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide-s,!1,t);break;case"next":s=0==i?n.options.slidesToScroll:i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide+s,!1,t);break;case"index":var a=0===e.data.index?0:e.data.index||r.index()*n.options.slidesToScroll;n.slideHandler(n.checkNavigable(a),!1,t),r.children().trigger("focus");break;default:return}},a.prototype.checkNavigable=function(e){var t,i;if(i=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var s in t){if(e<t[s]){e=i;break}i=t[s]}return e},a.prototype.cleanUpEvents=function(){var e=this;e.options.dots&&null!==e.$dots&&(d("li",e.$dots).off("click.slick",e.changeSlide).off("mouseenter.slick",d.proxy(e.interrupt,e,!0)).off("mouseleave.slick",d.proxy(e.interrupt,e,!1)),!0===e.options.accessibility&&e.$dots.off("keydown.slick",e.keyHandler)),e.$slider.off("focus.slick blur.slick"),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow&&e.$prevArrow.off("keydown.slick",e.keyHandler),e.$nextArrow&&e.$nextArrow.off("keydown.slick",e.keyHandler))),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),d(document).off(e.visibilityChange,e.visibility),e.cleanUpSlideEvents(),!0===e.options.accessibility&&e.$list.off("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().off("click.slick",e.selectHandler),d(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),d(window).off("resize.slick.slick-"+e.instanceUid,e.resize),d("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),d(window).off("load.slick.slick-"+e.instanceUid,e.setPosition)},a.prototype.cleanUpSlideEvents=function(){var e=this;e.$list.off("mouseenter.slick",d.proxy(e.interrupt,e,!0)),e.$list.off("mouseleave.slick",d.proxy(e.interrupt,e,!1))},a.prototype.cleanUpRows=function(){var e;0<this.options.rows&&((e=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(e))},a.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},a.prototype.destroy=function(e){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),d(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){d(this).attr("style",d(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,e||t.$slider.trigger("destroy",[t])},a.prototype.disableTransition=function(e){var t={};t[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(t):this.$slides.eq(e).css(t)},a.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},a.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},a.prototype.filterSlides=a.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},a.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(e){e.stopImmediatePropagation();var t=d(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=t.is(":focus"),i.autoPlay())},0)})},a.prototype.getCurrent=a.prototype.slickCurrentSlide=function(){return this.currentSlide},a.prototype.getDotCount=function(){var e=this,t=0,i=0,s=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++s;else for(;t<e.slideCount;)++s,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)s=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++s,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else s=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return s-1},a.prototype.getLeft=function(e){var t,i,s,n,r=this,a=0;return r.slideOffset=0,i=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,n=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?n=-1.5:1===r.options.slidesToShow&&(n=-2)),a=i*r.options.slidesToShow*n),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(a=e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(e-r.slideCount))*i*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*i*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,a=(e+r.options.slidesToShow-r.slideCount)*i),r.slideCount<=r.options.slidesToShow&&(a=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*i*-1+a,!0===r.options.variableWidth&&(s=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?s[0]?-1*(r.$slideTrack.width()-s[0].offsetLeft-s.width()):0:s[0]?-1*s[0].offsetLeft:0,!0===r.options.centerMode&&(s=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?s[0]?-1*(r.$slideTrack.width()-s[0].offsetLeft-s.width()):0:s[0]?-1*s[0].offsetLeft:0,t+=(r.$list.width()-s.outerWidth())/2)),t},a.prototype.getOption=a.prototype.slickGetOption=function(e){return this.options[e]},a.prototype.getNavigableIndexes=function(){var e,t=this,i=0,s=0,n=[];for(e=!1===t.options.infinite?t.slideCount:(i=-1*t.options.slidesToScroll,s=-1*t.options.slidesToScroll,2*t.slideCount);i<e;)n.push(i),i=s+t.options.slidesToScroll,s+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return n},a.prototype.getSlick=function(){return this},a.prototype.getSlideCount=function(){var i,s,n=this;return s=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each(function(e,t){if(t.offsetLeft-s+d(t).outerWidth()/2>-1*n.swipeLeft)return i=t,!1}),Math.abs(d(i).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},a.prototype.goTo=a.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},a.prototype.init=function(e){var t=this;d(t.$slider).hasClass("slick-initialized")||(d(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),t.checkResponsive(!0),t.focusHandler()),e&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},a.prototype.initADA=function(){var s=this,i=Math.ceil(s.slideCount/s.options.slidesToShow),n=s.getNavigableIndexes().filter(function(e){return 0<=e&&e<s.slideCount});s.$slides.add(s.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==s.$dots&&(s.$slides.not(s.$slideTrack.find(".slick-cloned")).each(function(e){var t=n.indexOf(e);if(d(this).attr({role:"tabpanel",id:"slick-slide"+s.instanceUid+e,tabindex:-1}),-1!==t){var i="slick-slide-control"+s.instanceUid+t;d("#"+i).length&&d(this).attr({"aria-describedby":i})}}),s.$dots.attr("role","tablist").find("li").each(function(e){var t=n[e];d(this).attr({role:"presentation"}),d(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+s.instanceUid+e,"aria-controls":"slick-slide"+s.instanceUid+t,"aria-label":e+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(s.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var e=s.currentSlide,t=e+s.options.slidesToShow;e<t;e++)s.options.focusOnChange?s.$slides.eq(e).attr({tabindex:"0"}):s.$slides.eq(e).removeAttr("tabindex");s.activateADA()},a.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},a.prototype.initDotEvents=function(){var e=this;!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&(d("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),!0===e.options.accessibility&&e.$dots.on("keydown.slick",e.keyHandler)),!0===e.options.dots&&!0===e.options.pauseOnDotsHover&&e.slideCount>e.options.slidesToShow&&d("li",e.$dots).on("mouseenter.slick",d.proxy(e.interrupt,e,!0)).on("mouseleave.slick",d.proxy(e.interrupt,e,!1))},a.prototype.initSlideEvents=function(){var e=this;e.options.pauseOnHover&&(e.$list.on("mouseenter.slick",d.proxy(e.interrupt,e,!0)),e.$list.on("mouseleave.slick",d.proxy(e.interrupt,e,!1)))},a.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.initSlideEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),d(document).on(e.visibilityChange,d.proxy(e.visibility,e)),!0===e.options.accessibility&&e.$list.on("keydown.slick",e.keyHandler),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().on("click.slick",e.selectHandler),d(window).on("orientationchange.slick.slick-"+e.instanceUid,d.proxy(e.orientationChange,e)),d(window).on("resize.slick.slick-"+e.instanceUid,d.proxy(e.resize,e)),d("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),d(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),d(e.setPosition)},a.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},a.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},a.prototype.lazyLoad=function(){var e,t,i,r=this;function s(e){d("img[data-lazy]",e).each(function(){var e=d(this),t=d(this).attr("data-lazy"),i=d(this).attr("data-srcset"),s=d(this).attr("data-sizes")||r.$slider.attr("data-sizes"),n=document.createElement("img");n.onload=function(){e.animate({opacity:0},100,function(){i&&(e.attr("srcset",i),s&&e.attr("sizes",s)),e.attr("src",t).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,e,t])})},n.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,t])},n.src=t})}if(!0===r.options.centerMode?i=!0===r.options.infinite?(t=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(t=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(t=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,i=Math.ceil(t+r.options.slidesToShow),!0===r.options.fade&&(0<t&&t--,i<=r.slideCount&&i++)),e=r.$slider.find(".slick-slide").slice(t,i),"anticipated"===r.options.lazyLoad)for(var n=t-1,a=i,o=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)n<0&&(n=r.slideCount-1),e=(e=e.add(o.eq(n))).add(o.eq(a)),n--,a++;s(e),r.slideCount<=r.options.slidesToShow?s(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?s(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&s(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},a.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},a.prototype.next=a.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},a.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},a.prototype.pause=a.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},a.prototype.play=a.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},a.prototype.postSlide=function(e){var t=this;t.unslicked||(t.$slider.trigger("afterChange",[t,e]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange&&d(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()))},a.prototype.prev=a.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},a.prototype.preventDefault=function(e){e.preventDefault()},a.prototype.progressiveLazyLoad=function(e){e=e||1;var t,i,s,n,r,a=this,o=d("img[data-lazy]",a.$slider);o.length?(t=o.first(),i=t.attr("data-lazy"),s=t.attr("data-srcset"),n=t.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){s&&(t.attr("srcset",s),n&&t.attr("sizes",n)),t.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,t,i]),a.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){a.progressiveLazyLoad(e+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,t,i]),a.progressiveLazyLoad())},r.src=i):a.$slider.trigger("allImagesLoaded",[a])},a.prototype.refresh=function(e){var t,i,s=this;i=s.slideCount-s.options.slidesToShow,!s.options.infinite&&s.currentSlide>i&&(s.currentSlide=i),s.slideCount<=s.options.slidesToShow&&(s.currentSlide=0),t=s.currentSlide,s.destroy(!0),d.extend(s,s.initials,{currentSlide:t}),s.init(),e||s.changeSlide({data:{message:"index",index:t}},!1)},a.prototype.registerBreakpoints=function(){var e,t,i,s=this,n=s.options.responsive||null;if("array"===d.type(n)&&n.length){for(e in s.respondTo=s.options.respondTo||"window",n)if(i=s.breakpoints.length-1,n.hasOwnProperty(e)){for(t=n[e].breakpoint;0<=i;)s.breakpoints[i]&&s.breakpoints[i]===t&&s.breakpoints.splice(i,1),i--;s.breakpoints.push(t),s.breakpointSettings[t]=n[e].settings}s.breakpoints.sort(function(e,t){return s.options.mobileFirst?e-t:t-e})}},a.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.registerBreakpoints(),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.cleanUpSlideEvents(),e.initSlideEvents(),e.checkResponsive(!1,!0),!0===e.options.focusOnSelect&&d(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses("number"==typeof e.currentSlide?e.currentSlide:0),e.setPosition(),e.focusHandler(),e.paused=!e.options.autoplay,e.autoPlay(),e.$slider.trigger("reInit",[e])},a.prototype.resize=function(){var e=this;d(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=d(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},a.prototype.removeSlide=a.prototype.slickRemove=function(e,t,i){var s=this;if(e="boolean"==typeof e?!0===(t=e)?0:s.slideCount-1:!0===t?--e:e,s.slideCount<1||e<0||e>s.slideCount-1)return!1;s.unload(),!0===i?s.$slideTrack.children().remove():s.$slideTrack.children(this.options.slide).eq(e).remove(),s.$slides=s.$slideTrack.children(this.options.slide),s.$slideTrack.children(this.options.slide).detach(),s.$slideTrack.append(s.$slides),s.$slidesCache=s.$slides,s.reinit()},a.prototype.setCSS=function(e){var t,i,s=this,n={};!0===s.options.rtl&&(e=-e),t="left"==s.positionProp?Math.ceil(e)+"px":"0px",i="top"==s.positionProp?Math.ceil(e)+"px":"0px",n[s.positionProp]=e,!1===s.transformsEnabled||(!(n={})===s.cssTransitions?n[s.animType]="translate("+t+", "+i+")":n[s.animType]="translate3d("+t+", "+i+", 0px)"),s.$slideTrack.css(n)},a.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},a.prototype.setFade=function(){var i,s=this;s.$slides.each(function(e,t){i=s.slideWidth*e*-1,!0===s.options.rtl?d(t).css({position:"relative",right:i,top:0,zIndex:s.options.zIndex-2,opacity:0}):d(t).css({position:"relative",left:i,top:0,zIndex:s.options.zIndex-2,opacity:0})}),s.$slides.eq(s.currentSlide).css({zIndex:s.options.zIndex-1,opacity:1})},a.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},a.prototype.setOption=a.prototype.slickSetOption=function(){var e,t,i,s,n,r=this,a=!1;if("object"===d.type(arguments[0])?(i=arguments[0],a=arguments[1],n="multiple"):"string"===d.type(arguments[0])&&(s=arguments[1],a=arguments[2],"responsive"===(i=arguments[0])&&"array"===d.type(arguments[1])?n="responsive":void 0!==arguments[1]&&(n="single")),"single"===n)r.options[i]=s;else if("multiple"===n)d.each(i,function(e,t){r.options[e]=t});else if("responsive"===n)for(t in s)if("array"!==d.type(r.options.responsive))r.options.responsive=[s[t]];else{for(e=r.options.responsive.length-1;0<=e;)r.options.responsive[e].breakpoint===s[t].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(s[t])}a&&(r.unload(),r.reinit())},a.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},a.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},a.prototype.setSlideClasses=function(e){var t,i,s,n,r=this;if(i=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var a=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(t<=e&&e<=r.slideCount-1-t?r.$slides.slice(e-t+a,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(s=r.options.slidesToShow+e,i.slice(s-t+1+a,s+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?i.eq(i.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&i.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=r.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(n=r.slideCount%r.options.slidesToShow,s=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?i.slice(s-(r.options.slidesToShow-n),s+n).addClass("slick-active").attr("aria-hidden","false"):i.slice(s,s+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},a.prototype.setupInfinite=function(){var e,t,i,s=this;if(!0===s.options.fade&&(s.options.centerMode=!1),!0===s.options.infinite&&!1===s.options.fade&&(t=null,s.slideCount>s.options.slidesToShow)){for(i=!0===s.options.centerMode?s.options.slidesToShow+1:s.options.slidesToShow,e=s.slideCount;e>s.slideCount-i;--e)t=e-1,d(s.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");for(e=0;e<i+s.slideCount;e+=1)t=e,d(s.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");s.$slideTrack.find(".slick-cloned").find("[id]").each(function(){d(this).attr("id","")})}},a.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},a.prototype.selectHandler=function(e){var t=d(e.target).is(".slick-slide")?d(e.target):d(e.target).parents(".slick-slide"),i=parseInt(t.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},a.prototype.slideHandler=function(e,t,i){var s,n,r,a,o,l,d=this;if(t=t||!1,!(!0===d.animating&&!0===d.options.waitForAnimate||!0===d.options.fade&&d.currentSlide===e))if(!1===t&&d.asNavFor(e),s=e,o=d.getLeft(s),a=d.getLeft(d.currentSlide),d.currentLeft=null===d.swipeLeft?a:d.swipeLeft,!1===d.options.infinite&&!1===d.options.centerMode&&(e<0||e>d.getDotCount()*d.options.slidesToScroll))!1===d.options.fade&&(s=d.currentSlide,!0!==i&&d.slideCount>d.options.slidesToShow?d.animateSlide(a,function(){d.postSlide(s)}):d.postSlide(s));else if(!1===d.options.infinite&&!0===d.options.centerMode&&(e<0||e>d.slideCount-d.options.slidesToScroll))!1===d.options.fade&&(s=d.currentSlide,!0!==i&&d.slideCount>d.options.slidesToShow?d.animateSlide(a,function(){d.postSlide(s)}):d.postSlide(s));else{if(d.options.autoplay&&clearInterval(d.autoPlayTimer),n=s<0?d.slideCount%d.options.slidesToScroll!=0?d.slideCount-d.slideCount%d.options.slidesToScroll:d.slideCount+s:s>=d.slideCount?d.slideCount%d.options.slidesToScroll!=0?0:s-d.slideCount:s,d.animating=!0,d.$slider.trigger("beforeChange",[d,d.currentSlide,n]),r=d.currentSlide,d.currentSlide=n,d.setSlideClasses(d.currentSlide),d.options.asNavFor&&(l=(l=d.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(d.currentSlide),d.updateDots(),d.updateArrows(),!0===d.options.fade)return!0!==i?(d.fadeSlideOut(r),d.fadeSlide(n,function(){d.postSlide(n)})):d.postSlide(n),void d.animateHeight();!0!==i&&d.slideCount>d.options.slidesToShow?d.animateSlide(o,function(){d.postSlide(n)}):d.postSlide(n)}},a.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},a.prototype.swipeDirection=function(){var e,t,i,s,n=this;return e=n.touchObject.startX-n.touchObject.curX,t=n.touchObject.startY-n.touchObject.curY,i=Math.atan2(t,e),(s=Math.round(180*i/Math.PI))<0&&(s=360-Math.abs(s)),s<=45&&0<=s||s<=360&&315<=s?!1===n.options.rtl?"left":"right":135<=s&&s<=225?!1===n.options.rtl?"right":"left":!0===n.options.verticalSwiping?35<=s&&s<=135?"down":"up":"vertical"},a.prototype.swipeEnd=function(e){var t,i,s=this;if(s.dragging=!1,s.swiping=!1,s.scrolling)return s.scrolling=!1;if(s.interrupted=!1,s.shouldClick=!(10<s.touchObject.swipeLength),void 0===s.touchObject.curX)return!1;if(!0===s.touchObject.edgeHit&&s.$slider.trigger("edge",[s,s.swipeDirection()]),s.touchObject.swipeLength>=s.touchObject.minSwipe){switch(i=s.swipeDirection()){case"left":case"down":t=s.options.swipeToSlide?s.checkNavigable(s.currentSlide+s.getSlideCount()):s.currentSlide+s.getSlideCount(),s.currentDirection=0;break;case"right":case"up":t=s.options.swipeToSlide?s.checkNavigable(s.currentSlide-s.getSlideCount()):s.currentSlide-s.getSlideCount(),s.currentDirection=1}"vertical"!=i&&(s.slideHandler(t),s.touchObject={},s.$slider.trigger("swipe",[s,i]))}else s.touchObject.startX!==s.touchObject.curX&&(s.slideHandler(s.currentSlide),s.touchObject={})},a.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},a.prototype.swipeMove=function(e){var t,i,s,n,r,a,o=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!o.dragging||o.scrolling||r&&1!==r.length)&&(t=o.getLeft(o.currentSlide),o.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,o.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,o.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(o.touchObject.curX-o.touchObject.startX,2))),a=Math.round(Math.sqrt(Math.pow(o.touchObject.curY-o.touchObject.startY,2))),!o.options.verticalSwiping&&!o.swiping&&4<a?!(o.scrolling=!0):(!0===o.options.verticalSwiping&&(o.touchObject.swipeLength=a),i=o.swipeDirection(),void 0!==e.originalEvent&&4<o.touchObject.swipeLength&&(o.swiping=!0,e.preventDefault()),n=(!1===o.options.rtl?1:-1)*(o.touchObject.curX>o.touchObject.startX?1:-1),!0===o.options.verticalSwiping&&(n=o.touchObject.curY>o.touchObject.startY?1:-1),s=o.touchObject.swipeLength,(o.touchObject.edgeHit=!1)===o.options.infinite&&(0===o.currentSlide&&"right"===i||o.currentSlide>=o.getDotCount()&&"left"===i)&&(s=o.touchObject.swipeLength*o.options.edgeFriction,o.touchObject.edgeHit=!0),!1===o.options.vertical?o.swipeLeft=t+s*n:o.swipeLeft=t+s*(o.$list.height()/o.listWidth)*n,!0===o.options.verticalSwiping&&(o.swipeLeft=t+s*n),!0!==o.options.fade&&!1!==o.options.touchMove&&(!0===o.animating?(o.swipeLeft=null,!1):void o.setCSS(o.swipeLeft))))},a.prototype.swipeStart=function(e){var t,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==t?t.pageX:e.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==t?t.pageY:e.clientY,i.dragging=!0},a.prototype.unfilterSlides=a.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},a.prototype.unload=function(){var e=this;d(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove(),e.$nextArrow&&e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},a.prototype.unslick=function(e){this.$slider.trigger("unslick",[this,e]),this.destroy()},a.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},a.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},a.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},d.fn.slick=function(){var e,t,i=this,s=arguments[0],n=Array.prototype.slice.call(arguments,1),r=i.length;for(e=0;e<r;e++)if("object"==typeof s||void 0===s?i[e].slick=new a(i[e],s):t=i[e].slick[s].apply(i[e].slick,n),void 0!==t)return t;return i}}),function(){function t(e,t){return function(){return e.apply(t,arguments)}}var s,e,i,l,n,a=[].indexOf||function(e){for(var t=0,i=this.length;t<i;t++)if(t in this&&this[t]===e)return t;return-1};function r(){}function o(){this.keys=[],this.values=[]}function d(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}function c(e){null==e&&(e={}),this.scrollCallback=t(this.scrollCallback,this),this.scrollHandler=t(this.scrollHandler,this),this.resetAnimation=t(this.resetAnimation,this),this.start=t(this.start,this),this.scrolled=!0,this.config=this.util().extend(e,this.defaults),null!=e.scrollContainer&&(this.config.scrollContainer=document.querySelector(e.scrollContainer)),this.animationNameCache=new i,this.wowEvent=this.util().createEvent(this.config.boxClass)}r.prototype.extend=function(e,t){var i,s;for(i in t)s=t[i],null==e[i]&&(e[i]=s);return e},r.prototype.isMobile=function(e){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e)},r.prototype.createEvent=function(e,t,i,s){var n;return null==t&&(t=!1),null==i&&(i=!1),null==s&&(s=null),null!=document.createEvent?(n=document.createEvent("CustomEvent")).initCustomEvent(e,t,i,s):null!=document.createEventObject?(n=document.createEventObject()).eventType=e:n.eventName=e,n},r.prototype.emitEvent=function(e,t){return null!=e.dispatchEvent?e.dispatchEvent(t):t in(null!=e)?e[t]():"on"+t in(null!=e)?e["on"+t]():void 0},r.prototype.addEvent=function(e,t,i){return null!=e.addEventListener?e.addEventListener(t,i,!1):null!=e.attachEvent?e.attachEvent("on"+t,i):e[t]=i},r.prototype.removeEvent=function(e,t,i){return null!=e.removeEventListener?e.removeEventListener(t,i,!1):null!=e.detachEvent?e.detachEvent("on"+t,i):delete e[t]},r.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},e=r,i=this.WeakMap||this.MozWeakMap||(o.prototype.get=function(e){var t,i,s,n;for(t=i=0,s=(n=this.keys).length;i<s;t=++i)if(n[t]===e)return this.values[t]},o.prototype.set=function(e,t){var i,s,n,r;for(i=s=0,n=(r=this.keys).length;s<n;i=++s)if(r[i]===e)return void(this.values[i]=t);return this.keys.push(e),this.values.push(t)},o),s=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(d.notSupported=!0,d.prototype.observe=function(){},d),l=this.getComputedStyle||function(i,e){return this.getPropertyValue=function(e){var t;return"float"===e&&(e="styleFloat"),n.test(e)&&e.replace(n,function(e,t){return t.toUpperCase()}),(null!=(t=i.currentStyle)?t[e]:void 0)||null},this},n=/(\-([a-z]){1})/g,this.WOW=(c.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null},c.prototype.init=function(){var e;return this.element=window.document.documentElement,"interactive"===(e=document.readyState)||"complete"===e?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},c.prototype.start=function(){var n,e,t,i,a;if(this.stopped=!1,this.boxes=function(){var e,t,i,s;for(s=[],e=0,t=(i=this.element.querySelectorAll("."+this.config.boxClass)).length;e<t;e++)n=i[e],s.push(n);return s}.call(this),this.all=function(){var e,t,i,s;for(s=[],e=0,t=(i=this.boxes).length;e<t;e++)n=i[e],s.push(n);return s}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(e=0,t=(i=this.boxes).length;e<t;e++)n=i[e],this.applyStyle(n,!0);if(this.disabled()||(this.util().addEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)return new s((a=this,function(e){var t,i,n,r,s;for(s=[],t=0,i=e.length;t<i;t++)r=e[t],s.push(function(){var e,t,i,s;for(s=[],e=0,t=(i=r.addedNodes||[]).length;e<t;e++)n=i[e],s.push(this.doSync(n));return s}.call(a));return s})).observe(document.body,{childList:!0,subtree:!0})},c.prototype.stop=function(){if(this.stopped=!0,this.util().removeEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval)return clearInterval(this.interval)},c.prototype.sync=function(e){if(s.notSupported)return this.doSync(this.element)},c.prototype.doSync=function(e){var t,i,s,n,r;if(null==e&&(e=this.element),1===e.nodeType){for(r=[],i=0,s=(n=(e=e.parentNode||e).querySelectorAll("."+this.config.boxClass)).length;i<s;i++)t=n[i],a.call(this.all,t)<0?(this.boxes.push(t),this.all.push(t),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(t,!0),r.push(this.scrolled=!0)):r.push(void 0);return r}},c.prototype.show=function(e){return this.applyStyle(e),e.className=e.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(e),this.util().emitEvent(e,this.wowEvent),this.util().addEvent(e,"animationend",this.resetAnimation),this.util().addEvent(e,"oanimationend",this.resetAnimation),this.util().addEvent(e,"webkitAnimationEnd",this.resetAnimation),this.util().addEvent(e,"MSAnimationEnd",this.resetAnimation),e},c.prototype.applyStyle=function(e,t){var i,s,n,r;return s=e.getAttribute("data-wow-duration"),i=e.getAttribute("data-wow-delay"),n=e.getAttribute("data-wow-iteration"),this.animate((r=this,function(){return r.customStyle(e,t,s,i,n)}))},c.prototype.animate="requestAnimationFrame"in window?function(e){return window.requestAnimationFrame(e)}:function(e){return e()},c.prototype.resetStyle=function(){var e,t,i,s,n;for(n=[],t=0,i=(s=this.boxes).length;t<i;t++)e=s[t],n.push(e.style.visibility="visible");return n},c.prototype.resetAnimation=function(e){var t;if(0<=e.type.toLowerCase().indexOf("animationend"))return(t=e.target||e.srcElement).className=t.className.replace(this.config.animateClass,"").trim()},c.prototype.customStyle=function(e,t,i,s,n){return t&&this.cacheAnimationName(e),e.style.visibility=t?"hidden":"visible",i&&this.vendorSet(e.style,{animationDuration:i}),s&&this.vendorSet(e.style,{animationDelay:s}),n&&this.vendorSet(e.style,{animationIterationCount:n}),this.vendorSet(e.style,{animationName:t?"none":this.cachedAnimationName(e)}),e},c.prototype.vendors=["moz","webkit"],c.prototype.vendorSet=function(n,e){var r,t,a,o;for(r in t=[],e)a=e[r],n[""+r]=a,t.push(function(){var e,t,i,s;for(s=[],e=0,t=(i=this.vendors).length;e<t;e++)o=i[e],s.push(n[""+o+r.charAt(0).toUpperCase()+r.substr(1)]=a);return s}.call(this));return t},c.prototype.vendorCSS=function(e,t){var i,s,n,r,a,o;for(r=(a=l(e)).getPropertyCSSValue(t),i=0,s=(n=this.vendors).length;i<s;i++)o=n[i],r=r||a.getPropertyCSSValue("-"+o+"-"+t);return r},c.prototype.animationName=function(t){var i;try{i=this.vendorCSS(t,"animation-name").cssText}catch(e){i=l(t).getPropertyValue("animation-name")}return"none"===i?"":i},c.prototype.cacheAnimationName=function(e){return this.animationNameCache.set(e,this.animationName(e))},c.prototype.cachedAnimationName=function(e){return this.animationNameCache.get(e)},c.prototype.scrollHandler=function(){return this.scrolled=!0},c.prototype.scrollCallback=function(){var n;if(this.scrolled&&(this.scrolled=!1,this.boxes=function(){var e,t,i,s;for(s=[],e=0,t=(i=this.boxes).length;e<t;e++)(n=i[e])&&(this.isVisible(n)?this.show(n):s.push(n));return s}.call(this),!this.boxes.length&&!this.config.live))return this.stop()},c.prototype.offsetTop=function(e){for(var t;void 0===e.offsetTop;)e=e.parentNode;for(t=e.offsetTop;e=e.offsetParent;)t+=e.offsetTop;return t},c.prototype.isVisible=function(e){var t,i,s,n,r;return i=e.getAttribute("data-wow-offset")||this.config.offset,n=(r=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset)+Math.min(this.element.clientHeight,this.util().innerHeight())-i,t=(s=this.offsetTop(e))+e.clientHeight,s<=n&&r<=t},c.prototype.util=function(){return null!=this._util?this._util:this._util=new e},c.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},c)}.call(this),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";var v="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,ne="undefined"==typeof window?{document:v,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function A(e,t){var i=[],s=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var n,r,a=e.trim();if(0<=a.indexOf("<")&&0<=a.indexOf(">")){var o="div";for(0===a.indexOf("<li")&&(o="ul"),0===a.indexOf("<tr")&&(o="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(o="tr"),0===a.indexOf("<tbody")&&(o="table"),0===a.indexOf("<option")&&(o="select"),(r=v.createElement(o)).innerHTML=a,s=0;s<r.childNodes.length;s+=1)i.push(r.childNodes[s])}else for(n=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||v).querySelectorAll(e.trim()):[v.getElementById(e.trim().split("#")[1])],s=0;s<n.length;s+=1)n[s]&&i.push(n[s])}else if(e.nodeType||e===ne||e===v)i.push(e);else if(0<e.length&&e[0].nodeType)for(s=0;s<e.length;s+=1)i.push(e[s]);return new l(i)}function r(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}A.fn=l.prototype,A.Class=l,A.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s]&&void 0!==this[s].classList&&this[s].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s]&&void 0!==this[s].classList&&this[s].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var s=0;s<this.length;s+=1)void 0!==this[s]&&void 0!==this[s].classList&&this[s].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var s=0;s<this.length;s+=1)if(2===i.length)this[s].setAttribute(e,t);else for(var n in e)this[s][n]=e[n],this[s].setAttribute(n,e[n]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var s=0;s<this.length;s+=1)(i=this[s]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0])return i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage?i.dom7ElementDataStorage[e]:i.getAttribute("data-"+e)||void 0},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],r=e[1],a=e[2],s=e[3];function n(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),A(t).is(r))a.apply(t,i);else for(var s=A(t).parents(),n=0;n<s.length;n+=1)A(s[n]).is(r)&&a.apply(s[n],i)}}function o(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),a.apply(this,t)}"function"==typeof e[1]&&(i=e[0],a=e[1],s=e[2],r=void 0),s=s||!1;for(var l,d=i.split(" "),c=0;c<this.length;c+=1){var u=this[c];if(r)for(l=0;l<d.length;l+=1){var h=d[l];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[h]||(u.dom7LiveListeners[h]=[]),u.dom7LiveListeners[h].push({listener:a,proxyListener:n}),u.addEventListener(h,n,s)}else for(l=0;l<d.length;l+=1){var p=d[l];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[p]||(u.dom7Listeners[p]=[]),u.dom7Listeners[p].push({listener:a,proxyListener:o}),u.addEventListener(p,o,s)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],s=e[1],n=e[2],r=e[3];"function"==typeof e[1]&&(i=e[0],n=e[1],r=e[2],s=void 0),r=r||!1;for(var a=i.split(" "),o=0;o<a.length;o+=1)for(var l=a[o],d=0;d<this.length;d+=1){var c=this[d],u=void 0;if(!s&&c.dom7Listeners?u=c.dom7Listeners[l]:s&&c.dom7LiveListeners&&(u=c.dom7LiveListeners[l]),u&&u.length)for(var h=u.length-1;0<=h;--h){var p=u[h];!(n&&p.listener===n||n&&p.listener&&p.listener.dom7proxy&&p.listener.dom7proxy===n)&&n||(c.removeEventListener(l,p.proxyListener,r),u.splice(h,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),s=e[1],n=0;n<i.length;n+=1)for(var r=i[n],a=0;a<this.length;a+=1){var o=this[a],l=void 0;try{l=new ne.CustomEvent(r,{detail:s,bubbles:!0,cancelable:!0})}catch(e){(l=v.createEvent("Event")).initEvent(r,!0,!0),l.detail=s}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var i,s=["webkitTransitionEnd","transitionend"],n=this;function r(e){if(e.target===this)for(t.call(this,e),i=0;i<s.length;i+=1)n.off(s[i],r)}if(t)for(i=0;i<s.length;i+=1)n.on(s[i],r);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=v.body,s=e.clientTop||i.clientTop||0,n=e.clientLeft||i.clientLeft||0,r=e===ne?ne.scrollY:e.scrollTop,a=e===ne?ne.scrollX:e.scrollLeft;return{top:t.top+r-s,left:t.left+a-n}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var s in e)this[i].style[s]=e[s];return this}if(this[0])return ne.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,s=this[0];if(!s||void 0===e)return!1;if("string"==typeof e){if(s.matches)return s.matches(e);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(e);if(s.msMatchesSelector)return s.msMatchesSelector(e);for(t=A(e),i=0;i<t.length;i+=1)if(t[i]===s)return!0;return!1}if(e===v)return s===v;if(e===ne)return s===ne;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===s)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new l(i-1<e?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var s=0;s<t.length;s+=1){e=t[s];for(var n=0;n<this.length;n+=1)if("string"==typeof e){var r=v.createElement("div");for(r.innerHTML=e;r.firstChild;)this[n].appendChild(r.firstChild)}else if(e instanceof l)for(var a=0;a<e.length;a+=1)this[n].appendChild(e[a]);else this[n].appendChild(e)}return this},prepend:function(e){var t,i;for(t=0;t<this.length;t+=1)if("string"==typeof e){var s=v.createElement("div");for(s.innerHTML=e,i=s.childNodes.length-1;0<=i;--i)this[t].insertBefore(s.childNodes[i],this[t].childNodes[0])}else if(e instanceof l)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&A(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var s=i.nextElementSibling;e&&!A(s).is(e)||t.push(s),i=s}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&A(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var s=i.previousElementSibling;e&&!A(s).is(e)||t.push(s),i=s}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null===this[i].parentNode||e&&!A(this[i].parentNode).is(e)||t.push(this[i].parentNode);return A(r(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].parentNode;s;)e&&!A(s).is(e)||t.push(s),s=s.parentNode;return A(r(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].querySelectorAll(e),n=0;n<s.length;n+=1)t.push(s[n]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var s=this[i].childNodes,n=0;n<s.length;n+=1)e?1===s[n].nodeType&&A(s[n]).is(e)&&t.push(s[n]):1===s[n].nodeType&&t.push(s[n]);return new l(r(t))},filter:function(e){for(var t=[],i=0;i<this.length;i+=1)e.call(this[i],i,this[i])&&t.push(this[i]);return new l(t)},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,s;for(i=0;i<e.length;i+=1){var n=A(e[i]);for(s=0;s<n.length;s+=1)this[this.length]=n[s],this.length+=1}return this},styles:function(){return this[0]?ne.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){A.fn[e]=A.fn[e]||t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var re={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,s,n;void 0===t&&(t="x");var r=ne.getComputedStyle(e,null);return ne.WebKitCSSMatrix?(6<(s=r.transform||r.webkitTransform).split(",").length&&(s=s.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),n=new ne.WebKitCSSMatrix("none"===s?"":s)):i=(n=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(s=ne.WebKitCSSMatrix?n.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(s=ne.WebKitCSSMatrix?n.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),s||0},parseUrlQuery:function(e){var t,i,s,n,r={},a=e||ne.location.href;if("string"==typeof a&&a.length)for(n=(i=(a=-1<a.indexOf("?")?a.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<n;t+=1)s=i[t].replace(/#\S+/g,"").split("="),r[decodeURIComponent(s[0])]=void 0===s[1]?void 0:decodeURIComponent(s[1])||"";return r},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),s=1;s<e.length;s+=1){var n=e[s];if(null!=n)for(var r=Object.keys(Object(n)),a=0,o=r.length;a<o;a+=1){var l=r[a],d=Object.getOwnPropertyDescriptor(n,l);void 0!==d&&d.enumerable&&(re.isObject(i[l])&&re.isObject(n[l])?re.extend(i[l],n[l]):!re.isObject(i[l])&&re.isObject(n[l])?(i[l]={},re.extend(i[l],n[l])):i[l]=n[l])}}return i}},E={touch:ne.Modernizr&&!0===ne.Modernizr.touch||!!(0<ne.navigator.maxTouchPoints||"ontouchstart"in ne||ne.DocumentTouch&&v instanceof ne.DocumentTouch),pointerEvents:!!ne.PointerEvent&&"maxTouchPoints"in ne.navigator&&0<ne.navigator.maxTouchPoints,observer:"MutationObserver"in ne||"WebkitMutationObserver"in ne,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});ne.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in ne},i={components:{configurable:!0}};e.prototype.on=function(e,t,i){var s=this;if("function"!=typeof t)return s;var n=i?"unshift":"push";return e.split(" ").forEach(function(e){s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][n](t)}),s},e.prototype.once=function(i,s,e){var n=this;if("function"!=typeof s)return n;function r(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];n.off(i,r),r.f7proxy&&delete r.f7proxy,s.apply(n,e)}return r.f7proxy=s,n.on(i,r,e)},e.prototype.off=function(e,s){var n=this;return n.eventsListeners&&e.split(" ").forEach(function(i){void 0===s?n.eventsListeners[i]=[]:n.eventsListeners[i]&&n.eventsListeners[i].length&&n.eventsListeners[i].forEach(function(e,t){(e===s||e.f7proxy&&e.f7proxy===s)&&n.eventsListeners[i].splice(t,1)})}),n},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,s,n,r=this;return r.eventsListeners&&(n="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],s=e.slice(1,e.length),r):(i=e[0].events,s=e[0].data,e[0].context||r),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){if(r.eventsListeners&&r.eventsListeners[e]){var t=[];r.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(n,s)})}})),r},e.prototype.useModulesParams=function(i){var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var t=s.modules[e];t.params&&re.extend(i,t.params)})},e.prototype.useModules=function(s){void 0===s&&(s={});var n=this;n.modules&&Object.keys(n.modules).forEach(function(e){var i=n.modules[e],t=s[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];n[e]="function"==typeof t?t.bind(n):t}),i.on&&n.on&&Object.keys(i.on).forEach(function(e){n.on(e,i.on[e])}),i.create&&i.create.bind(n)(t)})},i.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var s=this;s.prototype.modules||(s.prototype.modules={});var n=t.name||Object.keys(s.prototype.modules).length+"_"+re.now();return(s.prototype.modules[n]=t).proto&&Object.keys(t.proto).forEach(function(e){s.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){s[e]=t.static[e]}),t.install&&t.install.apply(s,e),s},e.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var s=this;return Array.isArray(e)?(e.forEach(function(e){return s.installModule(e)}),s):s.installModule.apply(s,[e].concat(t))},Object.defineProperties(e,i);var s,n,a,o,d,c,u,h,p,f,m,g,y,b,w,x={updateSize:function(){var e,t,i=this.$el;e=void 0!==this.params.width?this.params.width:i[0].clientWidth,t=void 0!==this.params.height?this.params.height:i[0].clientHeight,0===e&&this.isHorizontal()||0===t&&this.isVertical()||(e=e-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),t=t-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),re.extend(this,{width:e,height:t,size:this.isHorizontal()?e:t}))},updateSlides:function(){var t=this.params,e=this.$wrapperEl,i=this.size,s=this.rtlTranslate,n=this.wrongRTL,r=this.virtual&&t.virtual.enabled,a=r?this.virtual.slides.length:this.slides.length,o=e.children("."+this.params.slideClass),l=r?this.virtual.slides.length:o.length,d=[],c=[],u=[];function h(e){return!t.cssMode||e!==o.length-1}var p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(this));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(this));var v=this.snapGrid.length,m=this.snapGrid.length,g=t.spaceBetween,y=-p,b=0,w=0;if(void 0!==i){var x,T;"string"==typeof g&&0<=g.indexOf("%")&&(g=parseFloat(g.replace("%",""))/100*i),this.virtualSize=-g,s?o.css({marginLeft:"",marginTop:""}):o.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(x=Math.floor(l/t.slidesPerColumn)===l/this.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));for(var S,C=t.slidesPerColumn,E=x/C,k=Math.floor(l/t.slidesPerColumn),$=0;$<l;$+=1){T=0;var M=o.eq($);if(1<t.slidesPerColumn){var P=void 0,A=void 0,L=void 0;if("row"===t.slidesPerColumnFill&&1<t.slidesPerGroup){var z=Math.floor($/(t.slidesPerGroup*t.slidesPerColumn)),D=$-t.slidesPerColumn*t.slidesPerGroup*z,O=0===z?t.slidesPerGroup:Math.min(Math.ceil((l-z*C*t.slidesPerGroup)/C),t.slidesPerGroup);P=(A=D-(L=Math.floor(D/O))*O+z*t.slidesPerGroup)+L*x/C,M.css({"-webkit-box-ordinal-group":P,"-moz-box-ordinal-group":P,"-ms-flex-order":P,"-webkit-order":P,order:P})}else"column"===t.slidesPerColumnFill?(L=$-(A=Math.floor($/C))*C,(k<A||A===k&&L===C-1)&&(L+=1)>=C&&(L=0,A+=1)):A=$-(L=Math.floor($/E))*E;M.css("margin-"+(this.isHorizontal()?"top":"left"),0!==L&&t.spaceBetween&&t.spaceBetween+"px")}if("none"!==M.css("display")){if("auto"===t.slidesPerView){var I=ne.getComputedStyle(M[0],null),H=M[0].style.transform,N=M[0].style.webkitTransform;if(H&&(M[0].style.transform="none"),N&&(M[0].style.webkitTransform="none"),t.roundLengths)T=this.isHorizontal()?M.outerWidth(!0):M.outerHeight(!0);else if(this.isHorizontal()){var j=parseFloat(I.getPropertyValue("width")),q=parseFloat(I.getPropertyValue("padding-left")),B=parseFloat(I.getPropertyValue("padding-right")),W=parseFloat(I.getPropertyValue("margin-left")),R=parseFloat(I.getPropertyValue("margin-right")),F=I.getPropertyValue("box-sizing");T=F&&"border-box"===F?j+W+R:j+q+B+W+R}else{var G=parseFloat(I.getPropertyValue("height")),X=parseFloat(I.getPropertyValue("padding-top")),Y=parseFloat(I.getPropertyValue("padding-bottom")),V=parseFloat(I.getPropertyValue("margin-top")),U=parseFloat(I.getPropertyValue("margin-bottom")),_=I.getPropertyValue("box-sizing");T=_&&"border-box"===_?G+V+U:G+X+Y+V+U}H&&(M[0].style.transform=H),N&&(M[0].style.webkitTransform=N),t.roundLengths&&(T=Math.floor(T))}else T=(i-(t.slidesPerView-1)*g)/t.slidesPerView,t.roundLengths&&(T=Math.floor(T)),o[$]&&(this.isHorizontal()?o[$].style.width=T+"px":o[$].style.height=T+"px");o[$]&&(o[$].swiperSlideSize=T),u.push(T),t.centeredSlides?(y=y+T/2+b/2+g,0===b&&0!==$&&(y=y-i/2-g),0===$&&(y=y-i/2-g),Math.abs(y)<.001&&(y=0),t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&d.push(y),c.push(y)):(t.roundLengths&&(y=Math.floor(y)),(w-Math.min(this.params.slidesPerGroupSkip,w))%this.params.slidesPerGroup==0&&d.push(y),c.push(y),y=y+T+g),this.virtualSize+=T+g,b=T,w+=1}}if(this.virtualSize=Math.max(this.virtualSize,i)+f,s&&n&&("slide"===t.effect||"coverflow"===t.effect)&&e.css({width:this.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(this.virtualSize=(T+t.spaceBetween)*x,this.virtualSize=Math.ceil(this.virtualSize/t.slidesPerColumn)-t.spaceBetween,this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){S=[];for(var K=0;K<d.length;K+=1){var Q=d[K];t.roundLengths&&(Q=Math.floor(Q)),d[K]<this.virtualSize+d[0]&&S.push(Q)}d=S}if(!t.centeredSlides){S=[];for(var J=0;J<d.length;J+=1){var Z=d[J];t.roundLengths&&(Z=Math.floor(Z)),d[J]<=this.virtualSize-i&&S.push(Z)}d=S,1<Math.floor(this.virtualSize-i)-Math.floor(d[d.length-1])&&d.push(this.virtualSize-i)}if(0===d.length&&(d=[0]),0!==t.spaceBetween&&(this.isHorizontal()?s?o.filter(h).css({marginLeft:g+"px"}):o.filter(h).css({marginRight:g+"px"}):o.filter(h).css({marginBottom:g+"px"})),t.centeredSlides&&t.centeredSlidesBounds){var ee=0;u.forEach(function(e){ee+=e+(t.spaceBetween?t.spaceBetween:0)});var te=(ee-=t.spaceBetween)-i;d=d.map(function(e){return e<0?-p:te<e?te+f:e})}if(t.centerInsufficientSlides){var ie=0;if(u.forEach(function(e){ie+=e+(t.spaceBetween?t.spaceBetween:0)}),(ie-=t.spaceBetween)<i){var se=(i-ie)/2;d.forEach(function(e,t){d[t]=e-se}),c.forEach(function(e,t){c[t]=e+se})}}re.extend(this,{slides:o,snapGrid:d,slidesGrid:c,slidesSizesGrid:u}),l!==a&&this.emit("slidesLengthChange"),d.length!==v&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),c.length!==m&&this.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=[],s=0;if("number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&1<this.params.slidesPerView)if(this.params.centeredSlides)this.visibleSlides.each(function(e,t){i.push(t)});else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var n=this.activeIndex+t;if(n>this.slides.length)break;i.push(this.slides.eq(n)[0])}else i.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var r=i[t].offsetHeight;s=s<r?r:s}s&&this.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,s=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var n=-e;s&&(n=e),i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var r=0;r<i.length;r+=1){var a=i[r],o=(n+(t.centeredSlides?this.minTranslate():0)-a.swiperSlideOffset)/(a.swiperSlideSize+t.spaceBetween);if(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight){var l=-(n-a.swiperSlideOffset),d=l+this.slidesSizesGrid[r];(0<=l&&l<this.size-1||1<d&&d<=this.size||l<=0&&d>=this.size)&&(this.visibleSlides.push(a),this.visibleSlidesIndexes.push(r),i.eq(r).addClass(t.slideVisibleClass))}a.progress=s?-o:o}this.visibleSlides=A(this.visibleSlides)}},updateProgress:function(e){if(void 0===e){var t=this.rtlTranslate?-1:1;e=this&&this.translate&&this.translate*t||0}var i=this.params,s=this.maxTranslate()-this.minTranslate(),n=this.progress,r=this.isBeginning,a=this.isEnd,o=r,l=a;a=0==s?r=!(n=0):(r=(n=(e-this.minTranslate())/s)<=0,1<=n),re.extend(this,{progress:n,isBeginning:r,isEnd:a}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e),r&&!o&&this.emit("reachBeginning toEdge"),a&&!l&&this.emit("reachEnd toEdge"),(o&&!r||l&&!a)&&this.emit("fromEdge"),this.emit("progress",n)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,s=this.$wrapperEl,n=this.activeIndex,r=this.realIndex,a=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=a?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+n+'"]'):t.eq(n)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i=this.rtlTranslate?this.translate:-this.translate,s=this.slidesGrid,n=this.snapGrid,r=this.params,a=this.activeIndex,o=this.realIndex,l=this.snapIndex,d=e;if(void 0===d){for(var c=0;c<s.length;c+=1)void 0!==s[c+1]?i>=s[c]&&i<s[c+1]-(s[c+1]-s[c])/2?d=c:i>=s[c]&&i<s[c+1]&&(d=c+1):i>=s[c]&&(d=c);r.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if(0<=n.indexOf(i))t=n.indexOf(i);else{var u=Math.min(r.slidesPerGroupSkip,d);t=u+Math.floor((d-u)/r.slidesPerGroup)}if(t>=n.length&&(t=n.length-1),d!==a){var h=parseInt(this.slides.eq(d).attr("data-swiper-slide-index")||d,10);re.extend(this,{snapIndex:t,realIndex:h,previousIndex:a,activeIndex:d}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),o!==h&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")}else t!==l&&(this.snapIndex=t,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=A(e.target).closest("."+t.slideClass)[0],s=!1;if(i)for(var n=0;n<this.slides.length;n+=1)this.slides[n]===i&&(s=!0);if(!i||!s)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(A(i).attr("data-swiper-slide-index"),10):this.clickedIndex=A(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},T={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,s=this.translate,n=this.$wrapperEl;if(t.virtualTranslate)return i?-s:s;if(t.cssMode)return s;var r=re.getTranslate(n[0],e);return i&&(r=-r),r||0},setTranslate:function(e,t){var i=this.rtlTranslate,s=this.params,n=this.$wrapperEl,r=this.wrapperEl,a=this.progress,o=0,l=0;this.isHorizontal()?o=i?-e:e:l=e,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),s.cssMode?r[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-o:-l:s.virtualTranslate||n.transform("translate3d("+o+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?o:l;var d=this.maxTranslate()-this.minTranslate();(0==d?0:(e-this.minTranslate())/d)!==a&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,s,n){var r;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===s&&(s=!0);var a=this,o=a.params,l=a.wrapperEl;if(a.animating&&o.preventInteractionOnTransition)return!1;var d,c=a.minTranslate(),u=a.maxTranslate();if(d=s&&c<e?c:s&&e<u?u:e,a.updateProgress(d),o.cssMode){var h=a.isHorizontal();return 0!==t&&l.scrollTo?l.scrollTo(((r={})[h?"left":"top"]=-d,r.behavior="smooth",r)):l[h?"scrollLeft":"scrollTop"]=-d,!0}return 0===t?(a.setTransition(0),a.setTranslate(d),i&&(a.emit("beforeTransitionStart",t,n),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(d),i&&(a.emit("beforeTransitionStart",t,n),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,i&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}},S={slideTo:function(e,t,i,s){var n;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var r=this,a=e;a<0&&(a=0);var o=r.params,l=r.snapGrid,d=r.slidesGrid,c=r.previousIndex,u=r.activeIndex,h=r.rtlTranslate,p=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var f=Math.min(r.params.slidesPerGroupSkip,a),v=f+Math.floor((a-f)/r.params.slidesPerGroup);v>=l.length&&(v=l.length-1),(u||o.initialSlide||0)===(c||0)&&i&&r.emit("beforeSlideChangeStart");var m,g=-l[v];if(r.updateProgress(g),o.normalizeSlideIndex)for(var y=0;y<d.length;y+=1)-Math.floor(100*g)>=Math.floor(100*d[y])&&(a=y);if(r.initialized&&a!==u){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(u||0)!==a)return!1}if(m=u<a?"next":a<u?"prev":"reset",h&&-g===r.translate||!h&&g===r.translate)return r.updateActiveIndex(a),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(g),"reset"!=m&&(r.transitionStart(i,m),r.transitionEnd(i,m)),!1;if(o.cssMode){var b=r.isHorizontal(),w=-g;return h&&(w=p.scrollWidth-p.offsetWidth-w),0!==t&&p.scrollTo?p.scrollTo(((n={})[b?"left":"top"]=w,n.behavior="smooth",n)):p[b?"scrollLeft":"scrollTop"]=w,!0}return 0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(a),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(i,m),r.transitionEnd(i,m)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(a),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,s),r.transitionStart(i,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,m))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,s){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var n=e;return this.params.loop&&(n+=this.loopedSlides),this.slideTo(n,t,i,s)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,n=this.animating,r=this.activeIndex<s.slidesPerGroupSkip?1:s.slidesPerGroup;if(s.loop){if(n)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+r,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this.params,n=this.animating,r=this.snapGrid,a=this.slidesGrid,o=this.rtlTranslate;if(s.loop){if(n)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d,c=l(o?this.translate:-this.translate),u=r.map(function(e){return l(e)}),h=(a.map(function(e){return l(e)}),r[u.indexOf(c)],r[u.indexOf(c)-1]);return void 0===h&&s.cssMode&&r.forEach(function(e){!h&&e<=c&&(h=e)}),void 0!==h&&(d=a.indexOf(h))<0&&(d=this.activeIndex-1),this.slideTo(d,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===s&&(s=.5);var n=this.activeIndex,r=Math.min(this.params.slidesPerGroupSkip,n),a=r+Math.floor((n-r)/this.params.slidesPerGroup),o=this.rtlTranslate?this.translate:-this.translate;if(o>=this.snapGrid[a]){var l=this.snapGrid[a];o-l>(this.snapGrid[a+1]-l)*s&&(n+=this.params.slidesPerGroup)}else{var d=this.snapGrid[a-1];o-d<=(this.snapGrid[a]-d)*s&&(n-=this.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,this.slidesGrid.length-1),this.slideTo(n,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,s=t.$wrapperEl,n="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,r=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(A(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?r<t.loopedSlides-n/2||r>t.slides.length-t.loopedSlides+n/2?(t.loopFix(),r=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),re.nextTick(function(){t.slideTo(r)})):t.slideTo(r):r>t.slides.length-n?(t.loopFix(),r=s.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),re.nextTick(function(){t.slideTo(r)})):t.slideTo(r)}else t.slideTo(r)}},C={loopCreate:function(){var s=this,e=s.params,t=s.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var n=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-n.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var r=0;r<i;r+=1){var a=A(v.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(a)}n=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=n.length),s.loopedSlides=Math.ceil(parseFloat(e.loopedSlides||e.slidesPerView,10)),s.loopedSlides+=e.loopAdditionalSlides,s.loopedSlides>n.length&&(s.loopedSlides=n.length);var o=[],l=[];n.each(function(e,t){var i=A(t);e<s.loopedSlides&&l.push(t),e<n.length&&e>=n.length-s.loopedSlides&&o.push(t),i.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(A(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var c=o.length-1;0<=c;--c)t.prepend(A(o[c].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,s=this.loopedSlides,n=this.allowSlidePrev,r=this.allowSlideNext,a=this.snapGrid,o=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-a[t]-this.getTranslate();t<s?(e=i.length-3*s+t,e+=s,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((o?-this.translate:this.translate)-l)):t>=i.length-s&&(e=-i.length+t+s,e+=s,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((o?-this.translate:this.translate)-l)),this.allowSlidePrev=n,this.allowSlideNext=r,this.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},k={setGrabCursor:function(e){if(!(E.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){E.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},$={appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&t.append(e[s]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&E.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&this.loopDestroy();var n=s+1;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&i.prepend(e[r]);n=s+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&E.observer||this.update(),this.slideTo(n,0,!1)},addSlide:function(e,t){var i=this.$wrapperEl,s=this.params,n=this.activeIndex;s.loop&&(n-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+s.slideClass));var r=this.slides.length;if(e<=0)this.prependSlide(t);else if(r<=e)this.appendSlide(t);else{for(var a=e<n?n+1:n,o=[],l=r-1;e<=l;--l){var d=this.slides.eq(l);d.remove(),o.unshift(d)}if("object"==typeof t&&"length"in t){for(var c=0;c<t.length;c+=1)t[c]&&i.append(t[c]);a=e<n?n+t.length:n}else i.append(t);for(var u=0;u<o.length;u+=1)i.append(o[u]);s.loop&&this.loopCreate(),s.observer&&E.observer||this.update(),s.loop?this.slideTo(a+this.loopedSlides,0,!1):this.slideTo(a,0,!1)}},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,s=this.activeIndex;t.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var n,r=s;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)n=e[a],this.slides[n]&&this.slides.eq(n).remove(),n<r&&--r;r=Math.max(r,0)}else n=e,this.slides[n]&&this.slides.eq(n).remove(),n<r&&--r,r=Math.max(r,0);t.loop&&this.loopCreate(),t.observer&&E.observer||this.update(),t.loop?this.slideTo(r+this.loopedSlides,0,!1):this.slideTo(r,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},M=(s=ne.navigator.platform,n=ne.navigator.userAgent,a={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!ne.cordova&&!ne.phonegap),phonegap:!(!ne.cordova&&!ne.phonegap),electron:!1},o=ne.screen.width,d=ne.screen.height,c=n.match(/(Android);?[\s\/]+([\d.]+)?/),u=n.match(/(iPad).*OS\s([\d_]+)/),h=n.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f=0<=n.indexOf("MSIE ")||0<=n.indexOf("Trident/"),m=0<=n.indexOf("Edge/"),g=0<=n.indexOf("Gecko/")&&0<=n.indexOf("Firefox/"),y="Win32"===s,b=0<=n.toLowerCase().indexOf("electron"),w="MacIntel"===s,!u&&w&&E.touch&&(1024===o&&1366===d||834===o&&1194===d||834===o&&1112===d||768===o&&1024===d)&&(u=n.match(/(Version)\/([\d.]+)/),w=!1),a.ie=f,a.edge=m,a.firefox=g,c&&!y&&(a.os="android",a.osVersion=c[2],a.android=!0,a.androidChrome=0<=n.toLowerCase().indexOf("chrome")),(u||p||h)&&(a.os="ios",a.ios=!0),p&&!h&&(a.osVersion=p[2].replace(/_/g,"."),a.iphone=!0),u&&(a.osVersion=u[2].replace(/_/g,"."),a.ipad=!0),h&&(a.osVersion=h[3]?h[3].replace(/_/g,"."):null,a.ipod=!0),a.ios&&a.osVersion&&0<=n.indexOf("Version/")&&"10"===a.osVersion.split(".")[0]&&(a.osVersion=n.toLowerCase().split("version/")[1].split(" ")[0]),a.webView=!(!(p||u||h)||!n.match(/.*AppleWebKit(?!.*Safari)/i)&&!ne.navigator.standalone)||ne.matchMedia&&ne.matchMedia("(display-mode: standalone)").matches,a.webview=a.webView,a.standalone=a.webView,a.desktop=!(a.ios||a.android)||b,a.desktop&&(a.electron=b,a.macos=w,a.windows=y,a.macos&&(a.os="macos"),a.windows&&(a.os="windows")),a.pixelRatio=ne.devicePixelRatio||1,a);function P(){var e=this.params,t=this.el;if(!t||0!==t.offsetWidth){e.breakpoints&&this.setBreakpoint();var i=this.allowSlideNext,s=this.allowSlidePrev,n=this.snapGrid;this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===e.slidesPerView||1<e.slidesPerView)&&this.isEnd&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=s,this.allowSlideNext=i,this.params.watchOverflow&&n!==this.snapGrid&&this.checkOverflow()}}var L=!1;function z(){}var D,O={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},I={update:x,translate:T,transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.params,n=this.previousIndex;if(!s.cssMode){s.autoHeight&&this.updateAutoHeight();var r=t;if(r=r||(n<i?"next":i<n?"prev":"reset"),this.emit("transitionStart"),e&&i!==n){if("reset"===r)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===r?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,s=this.previousIndex,n=this.params;if(this.animating=!1,!n.cssMode){this.setTransition(0);var r=t;if(r=r||(s<i?"next":i<s?"prev":"reset"),this.emit("transitionEnd"),e&&i!==s){if("reset"===r)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===r?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}},slide:S,loop:C,grabCursor:k,manipulation:$,events:{attachEvents:function(){var e=this.params,t=this.touchEvents,i=this.el,s=this.wrapperEl;this.onTouchStart=function(e){var t=this.touchEventsData,i=this.params,s=this.touches;if(!this.animating||!i.preventInteractionOnTransition){var n=e;n.originalEvent&&(n=n.originalEvent);var r=A(n.target);if(("wrapper"!==i.touchEventsTarget||r.closest(this.wrapperEl).length)&&(t.isTouchEvent="touchstart"===n.type,(t.isTouchEvent||!("which"in n)||3!==n.which)&&!(!t.isTouchEvent&&"button"in n&&0<n.button||t.isTouched&&t.isMoved)))if(i.noSwiping&&r.closest(i.noSwipingSelector?i.noSwipingSelector:"."+i.noSwipingClass)[0])this.allowClick=!0;else if(!i.swipeHandler||r.closest(i.swipeHandler)[0]){s.currentX="touchstart"===n.type?n.targetTouches[0].pageX:n.pageX,s.currentY="touchstart"===n.type?n.targetTouches[0].pageY:n.pageY;var a=s.currentX,o=s.currentY,l=i.edgeSwipeDetection||i.iOSEdgeSwipeDetection,d=i.edgeSwipeThreshold||i.iOSEdgeSwipeThreshold;if(!l||!(a<=d||a>=ne.screen.width-d)){if(re.extend(t,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),s.startX=a,s.startY=o,t.touchStartTime=re.now(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,0<i.threshold&&(t.allowThresholdMove=!1),"touchstart"!==n.type){var c=!0;r.is(t.formElements)&&(c=!1),v.activeElement&&A(v.activeElement).is(t.formElements)&&v.activeElement!==r[0]&&v.activeElement.blur();var u=c&&this.allowTouchMove&&i.touchStartPreventDefault;(i.touchStartForcePreventDefault||u)&&n.preventDefault()}this.emit("touchStart",n)}}}}.bind(this),this.onTouchMove=function(e){var t=this.touchEventsData,i=this.params,s=this.touches,n=this.rtlTranslate,r=e;if(r.originalEvent&&(r=r.originalEvent),t.isTouched){if(!t.isTouchEvent||"mousemove"!==r.type){var a="touchmove"===r.type&&r.targetTouches&&(r.targetTouches[0]||r.changedTouches[0]),o="touchmove"===r.type?a.pageX:r.pageX,l="touchmove"===r.type?a.pageY:r.pageY;if(r.preventedByNestedSwiper)return s.startX=o,void(s.startY=l);if(!this.allowTouchMove)return this.allowClick=!1,void(t.isTouched&&(re.extend(s,{startX:o,startY:l,currentX:o,currentY:l}),t.touchStartTime=re.now()));if(t.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(this.isVertical()){if(l<s.startY&&this.translate<=this.maxTranslate()||l>s.startY&&this.translate>=this.minTranslate())return t.isTouched=!1,void(t.isMoved=!1)}else if(o<s.startX&&this.translate<=this.maxTranslate()||o>s.startX&&this.translate>=this.minTranslate())return;if(t.isTouchEvent&&v.activeElement&&r.target===v.activeElement&&A(r.target).is(t.formElements))return t.isMoved=!0,void(this.allowClick=!1);if(t.allowTouchCallbacks&&this.emit("touchMove",r),!(r.targetTouches&&1<r.targetTouches.length)){s.currentX=o,s.currentY=l;var d,c=s.currentX-s.startX,u=s.currentY-s.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(c,2)+Math.pow(u,2))<this.params.threshold))if(void 0===t.isScrolling&&(this.isHorizontal()&&s.currentY===s.startY||this.isVertical()&&s.currentX===s.startX?t.isScrolling=!1:25<=c*c+u*u&&(d=180*Math.atan2(Math.abs(u),Math.abs(c))/Math.PI,t.isScrolling=this.isHorizontal()?d>i.touchAngle:90-d>i.touchAngle)),t.isScrolling&&this.emit("touchMoveOpposite",r),void 0===t.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(t.startMoving=!0)),t.isScrolling)t.isTouched=!1;else if(t.startMoving){this.allowClick=!1,i.cssMode||r.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&r.stopPropagation(),t.isMoved||(i.loop&&this.loopFix(),t.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),t.allowMomentumBounce=!1,!i.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",r)),this.emit("sliderMove",r),t.isMoved=!0;var h=this.isHorizontal()?c:u;s.diff=h,h*=i.touchRatio,n&&(h=-h),this.swipeDirection=0<h?"prev":"next",t.currentTranslate=h+t.startTranslate;var p=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),0<h&&t.currentTranslate>this.minTranslate()?(p=!1,i.resistance&&(t.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+t.startTranslate+h,f))):h<0&&t.currentTranslate<this.maxTranslate()&&(p=!1,i.resistance&&(t.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-t.startTranslate-h,f))),p&&(r.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&t.currentTranslate<t.startTranslate&&(t.currentTranslate=t.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&t.currentTranslate>t.startTranslate&&(t.currentTranslate=t.startTranslate),0<i.threshold){if(!(Math.abs(h)>i.threshold||t.allowThresholdMove))return void(t.currentTranslate=t.startTranslate);if(!t.allowThresholdMove)return t.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,t.currentTranslate=t.startTranslate,void(s.diff=this.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&!i.cssMode&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),i.freeMode&&(0===t.velocities.length&&t.velocities.push({position:s[this.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:s[this.isHorizontal()?"currentX":"currentY"],time:re.now()})),this.updateProgress(t.currentTranslate),this.setTranslate(t.currentTranslate))}}}}else t.startMoving&&t.isScrolling&&this.emit("touchMoveOpposite",r)}.bind(this),this.onTouchEnd=function(e){var t=this,i=t.touchEventsData,s=t.params,n=t.touches,r=t.rtlTranslate,a=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",d),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&s.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);s.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,u=re.now(),h=u-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),h<300&&u-i.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),i.lastClickTime=re.now(),re.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===n.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,c=s.followFinger?r?t.translate:-t.translate:-i.currentTranslate,!s.cssMode)if(s.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(s.freeModeMomentum){if(1<i.velocities.length){var p=i.velocities.pop(),f=i.velocities.pop(),v=p.position-f.position,m=p.time-f.time;t.velocity=v/m,t.velocity/=2,Math.abs(t.velocity)<s.freeModeMinimumVelocity&&(t.velocity=0),(150<m||300<re.now()-p.time)&&(t.velocity=0)}else t.velocity=0;t.velocity*=s.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*s.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;r&&(b=-b);var w,x,T=!1,S=20*Math.abs(t.velocity)*s.freeModeMomentumBounceRatio;if(b<t.maxTranslate())s.freeModeMomentumBounce?(b+t.maxTranslate()<-S&&(b=t.maxTranslate()-S),w=t.maxTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),s.loop&&s.centeredSlides&&(x=!0);else if(b>t.minTranslate())s.freeModeMomentumBounce?(b-t.minTranslate()>S&&(b=t.minTranslate()+S),w=t.minTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),s.loop&&s.centeredSlides&&(x=!0);else if(s.freeModeSticky){for(var C,E=0;E<l.length;E+=1)if(l[E]>-b){C=E;break}b=-(Math.abs(l[C]-b)<Math.abs(l[C-1]-b)||"next"===t.swipeDirection?l[C]:l[C-1])}if(x&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity){if(g=r?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),s.freeModeSticky){var k=Math.abs((r?-b:b)-t.translate),$=t.slidesSizesGrid[t.activeIndex];g=k<$?s.speed:k<2*$?1.5*s.speed:2.5*s.speed}}else if(s.freeModeSticky)return void t.slideToClosest();s.freeModeMomentumBounce&&T?(t.updateProgress(w),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,a.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(s.speed),setTimeout(function(){t.setTranslate(w),a.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,a.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(s.freeModeSticky)return void t.slideToClosest();(!s.freeModeMomentum||h>=s.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var M=0,P=t.slidesSizesGrid[0],A=0;A<o.length;A+=A<s.slidesPerGroupSkip?1:s.slidesPerGroup){var L=A<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;void 0!==o[A+L]?c>=o[A]&&c<o[A+L]&&(P=o[(M=A)+L]-o[A]):c>=o[A]&&(M=A,P=o[o.length-1]-o[o.length-2])}var z=(c-o[M])/P,D=M<s.slidesPerGroupSkip-1?1:s.slidesPerGroup;if(h>s.longSwipesMs){if(!s.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(z>=s.longSwipesRatio?t.slideTo(M+D):t.slideTo(M)),"prev"===t.swipeDirection&&(z>1-s.longSwipesRatio?t.slideTo(M+D):t.slideTo(M))}else{if(!s.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||d.target!==t.navigation.nextEl&&d.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(M+D),"prev"===t.swipeDirection&&t.slideTo(M)):d.target===t.navigation.nextEl?t.slideTo(M+D):t.slideTo(M)}}}.bind(this),e.cssMode&&(this.onScroll=function(){var e=this.wrapperEl,t=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=t?e.scrollWidth-e.offsetWidth-e.scrollLeft:-e.scrollLeft:this.translate=-e.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0==i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(t?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}.bind(this)),this.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(this);var n=!!e.nested;if(!E.touch&&E.pointerEvents)i.addEventListener(t.start,this.onTouchStart,!1),v.addEventListener(t.move,this.onTouchMove,n),v.addEventListener(t.end,this.onTouchEnd,!1);else{if(E.touch){var r=!("touchstart"!==t.start||!E.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1};i.addEventListener(t.start,this.onTouchStart,r),i.addEventListener(t.move,this.onTouchMove,E.passiveListener?{passive:!1,capture:n}:n),i.addEventListener(t.end,this.onTouchEnd,r),t.cancel&&i.addEventListener(t.cancel,this.onTouchEnd,r),L||(v.addEventListener("touchstart",z),L=!0)}(e.simulateTouch&&!M.ios&&!M.android||e.simulateTouch&&!E.touch&&M.ios)&&(i.addEventListener("mousedown",this.onTouchStart,!1),v.addEventListener("mousemove",this.onTouchMove,n),v.addEventListener("mouseup",this.onTouchEnd,!1))}(e.preventClicks||e.preventClicksPropagation)&&i.addEventListener("click",this.onClick,!0),e.cssMode&&s.addEventListener("scroll",this.onScroll),e.updateOnWindowResize?this.on(M.ios||M.android?"resize orientationchange observerUpdate":"resize observerUpdate",P,!0):this.on("observerUpdate",P,!0)},detachEvents:function(){var e=this.params,t=this.touchEvents,i=this.el,s=this.wrapperEl,n=!!e.nested;if(!E.touch&&E.pointerEvents)i.removeEventListener(t.start,this.onTouchStart,!1),v.removeEventListener(t.move,this.onTouchMove,n),v.removeEventListener(t.end,this.onTouchEnd,!1);else{if(E.touch){var r=!("onTouchStart"!==t.start||!E.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1};i.removeEventListener(t.start,this.onTouchStart,r),i.removeEventListener(t.move,this.onTouchMove,n),i.removeEventListener(t.end,this.onTouchEnd,r),t.cancel&&i.removeEventListener(t.cancel,this.onTouchEnd,r)}(e.simulateTouch&&!M.ios&&!M.android||e.simulateTouch&&!E.touch&&M.ios)&&(i.removeEventListener("mousedown",this.onTouchStart,!1),v.removeEventListener("mousemove",this.onTouchMove,n),v.removeEventListener("mouseup",this.onTouchEnd,!1))}(e.preventClicks||e.preventClicksPropagation)&&i.removeEventListener("click",this.onClick,!0),e.cssMode&&s.removeEventListener("scroll",this.onScroll),this.off(M.ios||M.android?"resize orientationchange observerUpdate":"resize observerUpdate",P)}},breakpoints:{setBreakpoint:function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides;void 0===i&&(i=0);var s=this.params,n=this.$el,r=s.breakpoints;if(r&&(!r||0!==Object.keys(r).length)){var a=this.getBreakpoint(r);if(a&&this.currentBreakpoint!==a){var o=a in r?r[a]:void 0;o&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(e){var t=o[e];void 0!==t&&(o[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});var l=o||this.originalParams,d=1<s.slidesPerColumn,c=1<l.slidesPerColumn;d&&!c?n.removeClass(s.containerModifierClass+"multirow "+s.containerModifierClass+"multirow-column"):!d&&c&&(n.addClass(s.containerModifierClass+"multirow"),"column"===l.slidesPerColumnFill&&n.addClass(s.containerModifierClass+"multirow-column"));var u=l.direction&&l.direction!==s.direction,h=s.loop&&(l.slidesPerView!==s.slidesPerView||u);u&&t&&this.changeDirection(),re.extend(this.params,l),re.extend(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=a,h&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-i+this.loopedSlides,0,!1)),this.emit("breakpoint",l)}}},getBreakpoint:function(e){if(e){var t=!1,i=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:ne.innerHeight*t,point:e}});i.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var s=0;s<i.length;s+=1){var n=i[s],r=n.point;n.value<=ne.innerWidth&&(t=r)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this.params,t=this.isLocked,i=0<this.slides.length&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,s=this.$el,n=[];n.push("initialized"),n.push(i.direction),i.freeMode&&n.push("free-mode"),i.autoHeight&&n.push("autoheight"),e&&n.push("rtl"),1<i.slidesPerColumn&&(n.push("multirow"),"column"===i.slidesPerColumnFill&&n.push("multirow-column")),M.android&&n.push("android"),M.ios&&n.push("ios"),i.cssMode&&n.push("css-mode"),n.forEach(function(e){t.push(i.containerModifierClass+e)}),s.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,s,n,r){var a;function o(){r&&r()}(!e.complete||!n)&&t?((a=new ne.Image).onload=o,a.onerror=o,s&&(a.sizes=s),i&&(a.srcset=i),t&&(a.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var s=e.imagesToLoad[i];e.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,t)}}}},H={},N=function(u){function h(){for(var e,n,t=[],i=arguments.length;i--;)t[i]=arguments[i];n=(n=1===t.length&&t[0].constructor&&t[0].constructor===Object?t[0]:(e=t[0],t[1]))||{},n=re.extend({},n),e&&!n.el&&(n.el=e),u.call(this,n),Object.keys(I).forEach(function(t){Object.keys(I[t]).forEach(function(e){h.prototype[e]||(h.prototype[e]=I[t][e])})});var r=this;void 0===r.modules&&(r.modules={}),Object.keys(r.modules).forEach(function(e){var t=r.modules[e];if(t.params){var i=Object.keys(t.params)[0],s=t.params[i];if("object"!=typeof s||null===s)return;if(!(i in n&&"enabled"in s))return;!0===n[i]&&(n[i]={enabled:!0}),"object"!=typeof n[i]||"enabled"in n[i]||(n[i].enabled=!0),n[i]||(n[i]={enabled:!1})}});var s=re.extend({},O);r.useModulesParams(s),r.params=re.extend({},s,H,n),r.originalParams=re.extend({},r.params),r.passedParams=re.extend({},n);var a=(r.$=A)(r.params.el);if(e=a[0]){if(1<a.length){var o=[];return a.each(function(e,t){var i=re.extend({},n,{el:t});o.push(new h(i))}),o}var l,d,c;return e.swiper=r,a.data("swiper",r),e&&e.shadowRoot&&e.shadowRoot.querySelector?(l=A(e.shadowRoot.querySelector("."+r.params.wrapperClass))).children=function(e){return a.children(e)}:l=a.children("."+r.params.wrapperClass),re.extend(r,{$el:a,el:e,$wrapperEl:l,wrapperEl:l[0],classNames:[],slides:A(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===r.params.direction},isVertical:function(){return"vertical"===r.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===a.css("direction"),rtlTranslate:"horizontal"===r.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===a.css("direction")),wrongRTL:"-webkit-box"===l.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:(d=["touchstart","touchmove","touchend","touchcancel"],c=["mousedown","mousemove","mouseup"],E.pointerEvents&&(c=["pointerdown","pointermove","pointerup"]),r.touchEventsTouch={start:d[0],move:d[1],end:d[2],cancel:d[3]},r.touchEventsDesktop={start:c[0],move:c[1],end:c[2]},E.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:re.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.useModules(),r.params.init&&r.init(),r}}u&&(h.__proto__=u),h.prototype=Object.create(u&&u.prototype);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return(h.prototype.constructor=h).prototype.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,s=this.size,n=this.activeIndex,r=1;if(e.centeredSlides){for(var a,o=t[n].swiperSlideSize,l=n+1;l<t.length;l+=1)t[l]&&!a&&(r+=1,(o+=t[l].swiperSlideSize)>s&&(a=!0));for(var d=n-1;0<=d;--d)t[d]&&!a&&(r+=1,(o+=t[d].swiperSlideSize)>s&&(a=!0))}else for(var c=n+1;c<t.length;c+=1)i[c]-i[n]<s&&(r+=1);return r},h.prototype.update=function(){var i=this;if(i&&!i.destroyed){var e=i.snapGrid,t=i.params;t.breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(s(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||s(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update")}function s(){var e=i.rtlTranslate?-1*i.translate:i.translate,t=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(t),i.updateActiveIndex(),i.updateSlidesClasses()}},h.prototype.changeDirection=function(i,e){void 0===e&&(e=!0);var t=this.params.direction;return(i=i||("horizontal"===t?"vertical":"horizontal"))===t||"horizontal"!==i&&"vertical"!==i||(this.$el.removeClass(""+this.params.containerModifierClass+t).addClass(""+this.params.containerModifierClass+i),this.params.direction=i,this.slides.each(function(e,t){"vertical"===i?t.style.width="":t.style.height=""}),this.emit("changeDirection"),e&&this.update()),this},h.prototype.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},h.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,s=i.params,n=i.$el,r=i.$wrapperEl,a=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),t&&(i.removeClasses(),n.removeAttr("style"),r.removeAttr("style"),a&&a.length&&a.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),re.deleteProps(i)),i.destroyed=!0),null},h.extendDefaults=function(e){re.extend(H,e)},e.extendedDefaults.get=function(){return H},e.defaults.get=function(){return O},e.Class.get=function(){return u},e.$.get=function(){return A},Object.defineProperties(h,e),h}(e),j={name:"device",proto:{device:M},static:{device:M}},q={name:"support",proto:{support:E},static:{support:E}},B={isEdge:!!ne.navigator.userAgent.match(/Edge/g),isSafari:0<=(D=ne.navigator.userAgent.toLowerCase()).indexOf("safari")&&D.indexOf("chrome")<0&&D.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(ne.navigator.userAgent)},W={name:"browser",proto:{browser:B},static:{browser:B}},R={name:"resize",create:function(){var e=this;re.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){ne.addEventListener("resize",this.resize.resizeHandler),ne.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){ne.removeEventListener("resize",this.resize.resizeHandler),ne.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},F={func:ne.MutationObserver||ne.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,s=new F.func(function(e){if(1!==e.length){var t=function(){i.emit("observerUpdate",e[0])};ne.requestAnimationFrame?ne.requestAnimationFrame(t):ne.setTimeout(t,0)}else i.emit("observerUpdate",e[0])});s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(s)},init:function(){if(E.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},G={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){re.extend(this,{observer:{init:F.init.bind(this),attach:F.attach.bind(this),destroy:F.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},X={update:function(e){var t=this,i=t.params,s=i.slidesPerView,n=i.slidesPerGroup,r=i.centeredSlides,a=t.params.virtual,o=a.addSlidesBefore,l=a.addSlidesAfter,d=t.virtual,c=d.from,u=d.to,h=d.slides,p=d.slidesGrid,f=d.renderSlide,v=d.offset;t.updateActiveIndex();var m,g,y,b=t.activeIndex||0;m=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",y=r?(g=Math.floor(s/2)+n+o,Math.floor(s/2)+n+l):(g=s+(n-1)+o,n+l);var w=Math.max((b||0)-y,0),x=Math.min((b||0)+g,h.length-1),T=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function S(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(re.extend(t.virtual,{from:w,to:x,offset:T,slidesGrid:t.slidesGrid}),c===w&&u===x&&!e)return t.slidesGrid!==p&&T!==v&&t.slides.css(m,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:w,to:x,slides:function(){for(var e=[],t=w;t<=x;t+=1)e.push(h[t]);return e}()}),void S();var C=[],E=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var k=c;k<=u;k+=1)(k<w||x<k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+k+'"]').remove();for(var $=0;$<h.length;$+=1)w<=$&&$<=x&&(void 0===u||e?E.push($):(u<$&&E.push($),$<c&&C.push($)));E.forEach(function(e){t.$wrapperEl.append(f(h[e],e))}),C.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(h[e],e))}),t.$wrapperEl.children(".swiper-slide").css(m,T+"px"),S()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var s=i.renderSlide?A(i.renderSlide.call(this,e,t)):A('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=s),s},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t=this.activeIndex,i=t+1,s=1;if(Array.isArray(e)){for(var n=0;n<e.length;n+=1)e[n]&&this.virtual.slides.unshift(e[n]);i=t+e.length,s=e.length}else this.virtual.slides.unshift(e);if(this.params.virtual.cache){var r=this.virtual.cache,a={};Object.keys(r).forEach(function(e){var t=r[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),a[parseInt(e,10)+s]=t}),this.virtual.cache=a}this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)this.virtual.slides.splice(e[i],1),this.params.virtual.cache&&delete this.virtual.cache[e[i]],e[i]<t&&--t,t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&--t,t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},Y={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){re.extend(this,{virtual:{update:X.update.bind(this),appendSlide:X.appendSlide.bind(this),prependSlide:X.prependSlide.bind(this),removeSlide:X.removeSlide.bind(this),removeAllSlides:X.removeAllSlides.bind(this),renderSlide:X.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){if(this.params.virtual.enabled){this.classNames.push(this.params.containerModifierClass+"virtual");var e={watchSlidesProgress:!0};re.extend(this.params,e),re.extend(this.originalParams,e),this.params.initialSlide||this.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},V={handle:function(e){var t=this.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var s=i.keyCode||i.charCode;if(!this.allowSlideNext&&(this.isHorizontal()&&39===s||this.isVertical()&&40===s||34===s))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&37===s||this.isVertical()&&38===s||33===s))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||v.activeElement&&v.activeElement.nodeName&&("input"===v.activeElement.nodeName.toLowerCase()||"textarea"===v.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(33===s||34===s||37===s||39===s||38===s||40===s)){var n=!1;if(0<this.$el.parents("."+this.params.slideClass).length&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var r=ne.innerWidth,a=ne.innerHeight,o=this.$el.offset();t&&(o.left-=this.$el[0].scrollLeft);for(var l=[[o.left,o.top],[o.left+this.width,o.top],[o.left,o.top+this.height],[o.left+this.width,o.top+this.height]],d=0;d<l.length;d+=1){var c=l[d];0<=c[0]&&c[0]<=r&&0<=c[1]&&c[1]<=a&&(n=!0)}if(!n)return}this.isHorizontal()?(33!==s&&34!==s&&37!==s&&39!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==s&&39!==s||t)&&(33!==s&&37!==s||!t)||this.slideNext(),(33!==s&&37!==s||t)&&(34!==s&&39!==s||!t)||this.slidePrev()):(33!==s&&34!==s&&38!==s&&40!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==s&&40!==s||this.slideNext(),33!==s&&38!==s||this.slidePrev()),this.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(A(v).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(A(v).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},U={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){re.extend(this,{keyboard:{enabled:!1,enable:V.enable.bind(this),disable:V.disable.bind(this),handle:V.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}},_={lastScrollTime:re.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return-1<ne.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":function(){var e="onwheel"in v;if(!e){var t=v.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&v.implementation&&v.implementation.hasFeature&&!0!==v.implementation.hasFeature("","")&&(e=v.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel"},normalize:function(e){var t=0,i=0,s=0,n=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),s=10*t,n=10*i,"deltaY"in e&&(n=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=n,n=0),(s||n)&&e.deltaMode&&(1===e.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!t&&(t=s<1?-1:1),n&&!i&&(i=n<1?-1:1),{spinX:t,spinY:i,pixelX:s,pixelY:n}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,s=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var n=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(n=A(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!n[0].contains(t.target)&&!s.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,a=i.rtlTranslate?-1:1,o=_.normalize(t);if(s.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=o.pixelX*a}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*a:-o.pixelY;if(0===r)return!0;if(s.invert&&(r=-r),i.params.freeMode){var l={time:re.now(),delta:Math.abs(r),direction:Math.sign(r)},d=i.mousewheel.lastEventBeforeSnap,c=d&&l.time<d.time+500&&l.delta<=d.delta&&l.direction===d.direction;if(!c){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var u=i.getTranslate()+r*s.sensitivity,h=i.isBeginning,p=i.isEnd;if(u>=i.minTranslate()&&(u=i.minTranslate()),u<=i.maxTranslate()&&(u=i.maxTranslate()),i.setTransition(0),i.setTranslate(u),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!h&&i.isBeginning||!p&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;var f=i.mousewheel.recentWheelEvents;15<=f.length&&f.shift();var v=f.length?f[f.length-1]:void 0,m=f[0];if(f.push(l),v&&(l.delta>v.delta||l.direction!==v.direction))f.splice(0);else if(15<=f.length&&l.time-m.time<500&&1<=m.delta-l.delta&&l.delta<=6){var g=0<r?.8:.2;i.mousewheel.lastEventBeforeSnap=l,f.splice(0),i.mousewheel.timeout=re.nextTick(function(){i.slideToClosest(i.params.speed,!0,void 0,g)},0)}i.mousewheel.timeout||(i.mousewheel.timeout=re.nextTick(function(){i.mousewheel.lastEventBeforeSnap=l,f.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))}if(c||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),u===i.minTranslate()||u===i.maxTranslate())return!0}}else{var y={time:re.now(),delta:Math.abs(r),direction:Math.sign(r),raw:e},b=i.mousewheel.recentWheelEvents;2<=b.length&&b.shift();var w=b.length?b[b.length-1]:void 0;if(b.push(y),(!w||y.direction!==w.direction||y.delta>w.delta)&&i.mousewheel.animateSlider(y),i.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){return 6<=e.delta&&re.now()-this.mousewheel.lastScrollTime<60||(e.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",e.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",e.raw)),this.mousewheel.lastScrollTime=(new ne.Date).getTime(),!1)},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=_.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=A(this.params.mousewheel.eventsTarged)),t.on("mouseenter",this.mousewheel.handleMouseEnter),t.on("mouseleave",this.mousewheel.handleMouseLeave),t.on(e,this.mousewheel.handle),this.mousewheel.enabled=!0},disable:function(){var e=_.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=A(this.params.mousewheel.eventsTarged)),t.off(e,this.mousewheel.handle),!(this.mousewheel.enabled=!1)}},K={update:function(){var e=this.params.navigation;if(!this.params.loop){var t=this.navigation,i=t.$nextEl,s=t.$prevEl;s&&0<s.length&&(this.isBeginning?s.addClass(e.disabledClass):s.removeClass(e.disabledClass),s[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass)),i&&0<i.length&&(this.isEnd?i.addClass(e.disabledClass):i.removeClass(e.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](e.lockClass))}},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=A(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===this.$el.find(i.nextEl).length&&(e=this.$el.find(i.nextEl))),i.prevEl&&(t=A(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===this.$el.find(i.prevEl).length&&(t=this.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",this.navigation.onNextClick),t&&0<t.length&&t.on("click",this.navigation.onPrevClick),re.extend(this.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},Q={update:function(){var e=this.rtl,n=this.params.pagination;if(n.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var r,t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,s=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((r=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>t-1-2*this.loopedSlides&&(r-=t-2*this.loopedSlides),s-1<r&&(r-=s),r<0&&"bullets"!==this.params.paginationType&&(r=s+r)):r=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===n.type&&this.pagination.bullets&&0<this.pagination.bullets.length){var a,o,l,d=this.pagination.bullets;if(n.dynamicBullets&&(this.pagination.bulletSize=d.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),i.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(n.dynamicMainBullets+4)+"px"),1<n.dynamicMainBullets&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=r-this.previousIndex,this.pagination.dynamicBulletIndex>n.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=n.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),a=r-this.pagination.dynamicBulletIndex,l=((o=a+(Math.min(d.length,n.dynamicMainBullets)-1))+a)/2),d.removeClass(n.bulletActiveClass+" "+n.bulletActiveClass+"-next "+n.bulletActiveClass+"-next-next "+n.bulletActiveClass+"-prev "+n.bulletActiveClass+"-prev-prev "+n.bulletActiveClass+"-main"),1<i.length)d.each(function(e,t){var i=A(t),s=i.index();s===r&&i.addClass(n.bulletActiveClass),n.dynamicBullets&&(a<=s&&s<=o&&i.addClass(n.bulletActiveClass+"-main"),s===a&&i.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),s===o&&i.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next"))});else{var c=d.eq(r),u=c.index();if(c.addClass(n.bulletActiveClass),n.dynamicBullets){for(var h=d.eq(a),p=d.eq(o),f=a;f<=o;f+=1)d.eq(f).addClass(n.bulletActiveClass+"-main");if(this.params.loop)if(u>=d.length-n.dynamicMainBullets){for(var v=n.dynamicMainBullets;0<=v;--v)d.eq(d.length-v).addClass(n.bulletActiveClass+"-main");d.eq(d.length-n.dynamicMainBullets-1).addClass(n.bulletActiveClass+"-prev")}else h.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),p.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next");else h.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),p.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next")}}if(n.dynamicBullets){var m=Math.min(d.length,n.dynamicMainBullets+4),g=(this.pagination.bulletSize*m-this.pagination.bulletSize)/2-l*this.pagination.bulletSize,y=e?"right":"left";d.css(this.isHorizontal()?y:"top",g+"px")}}if("fraction"===n.type&&(i.find("."+n.currentClass).text(n.formatFractionCurrent(r+1)),i.find("."+n.totalClass).text(n.formatFractionTotal(s))),"progressbar"===n.type){var b;b=n.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical";var w=(r+1)/s,x=1,T=1;"horizontal"==b?x=w:T=w,i.find("."+n.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+x+") scaleY("+T+")").transition(this.params.speed)}"custom"===n.type&&n.renderCustom?(i.html(n.renderCustom(this,r+1,s)),this.emit("paginationRender",this,i[0])):this.emit("paginationUpdate",this,i[0]),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,s="";if("bullets"===e.type){for(var n=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,r=0;r<n;r+=1)e.renderBullet?s+=e.renderBullet.call(this,r,e.bulletClass):s+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(s),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(s=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(s)),"progressbar"===e.type&&(s=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(s)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var i=this,e=i.params.pagination;if(e.el){var t=A(e.el);0!==t.length&&(i.params.uniqueNavElements&&"string"==typeof e.el&&1<t.length&&1===i.$el.find(e.el).length&&(t=i.$el.find(e.el)),"bullets"===e.type&&e.clickable&&t.addClass(e.clickableClass),t.addClass(e.modifierClass+e.type),"bullets"===e.type&&e.dynamicBullets&&(t.addClass(""+e.modifierClass+e.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&t.addClass(e.progressbarOppositeClass),e.clickable&&t.on("click","."+e.bulletClass,function(e){e.preventDefault();var t=A(this).index()*i.params.slidesPerGroup;i.params.loop&&(t+=i.loopedSlides),i.slideTo(t)}),re.extend(i.pagination,{$el:t,el:t[0]}))}},destroy:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click","."+e.bulletClass)}}},J={setTranslate:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=this.rtlTranslate,i=this.progress,s=e.dragSize,n=e.trackSize,r=e.$dragEl,a=e.$el,o=this.params.scrollbar,l=s,d=(n-s)*i;t?0<(d=-d)?(l=s-d,d=0):n<-d+s&&(l=n+d):d<0?(l=s+d,d=0):n<d+s&&(l=n-d),this.isHorizontal()?(r.transform("translate3d("+d+"px, 0, 0)"),r[0].style.width=l+"px"):(r.transform("translate3d(0px, "+d+"px, 0)"),r[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),a[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){a[0].style.opacity=0,a.transition(400)},1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){if(this.params.scrollbar.el&&this.scrollbar.el){var e=this.scrollbar,t=e.$dragEl,i=e.$el;t[0].style.width="",t[0].style.height="";var s,n=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,r=this.size/this.virtualSize,a=r*(n/this.size);s="auto"===this.params.scrollbar.dragSize?n*r:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=s+"px":t[0].style.height=s+"px",i[0].style.display=1<=r?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),re.extend(e,{trackSize:n,divider:r,moveDivider:a,dragSize:s}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,i=this.scrollbar,s=this.rtlTranslate,n=i.$el,r=i.dragSize,a=i.trackSize,o=i.dragStartPos;t=(i.getPointerPosition(e)-n.offset()[this.isHorizontal()?"left":"top"]-(null!==o?o:r/2))/(a-r),t=Math.max(Math.min(t,1),0),s&&(t=1-t);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*t;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,n=i.$el,r=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=e.target===r[0]||e.target===r?i.getPointerPosition(e)-e.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),n.transition(0),t.hide&&n.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,s=t.$el,n=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),s.transition(0),n.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar,s=this.$wrapperEl,n=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),s.transition("")),t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=re.nextTick(function(){n.css("opacity",0),n.transition(400)},1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,s=this.params,n=e.$el[0],r=!(!E.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},a=!(!E.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};E.touch?(n.addEventListener(t.start,this.scrollbar.onDragStart,r),n.addEventListener(t.move,this.scrollbar.onDragMove,r),n.addEventListener(t.end,this.scrollbar.onDragEnd,a)):(n.addEventListener(i.start,this.scrollbar.onDragStart,r),v.addEventListener(i.move,this.scrollbar.onDragMove,r),v.addEventListener(i.end,this.scrollbar.onDragEnd,a))}},disableDraggable:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,s=this.params,n=e.$el[0],r=!(!E.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},a=!(!E.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};E.touch?(n.removeEventListener(t.start,this.scrollbar.onDragStart,r),n.removeEventListener(t.move,this.scrollbar.onDragMove,r),n.removeEventListener(t.end,this.scrollbar.onDragEnd,a)):(n.removeEventListener(i.start,this.scrollbar.onDragStart,r),v.removeEventListener(i.move,this.scrollbar.onDragMove,r),v.removeEventListener(i.end,this.scrollbar.onDragEnd,a))}},init:function(){if(this.params.scrollbar.el){var e=this.scrollbar,t=this.$el,i=this.params.scrollbar,s=A(i.el);this.params.uniqueNavElements&&"string"==typeof i.el&&1<s.length&&1===t.find(i.el).length&&(s=t.find(i.el));var n=s.find("."+this.params.scrollbar.dragClass);0===n.length&&(n=A('<div class="'+this.params.scrollbar.dragClass+'"></div>'),s.append(n)),re.extend(e,{$el:s,el:s[0],$dragEl:n,dragEl:n[0]}),i.draggable&&e.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},Z={setTransform:function(e,t){var i=this.rtl,s=A(e),n=i?-1:1,r=s.attr("data-swiper-parallax")||"0",a=s.attr("data-swiper-parallax-x"),o=s.attr("data-swiper-parallax-y"),l=s.attr("data-swiper-parallax-scale"),d=s.attr("data-swiper-parallax-opacity");if(a||o?(a=a||"0",o=o||"0"):this.isHorizontal()?(a=r,o="0"):(o=r,a="0"),a=0<=a.indexOf("%")?parseInt(a,10)*t*n+"%":a*t*n+"px",o=0<=o.indexOf("%")?parseInt(o,10)*t+"%":o*t+"px",null!=d){var c=d-(d-1)*(1-Math.abs(t));s[0].style.opacity=c}if(null==l)s.transform("translate3d("+a+", "+o+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));s.transform("translate3d("+a+", "+o+", 0px) scale("+u+")")}},setTranslate:function(){var s=this,e=s.$el,t=s.slides,n=s.progress,r=s.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){s.parallax.setTransform(t,n)}),t.each(function(e,t){var i=t.progress;1<s.params.slidesPerGroup&&"auto"!==s.params.slidesPerView&&(i+=Math.ceil(e/2)-n*(r.length-1)),i=Math.min(Math.max(i,-1),1),A(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){s.parallax.setTransform(t,i)})})},setTransition:function(n){void 0===n&&(n=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var i=A(t),s=parseInt(i.attr("data-swiper-parallax-duration"),10)||n;0===n&&(s=0),i.transition(s)})}},ee={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,n=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(s-t,2)+Math.pow(n-i,2))},onGestureStart:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!E.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,s.scaleStart=ee.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=A(e.target).closest("."+this.params.slideClass),0===s.$slideEl.length&&(s.$slideEl=this.slides.eq(this.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),s.$imageWrapEl=s.$imageEl.parent("."+t.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||t.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl&&s.$imageEl.transition(0),this.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(!E.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,s.scaleMove=ee.getDistanceBetweenTouches(e)}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=E.gestures?e.scale*i.currentScale:s.scaleMove/s.scaleStart*i.currentScale,i.scale>s.maxRatio&&(i.scale=s.maxRatio-1+Math.pow(i.scale-s.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),s.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,s=i.gesture;if(!E.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!M.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,s.maxRatio),t.minRatio),s.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(s.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,s=t.image;i.$imageEl&&0!==i.$imageEl.length&&(s.isTouched||(M.android&&e.preventDefault(),s.isTouched=!0,s.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,s=t.image,n=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=re.getTranslate(i.$imageWrapEl[0],"x")||0,s.startY=re.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var r=s.width*t.scale,a=s.height*t.scale;if(!(r<i.slideWidth&&a<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-r/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-a/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),n.prevPositionX||(n.prevPositionX=s.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=s.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(s.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(s.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(s.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(s.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=s.touchesCurrent.x,n.prevPositionY=s.touchesCurrent.y,n.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,s=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var n=300,r=300,a=s.x*n,o=i.currentX+a,l=s.y*r,d=i.currentY+l;0!==s.x&&(n=Math.abs((o-i.currentX)/s.x)),0!==s.y&&(r=Math.abs((d-i.currentY)/s.y));var c=Math.max(n,r);i.currentX=o,i.currentY=d;var u=i.width*e.scale,h=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-u/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(c).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,s,n,r,a,o,l,d,c,u,h,p,f,v,m,g=this.zoom,y=this.params.zoom,b=g.gesture,w=g.image;b.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?b.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):b.$slideEl=this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),b.$imageWrapEl=b.$imageEl.parent("."+y.containerClass)),b.$imageEl&&0!==b.$imageEl.length&&(b.$slideEl.addClass(""+y.zoomedSlideClass),i=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),g.scale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,g.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(v=b.$slideEl[0].offsetWidth,m=b.$slideEl[0].offsetHeight,s=b.$slideEl.offset().left+v/2-t,n=b.$slideEl.offset().top+m/2-i,o=b.$imageEl[0].offsetWidth,l=b.$imageEl[0].offsetHeight,d=o*g.scale,c=l*g.scale,p=-(u=Math.min(v/2-d/2,0)),f=-(h=Math.min(m/2-c/2,0)),(r=s*g.scale)<u&&(r=u),p<r&&(r=p),(a=n*g.scale)<h&&(a=h),f<a&&(a=f)):a=r=0,b.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+a+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+g.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e=this.zoom;if(!e.enabled){e.enabled=!0;var t=!("touchstart"!==this.touchEvents.start||!E.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},i=!E.passiveListener||{passive:!1,capture:!0},s="."+this.params.slideClass;E.gestures?(this.$wrapperEl.on("gesturestart",s,e.onGestureStart,t),this.$wrapperEl.on("gesturechange",s,e.onGestureChange,t),this.$wrapperEl.on("gestureend",s,e.onGestureEnd,t)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,s,e.onGestureStart,t),this.$wrapperEl.on(this.touchEvents.move,s,e.onGestureChange,i),this.$wrapperEl.on(this.touchEvents.end,s,e.onGestureEnd,t),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,s,e.onGestureEnd,t)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove,i)}},disable:function(){var e=this.zoom;if(e.enabled){this.zoom.enabled=!1;var t=!("touchstart"!==this.touchEvents.start||!E.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},i=!E.passiveListener||{passive:!1,capture:!0},s="."+this.params.slideClass;E.gestures?(this.$wrapperEl.off("gesturestart",s,e.onGestureStart,t),this.$wrapperEl.off("gesturechange",s,e.onGestureChange,t),this.$wrapperEl.off("gestureend",s,e.onGestureEnd,t)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,s,e.onGestureStart,t),this.$wrapperEl.off(this.touchEvents.move,s,e.onGestureChange,i),this.$wrapperEl.off(this.touchEvents.end,s,e.onGestureEnd,t),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,s,e.onGestureEnd,t)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,e.onTouchMove,i)}}},te={loadInSlide:function(e,l){void 0===l&&(l=!0);var d=this,c=d.params.lazy;if(void 0!==e&&0!==d.slides.length){var u=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e),t=u.find("."+c.elementClass+":not(."+c.loadedClass+"):not(."+c.loadingClass+")");!u.hasClass(c.elementClass)||u.hasClass(c.loadedClass)||u.hasClass(c.loadingClass)||(t=t.add(u[0])),0!==t.length&&t.each(function(e,t){var s=A(t);s.addClass(c.loadingClass);var n=s.attr("data-background"),r=s.attr("data-src"),a=s.attr("data-srcset"),o=s.attr("data-sizes");d.loadImage(s[0],r||n,a,o,!1,function(){if(null!=d&&d&&(!d||d.params)&&!d.destroyed){if(n?(s.css("background-image",'url("'+n+'")'),s.removeAttr("data-background")):(a&&(s.attr("srcset",a),s.removeAttr("data-srcset")),o&&(s.attr("sizes",o),s.removeAttr("data-sizes")),r&&(s.attr("src",r),s.removeAttr("data-src"))),s.addClass(c.loadedClass).removeClass(c.loadingClass),u.find("."+c.preloaderClass).remove(),d.params.loop&&l){var e=u.attr("data-swiper-slide-index");if(u.hasClass(d.params.slideDuplicateClass)){var t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")");d.lazy.loadInSlide(t.index(),!1)}else{var i=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');d.lazy.loadInSlide(i.index(),!1)}}d.emit("lazyImageReady",u[0],s[0]),d.params.autoHeight&&d.updateAutoHeight()}}),d.emit("lazyImageLoad",u[0],s[0])})}},load:function(){var s=this,t=s.$wrapperEl,i=s.params,n=s.slides,e=s.activeIndex,r=s.virtual&&i.virtual.enabled,a=i.lazy,o=i.slidesPerView;function l(e){if(r){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(n[e])return 1}function d(e){return r?A(e).attr("data-swiper-slide-index"):A(e).index()}if("auto"===o&&(o=0),s.lazy.initialImageLoaded||(s.lazy.initialImageLoaded=!0),s.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){var i=r?A(t).attr("data-swiper-slide-index"):A(t).index();s.lazy.loadInSlide(i)});else if(1<o)for(var c=e;c<e+o;c+=1)l(c)&&s.lazy.loadInSlide(c);else s.lazy.loadInSlide(e);if(a.loadPrevNext)if(1<o||a.loadPrevNextAmount&&1<a.loadPrevNextAmount){for(var u=a.loadPrevNextAmount,h=o,p=Math.min(e+h+Math.max(u,h),n.length),f=Math.max(e-Math.max(h,u),0),v=e+o;v<p;v+=1)l(v)&&s.lazy.loadInSlide(v);for(var m=f;m<e;m+=1)l(m)&&s.lazy.loadInSlide(m)}else{var g=t.children("."+i.slideNextClass);0<g.length&&s.lazy.loadInSlide(d(g));var y=t.children("."+i.slidePrevClass);0<y.length&&s.lazy.loadInSlide(d(y))}}},ie={LinearSpline:function(e,t){var i,s,n,r,a;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(a=function(e,t){for(s=-1,i=e.length;1<i-s;)e[n=i+s>>1]<=t?s=n:i=n;return i}(this.x,e),r=a-1,(e-this.x[r])*(this.y[a]-this.y[r])/(this.x[a]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new ie.LinearSpline(this.slidesGrid,e.slidesGrid):new ie.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,s,n=this,r=n.controller.control;function a(e){var t=n.rtlTranslate?-n.translate:n.translate;"slide"===n.params.controller.by&&(n.controller.getInterpolateFunction(e),s=-n.controller.spline.interpolate(-t)),s&&"container"!==n.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(n.maxTranslate()-n.minTranslate()),s=(t-n.minTranslate())*i+e.minTranslate()),n.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,n),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var o=0;o<r.length;o+=1)r[o]!==t&&r[o]instanceof N&&a(r[o]);else r instanceof N&&t!==r&&a(r)},setTransition:function(t,e){var i,s=this,n=s.controller.control;function r(e){e.setTransition(t,s),0!==t&&(e.transitionStart(),e.params.autoHeight&&re.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){n&&(e.params.loop&&"slide"===s.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(n))for(i=0;i<n.length;i+=1)n[i]!==e&&n[i]instanceof N&&r(n[i]);else n instanceof N&&e!==n&&r(n)}},se={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this.params.a11y;if(13===e.keyCode){var i=A(e.target);this.navigation&&this.navigation.$nextEl&&i.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(t.lastSlideMessage):this.a11y.notify(t.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&i.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(t.firstSlideMessage):this.a11y.notify(t.prevSlideMessage)),this.pagination&&i.is("."+this.params.pagination.bulletClass)&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){if(!this.params.loop&&this.navigation){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;i&&0<i.length&&(this.isBeginning?this.a11y.disableEl(i):this.a11y.enableEl(i)),t&&0<t.length&&(this.isEnd?this.a11y.disableEl(t):this.a11y.enableEl(t))}},updatePagination:function(){var s=this,n=s.params.a11y;s.pagination&&s.params.pagination.clickable&&s.pagination.bullets&&s.pagination.bullets.length&&s.pagination.bullets.each(function(e,t){var i=A(t);s.a11y.makeElFocusable(i),s.a11y.addElRole(i,"button"),s.a11y.addElLabel(i,n.paginationBulletMessage.replace(/\{\{index\}\}/,i.index()+1))})},init:function(){this.$el.append(this.a11y.liveRegion);var e,t,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.nextSlideMessage),e.on("keydown",this.a11y.onEnterKey)),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.prevSlideMessage),t.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&0<this.a11y.liveRegion.length&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},ae={init:function(){if(this.params.history){if(!ne.history||!ne.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=ae.getPathValues(),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||ne.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||ne.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=ae.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=ne.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(this.history.initialized&&this.params.history.enabled){var i=this.slides.eq(t),s=ae.slugify(i.attr("data-history"));ne.location.pathname.includes(e)||(s=e+"/"+s);var n=ne.history.state;n&&n.value===s||(this.params.history.replaceState?ne.history.replaceState({value:s},null,s):ne.history.pushState({value:s},null,s))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var s=0,n=this.slides.length;s<n;s+=1){var r=this.slides.eq(s);if(ae.slugify(r.attr("data-history"))===t&&!r.hasClass(this.params.slideDuplicateClass)){var a=r.index();this.slideTo(a,e,i)}}else this.slideTo(0,e,i)}},oe={onHashCange:function(){var e=v.location.hash.replace("#","");if(e!==this.slides.eq(this.activeIndex).attr("data-hash")){var t=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index();if(void 0===t)return;this.slideTo(t)}},setHash:function(){if(this.hashNavigation.initialized&&this.params.hashNavigation.enabled)if(this.params.hashNavigation.replaceState&&ne.history&&ne.history.replaceState)ne.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||"");else{var e=this.slides.eq(this.activeIndex),t=e.attr("data-hash")||e.attr("data-history");v.location.hash=t||""}},init:function(){if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var e=v.location.hash.replace("#","");if(e)for(var t=0,i=this.slides.length;t<i;t+=1){var s=this.slides.eq(t);if((s.attr("data-hash")||s.attr("data-history"))===e&&!s.hasClass(this.params.slideDuplicateClass)){var n=s.index();this.slideTo(n,0,this.params.runCallbacksOnInit,!0)}}this.params.hashNavigation.watchState&&A(ne).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&A(ne).off("hashchange",this.hashNavigation.onHashCange)}},le={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=re.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start:function(){return void 0===this.autoplay.timeout&&!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0)},stop:function(){return!!this.autoplay.running&&void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0)},pause:function(e){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==e&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))}},de={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),s=-i[0].swiperSlideOffset;this.params.virtualTranslate||(s-=this.translate);var n=0;this.isHorizontal()||(n=s,s=0);var r=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:r}).transform("translate3d("+s+"px, "+n+"px, 0px)")}},setTransition:function(e){var i=this,t=i.slides,s=i.$wrapperEl;if(t.transition(e),i.params.virtualTranslate&&0!==e){var n=!1;t.transitionEnd(function(){if(!n&&i&&!i.destroyed){n=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}})}}},ce={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,s=this.slides,n=this.width,r=this.height,a=this.rtlTranslate,o=this.size,l=this.params.cubeEffect,d=this.isHorizontal(),c=this.virtual&&this.params.virtual.enabled,u=0;l.shadow&&(d?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=A('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:n+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=A('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var h=0;h<s.length;h+=1){var p=s.eq(h),f=h;c&&(f=parseInt(p.attr("data-swiper-slide-index"),10));var v=90*f,m=Math.floor(v/360);a&&(v=-v,m=Math.floor(-v/360));var g=Math.max(Math.min(p[0].progress,1),-1),y=0,b=0,w=0;f%4==0?(y=4*-m*o,w=0):(f-1)%4==0?(y=0,w=4*-m*o):(f-2)%4==0?(y=o+4*m*o,w=o):(f-3)%4==0&&(y=-o,w=3*o+4*o*m),a&&(y=-y),d||(b=y,y=0);var x="rotateX("+(d?0:-v)+"deg) rotateY("+(d?v:0)+"deg) translate3d("+y+"px, "+b+"px, "+w+"px)";if(g<=1&&-1<g&&(u=90*f+90*g,a&&(u=90*-f-90*g)),p.transform(x),l.slideShadows){var T=d?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),S=d?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom");0===T.length&&(T=A('<div class="swiper-slide-shadow-'+(d?"left":"top")+'"></div>'),p.append(T)),0===S.length&&(S=A('<div class="swiper-slide-shadow-'+(d?"right":"bottom")+'"></div>'),p.append(S)),T.length&&(T[0].style.opacity=Math.max(-g,0)),S.length&&(S[0].style.opacity=Math.max(g,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+o/2+"px","-moz-transform-origin":"50% 50% -"+o/2+"px","-ms-transform-origin":"50% 50% -"+o/2+"px","transform-origin":"50% 50% -"+o/2+"px"}),l.shadow)if(d)e.transform("translate3d(0px, "+(n/2+l.shadowOffset)+"px, "+-n/2+"px) rotateX(90deg) rotateZ(0deg) scale("+l.shadowScale+")");else{var C=Math.abs(u)-90*Math.floor(Math.abs(u)/90),E=1.5-(Math.sin(2*C*Math.PI/360)/2+Math.cos(2*C*Math.PI/360)/2),k=l.shadowScale,$=l.shadowScale/E,M=l.shadowOffset;e.transform("scale3d("+k+", 1, "+$+") translate3d(0px, "+(r/2+M)+"px, "+-r/2/$+"px) rotateX(-90deg)")}var P=B.isSafari||B.isUiWebView?-o/2:0;i.transform("translate3d(0px,0,"+P+"px) rotateX("+(this.isHorizontal()?0:u)+"deg) rotateY("+(this.isHorizontal()?-u:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},ue={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,i=0;i<e.length;i+=1){var s=e.eq(i),n=s[0].progress;this.params.flipEffect.limitRotation&&(n=Math.max(Math.min(s[0].progress,1),-1));var r=-180*n,a=0,o=-s[0].swiperSlideOffset,l=0;if(this.isHorizontal()?t&&(r=-r):(l=o,a=-r,r=o=0),s[0].style.zIndex=-Math.abs(Math.round(n))+e.length,this.params.flipEffect.slideShadows){var d=this.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),c=this.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom");0===d.length&&(d=A('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),s.append(d)),0===c.length&&(c=A('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),s.append(c)),d.length&&(d[0].style.opacity=Math.max(-n,0)),c.length&&(c[0].style.opacity=Math.max(n,0))}s.transform("translate3d("+o+"px, "+l+"px, 0px) rotateX("+a+"deg) rotateY("+r+"deg)")}},setTransition:function(e){var i=this,t=i.slides,s=i.activeIndex,n=i.$wrapperEl;if(t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e){var r=!1;t.eq(s).transitionEnd(function(){if(!r&&i&&!i.destroyed){r=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)n.trigger(e[t])}})}}},he={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,s=this.$wrapperEl,n=this.slidesSizesGrid,r=this.params.coverflowEffect,a=this.isHorizontal(),o=this.translate,l=a?e/2-o:t/2-o,d=a?r.rotate:-r.rotate,c=r.depth,u=0,h=i.length;u<h;u+=1){var p=i.eq(u),f=n[u],v=(l-p[0].swiperSlideOffset-f/2)/f*r.modifier,m=a?d*v:0,g=a?0:d*v,y=-c*Math.abs(v),b=r.stretch;"string"==typeof b&&-1!==b.indexOf("%")&&(b=parseFloat(r.stretch)/100*f);var w=a?0:b*v,x=a?b*v:0;Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(y)<.001&&(y=0),Math.abs(m)<.001&&(m=0),Math.abs(g)<.001&&(g=0);var T="translate3d("+x+"px,"+w+"px,"+y+"px)  rotateX("+g+"deg) rotateY("+m+"deg)";if(p.transform(T),p[0].style.zIndex=1-Math.abs(Math.round(v)),r.slideShadows){var S=a?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),C=a?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom");0===S.length&&(S=A('<div class="swiper-slide-shadow-'+(a?"left":"top")+'"></div>'),p.append(S)),0===C.length&&(C=A('<div class="swiper-slide-shadow-'+(a?"right":"bottom")+'"></div>'),p.append(C)),S.length&&(S[0].style.opacity=0<v?v:0),C.length&&(C[0].style.opacity=0<-v?-v:0)}}(E.pointerEvents||E.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=l+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},pe={init:function(){var e=this.params.thumbs,t=this.constructor;e.swiper instanceof t?(this.thumbs.swiper=e.swiper,re.extend(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),re.extend(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):re.isObject(e.swiper)&&(this.thumbs.swiper=new t(re.extend({},e.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick)},onThumbClick:function(){var e=this.thumbs.swiper;if(e){var t=e.clickedIndex,i=e.clickedSlide;if(!(i&&A(i).hasClass(this.params.thumbs.slideThumbActiveClass)||null==t)){var s;if(s=e.params.loop?parseInt(A(e.clickedSlide).attr("data-swiper-slide-index"),10):t,this.params.loop){var n=this.activeIndex;this.slides.eq(n).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,n=this.activeIndex);var r=this.slides.eq(n).prevAll('[data-swiper-slide-index="'+s+'"]').eq(0).index(),a=this.slides.eq(n).nextAll('[data-swiper-slide-index="'+s+'"]').eq(0).index();s=void 0===r||void 0!==a&&a-n<n-r?a:r}this.slideTo(s)}}},update:function(e){var t=this.thumbs.swiper;if(t){var i="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,s=this.params.thumbs.autoScrollOffset,n=s&&!t.params.loop;if(this.realIndex!==t.realIndex||n){var r,a,o=t.activeIndex;if(t.params.loop){t.slides.eq(o).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,o=t.activeIndex);var l=t.slides.eq(o).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),d=t.slides.eq(o).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index();r=void 0===l?d:void 0===d?l:d-o==o-l?o:d-o<o-l?d:l,a=this.activeIndex>this.previousIndex?"next":"prev"}else a=(r=this.realIndex)>this.previousIndex?"next":"prev";n&&(r+="next"===a?s:-1*s),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(r)<0&&(t.params.centeredSlides?r=o<r?r-Math.floor(i/2)+1:r+Math.floor(i/2)-1:o<r&&(r=r-i+1),t.slideTo(r,e?0:void 0))}var c=1,u=this.params.thumbs.slideThumbActiveClass;if(1<this.params.slidesPerView&&!this.params.centeredSlides&&(c=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(c=1),c=Math.floor(c),t.slides.removeClass(u),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var h=0;h<c;h+=1)t.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+h)+'"]').addClass(u);else for(var p=0;p<c;p+=1)t.slides.eq(this.realIndex+p).addClass(u)}}},fe=[j,q,W,R,G,Y,U,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){re.extend(this,{mousewheel:{enabled:!1,enable:_.enable.bind(this),disable:_.disable.bind(this),handle:_.handle.bind(this),handleMouseEnter:_.handleMouseEnter.bind(this),handleMouseLeave:_.handleMouseLeave.bind(this),animateSlider:_.animateSlider.bind(this),releaseScroll:_.releaseScroll.bind(this),lastScrollTime:re.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init:function(){!this.params.mousewheel.enabled&&this.params.cssMode&&this.mousewheel.disable(),this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.params.cssMode&&this.mousewheel.enable(),this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){re.extend(this,{navigation:{init:K.init.bind(this),update:K.update.bind(this),destroy:K.destroy.bind(this),onNextClick:K.onNextClick.bind(this),onPrevClick:K.onPrevClick.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this.navigation,s=i.$nextEl,n=i.$prevEl;!this.params.navigation.hideOnClick||A(e.target).is(n)||A(e.target).is(s)||(s?t=s.hasClass(this.params.navigation.hiddenClass):n&&(t=n.hasClass(this.params.navigation.hiddenClass)),!0===t?this.emit("navigationShow",this):this.emit("navigationHide",this),s&&s.toggleClass(this.params.navigation.hiddenClass),n&&n.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){re.extend(this,{pagination:{init:Q.init.bind(this),render:Q.render.bind(this),update:Q.update.bind(this),destroy:Q.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){this.params.pagination.el&&this.params.pagination.hideOnClick&&0<this.pagination.$el.length&&!A(e.target).hasClass(this.params.pagination.bulletClass)&&(!0===this.pagination.$el.hasClass(this.params.pagination.hiddenClass)?this.emit("paginationShow",this):this.emit("paginationHide",this),this.pagination.$el.toggleClass(this.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){re.extend(this,{scrollbar:{init:J.init.bind(this),destroy:J.destroy.bind(this),updateSize:J.updateSize.bind(this),setTranslate:J.setTranslate.bind(this),setTransition:J.setTransition.bind(this),enableDraggable:J.enableDraggable.bind(this),disableDraggable:J.disableDraggable.bind(this),setDragPosition:J.setDragPosition.bind(this),getPointerPosition:J.getPointerPosition.bind(this),onDragStart:J.onDragStart.bind(this),onDragMove:J.onDragMove.bind(this),onDragEnd:J.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){re.extend(this,{parallax:{setTransform:Z.setTransform.bind(this),setTranslate:Z.setTranslate.bind(this),setTransition:Z.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var s=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=ee[e].bind(s)}),re.extend(s,{zoom:t});var n=1;Object.defineProperty(s.zoom,"scale",{get:function(){return n},set:function(e){if(n!==e){var t=s.zoom.gesture.$imageEl?s.zoom.gesture.$imageEl[0]:void 0,i=s.zoom.gesture.$slideEl?s.zoom.gesture.$slideEl[0]:void 0;s.emit("zoomChange",e,t,i)}n=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()},slideChange:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.params.cssMode&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){re.extend(this,{lazy:{initialImageLoaded:!1,load:te.load.bind(this),loadInSlide:te.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()},slideChange:function(){this.params.lazy.enabled&&this.params.cssMode&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){re.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:ie.getInterpolateFunction.bind(this),setTranslate:ie.setTranslate.bind(this),setTransition:ie.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;re.extend(t,{a11y:{liveRegion:A('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(se).forEach(function(e){t.a11y[e]=se[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){re.extend(this,{history:{init:ae.init.bind(this),setHistory:ae.setHistory.bind(this),setHistoryPopState:ae.setHistoryPopState.bind(this),scrollToSlide:ae.scrollToSlide.bind(this),destroy:ae.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)},slideChange:function(){this.history.initialized&&this.params.cssMode&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){re.extend(this,{hashNavigation:{initialized:!1,init:oe.init.bind(this),destroy:oe.destroy.bind(this),setHash:oe.setHash.bind(this),onHashCange:oe.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()},slideChange:function(){this.hashNavigation.initialized&&this.params.cssMode&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;re.extend(t,{autoplay:{running:!1,paused:!1,run:le.run.bind(t),start:le.start.bind(t),stop:le.stop.bind(t),pause:le.pause.bind(t),onVisibilityChange:function(){"hidden"===document.visibilityState&&t.autoplay.running&&t.autoplay.pause(),"visible"===document.visibilityState&&t.autoplay.paused&&(t.autoplay.run(),t.autoplay.paused=!1)},onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&(this.autoplay.start(),document.addEventListener("visibilitychange",this.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},touchEnd:function(){this.params.cssMode&&this.autoplay.paused&&!this.params.autoplay.disableOnInteraction&&this.autoplay.run()},destroy:function(){this.autoplay.running&&this.autoplay.stop(),document.removeEventListener("visibilitychange",this.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){re.extend(this,{fadeEffect:{setTranslate:de.setTranslate.bind(this),setTransition:de.setTransition.bind(this)}})},on:{beforeInit:function(){if("fade"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"fade");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};re.extend(this.params,e),re.extend(this.originalParams,e)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){re.extend(this,{cubeEffect:{setTranslate:ce.setTranslate.bind(this),setTransition:ce.setTransition.bind(this)}})},on:{beforeInit:function(){if("cube"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};re.extend(this.params,e),re.extend(this.originalParams,e)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){re.extend(this,{flipEffect:{setTranslate:ue.setTranslate.bind(this),setTransition:ue.setTransition.bind(this)}})},on:{beforeInit:function(){if("flip"===this.params.effect){this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d");var e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};re.extend(this.params,e),re.extend(this.originalParams,e)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){re.extend(this,{coverflowEffect:{setTranslate:he.setTranslate.bind(this),setTransition:he.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){re.extend(this,{thumbs:{swiper:null,init:pe.init.bind(this),update:pe.update.bind(this),onThumbClick:pe.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===N.use&&(N.use=N.Class.use,N.installModule=N.Class.installModule),N.use(fe),N}),function(c){c.extend(c.easing,{spincrementEasing:function(e,t,i,s,n){return t===n?i+s:s*(1-Math.pow(2,-10*t/n))+i}}),c.fn.spincrement=function(e){var l=c.extend({from:0,to:null,decimalPlaces:null,decimalPoint:".",thousandSeparator:",",duration:1e3,leeway:50,easing:"spincrementEasing",fade:!0,complete:null},e),i=new RegExp(/^(-?[0-9]+)([0-9]{3})/);function d(e,t){if(e=e.toFixed(t),0<t&&"."!==l.decimalPoint&&(e=e.replace(".",l.decimalPoint)),l.thousandSeparator)for(;i.test(e);)e=e.replace(i,"$1"+l.thousandSeparator+"$2");return e}return this.each(function(){var t,i=c(this),e=l.from;if(i.attr("data-from")&&(e=parseFloat(i.attr("data-from"))),i.attr("data-to"))t=parseFloat(i.attr("data-to"));else if(null!==l.to)t=l.to;else{var s=-1<c.inArray(l.thousandSeparator,["\\","^","$","*","+","?","."])?"\\"+l.thousandSeparator:l.thousandSeparator,n=new RegExp(s,"g");t=parseFloat(i.text().replace(n,""))}var r,a=l.duration;if(l.leeway&&(a+=Math.round(l.duration*(2*Math.random()-1)*l.leeway/100)),i.attr("data-dp"))r=parseInt(i.attr("data-dp"),10);else if(null!==l.decimalPlaces)r=l.decimalPlaces;else{var o=i.text().indexOf(l.decimalPoint);r=-1<o?i.text().length-(o+1):0}i.css("counter",e),l.fade&&i.css("opacity",0),i.animate({counter:t,opacity:1},{easing:l.easing,duration:a,step:function(e){i.html(d(e*t,r))},complete:function(){i.css("counter",null),i.html(d(t,r)),l.complete&&l.complete(i)}})})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

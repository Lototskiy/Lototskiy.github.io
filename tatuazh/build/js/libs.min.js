!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,o=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,s=t.indexOf,i={},a=i.toString,g=i.hasOwnProperty,r=g.toString,c=r.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},S=C.document,d={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,i){var n,s,a=(i=i||S).createElement("script");if(a.text=e,t)for(n in d)(s=t[n]||t.getAttribute&&t.getAttribute(n))&&a.setAttribute(n,s);i.head.appendChild(a).parentNode.removeChild(a)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[a.call(e)]||"object":typeof e}var u="3.5.1",E=function(e,t){return new E.fn.init(e,t)};function h(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!b(e)&&!m(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:u,constructor:E,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(i){return this.pushStack(E.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,i,n,s,a,r=arguments[0]||{},o=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[o]||{},o++),"object"==typeof r||b(r)||(r={}),o===l&&(r=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(c&&n&&(E.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[t],a=s&&!Array.isArray(i)?[]:s||E.isPlainObject(i)?i:{},s=!1,r[t]=E.extend(c,a,n)):void 0!==n&&(r[t]=n));return r},E.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==a.call(e))&&(!(t=n(e))||"function"==typeof(i=g.call(t,"constructor")&&t.constructor)&&r.call(i)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){w(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(h(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(h(Object(e))?E.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:s.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,s=e.length;n<i;n++)e[s++]=t[n];return e.length=s,e},grep:function(e,t,i){for(var n=[],s=0,a=e.length,r=!i;s<a;s++)!t(e[s],s)!=r&&n.push(e[s]);return n},map:function(e,t,i){var n,s,a=0,r=[];if(h(e))for(n=e.length;a<n;a++)null!=(s=t(e[a],a,i))&&r.push(s);else for(a in e)null!=(s=t(e[a],a,i))&&r.push(s);return v(r)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var p=function(i){function u(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function s(){T()}var e,p,w,a,r,f,h,m,x,l,c,T,C,o,S,v,d,g,y,E="sizzle"+ +new Date,b=i.document,k=0,n=0,M=le(),$=le(),P=le(),L=le(),D=function(e,t){return e===t&&(c=!0),0},A={}.hasOwnProperty,t=[],z=t.pop,O=t.push,j=t.push,I=t.slice,N=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+q+"*("+F+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+q+"*\\]",B=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",X=new RegExp(q+"+","g"),Y=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),V=new RegExp("^"+q+"*,"+q+"*"),_=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),W=new RegExp(q+"|>"),G=new RegExp(B),U=new RegExp("^"+F+"$"),K={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\([^\\r\\n\\f])","g"),se=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=we(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{j.apply(t=I.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){j={apply:t.length?function(e,t){O.apply(e,I.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function oe(t,e,i,n){var s,a,r,o,l,c,d,u=e&&e.ownerDocument,h=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return i;if(!n&&(T(e),e=e||C,S)){if(11!==h&&(l=te.exec(t)))if(s=l[1]){if(9===h){if(!(r=e.getElementById(s)))return i;if(r.id===s)return i.push(r),i}else if(u&&(r=u.getElementById(s))&&y(e,r)&&r.id===s)return i.push(r),i}else{if(l[2])return j.apply(i,e.getElementsByTagName(t)),i;if((s=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return j.apply(i,e.getElementsByClassName(s)),i}if(p.qsa&&!L[t+" "]&&(!v||!v.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(d=t,u=e,1===h&&(W.test(t)||_.test(t))){for((u=ie.test(t)&&ge(e.parentNode)||e)===e&&p.scope||((o=e.getAttribute("id"))?o=o.replace(se,ae):e.setAttribute("id",o=E)),a=(c=f(t)).length;a--;)c[a]=(o?"#"+o:":scope")+" "+be(c[a]);d=c.join(",")}try{return j.apply(i,u.querySelectorAll(d)),i}catch(e){L(t,!0)}finally{o===E&&e.removeAttribute("id")}}}return m(t.replace(Y,"$1"),e,i,n)}function le(){var i=[];function n(e,t){return i.push(e+" ")>w.cacheLength&&delete n[i.shift()],n[e+" "]=t}return n}function ce(e){return e[E]=!0,e}function de(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var i=e.split("|"),n=i.length;n--;)w.attrHandle[i[n]]=t}function he(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&re(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(r){return ce(function(a){return a=+a,ce(function(e,t){for(var i,n=r([],e.length,a),s=n.length;s--;)e[i=n[s]]&&(e[i]=!(t[i]=e[i]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=oe.support={},r=oe.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Q.test(t||i&&i.nodeName||"HTML")},T=oe.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:b;return n!=C&&9===n.nodeType&&n.documentElement&&(o=(C=n).documentElement,S=!r(C),b!=C&&(i=C.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",s,!1):i.attachEvent&&i.attachEvent("onunload",s)),p.scope=de(function(e){return o.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=de(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=de(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(C.getElementsByClassName),p.getById=de(function(e){return o.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),p.getById?(w.filter.ID=function(e){var t=e.replace(ne,u);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var i=t.getElementById(e);return i?[i]:[]}}):(w.filter.ID=function(e){var i=e.replace(ne,u);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var i,n,s,a=t.getElementById(e);if(a){if((i=a.getAttributeNode("id"))&&i.value===e)return[a];for(s=t.getElementsByName(e),n=0;a=s[n++];)if((i=a.getAttributeNode("id"))&&i.value===e)return[a]}return[]}}),w.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],s=0,a=t.getElementsByTagName(e);if("*"!==e)return a;for(;i=a[s++];)1===i.nodeType&&n.push(i);return n},w.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},d=[],v=[],(p.qsa=ee.test(C.querySelectorAll))&&(de(function(e){var t;o.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+q+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+q+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+E+"-]").length||v.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+q+"*name"+q+"*="+q+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),de(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+q+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),o.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(p.matchesSelector=ee.test(g=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&de(function(e){p.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),d.push("!=",B)}),v=v.length&&new RegExp(v.join("|")),d=d.length&&new RegExp(d.join("|")),t=ee.test(o.compareDocumentPosition),y=t||ee.test(o.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return c=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===i?e==C||e.ownerDocument==b&&y(b,e)?-1:t==C||t.ownerDocument==b&&y(b,t)?1:l?N(l,e)-N(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return c=!0,0;var i,n=0,s=e.parentNode,a=t.parentNode,r=[e],o=[t];if(!s||!a)return e==C?-1:t==C?1:s?-1:a?1:l?N(l,e)-N(l,t):0;if(s===a)return he(e,t);for(i=e;i=i.parentNode;)r.unshift(i);for(i=t;i=i.parentNode;)o.unshift(i);for(;r[n]===o[n];)n++;return n?he(r[n],o[n]):r[n]==b?-1:o[n]==b?1:0}),C},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(T(e),p.matchesSelector&&S&&!L[t+" "]&&(!d||!d.test(t))&&(!v||!v.test(t)))try{var i=g.call(e,t);if(i||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){L(t,!0)}return 0<oe(t,C,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var i=w.attrHandle[t.toLowerCase()],n=i&&A.call(w.attrHandle,t.toLowerCase())?i(e,t,!S):void 0;return void 0!==n?n:p.attributes||!S?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},oe.escape=function(e){return(e+"").replace(se,ae)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],n=0,s=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(D),c){for(;t=e[s++];)t===e[s]&&(n=i.push(s));for(;n--;)e.splice(i[n],1)}return l=null,e},a=oe.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=a(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=a(t);return i},(w=oe.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,u),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,u),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&G.test(i)&&(t=f(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,u).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=M[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&M(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,s){return function(e){var t=oe.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===s:"!="===n?t!==s:"^="===n?s&&0===t.indexOf(s):"*="===n?s&&-1<t.indexOf(s):"$="===n?s&&t.slice(-s.length)===s:"~="===n?-1<(" "+t.replace(X," ")+" ").indexOf(s):"|="===n&&(t===s||t.slice(0,s.length+1)===s+"-"))}},CHILD:function(f,e,t,m,v){var g="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===m&&0===v?function(e){return!!e.parentNode}:function(e,t,i){var n,s,a,r,o,l,c=g!=y?"nextSibling":"previousSibling",d=e.parentNode,u=b&&e.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(d){if(g){for(;c;){for(r=e;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&h){for(p=(o=(n=(s=(a=(r=d)[E]||(r[E]={}))[r.uniqueID]||(a[r.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],r=o&&d.childNodes[o];r=++o&&r&&r[c]||(p=o=0)||l.pop();)if(1===r.nodeType&&++p&&r===e){s[f]=[k,o,p];break}}else if(h&&(p=o=(n=(s=(a=(r=e)[E]||(r[E]={}))[r.uniqueID]||(a[r.uniqueID]={}))[f]||[])[0]===k&&n[1]),!1===p)for(;(r=++o&&r&&r[c]||(p=o=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++p||(h&&((s=(a=r[E]||(r[E]={}))[r.uniqueID]||(a[r.uniqueID]={}))[f]=[k,p]),r!==e)););return(p-=v)===m||p%m==0&&0<=p/m}}},PSEUDO:function(e,a){var t,r=w.pseudos[e]||w.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[E]?r(a):1<r.length?(t=[e,e,"",a],w.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var i,n=r(e,a),s=n.length;s--;)e[i=N(e,n[s])]=!(t[i]=n[s])}):function(e){return r(e,0,t)}):r}},pseudos:{not:ce(function(e){var n=[],s=[],o=h(e.replace(Y,"$1"));return o[E]?ce(function(e,t,i,n){for(var s,a=o(e,null,n,[]),r=e.length;r--;)(s=a[r])&&(e[r]=!(t[r]=s))}):function(e,t,i){return n[0]=e,o(n,null,i,s),n[0]=null,!s.pop()}}),has:ce(function(t){return function(e){return 0<oe(t,e).length}}),contains:ce(function(t){return t=t.replace(ne,u),function(e){return-1<(e.textContent||a(e)).indexOf(t)}}),lang:ce(function(i){return U.test(i||"")||oe.error("unsupported lang: "+i),i=i.replace(ne,u).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,i){return[i<0?i+t:i]}),even:ve(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ve(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ve(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ve(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})w.pseudos[e]=fe(e);function ye(){}function be(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function we(o,e,t){var l=e.dir,c=e.next,d=c||l,u=t&&"parentNode"===d,h=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||u)return o(e,t,i);return!1}:function(e,t,i){var n,s,a,r=[k,h];if(i){for(;e=e[l];)if((1===e.nodeType||u)&&o(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||u)if(s=(a=e[E]||(e[E]={}))[e.uniqueID]||(a[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=s[d])&&n[0]===k&&n[1]===h)return r[2]=n[2];if((s[d]=r)[2]=o(e,t,i))return!0}return!1}}function xe(s){return 1<s.length?function(e,t,i){for(var n=s.length;n--;)if(!s[n](e,t,i))return!1;return!0}:s[0]}function Te(e,t,i,n,s){for(var a,r=[],o=0,l=e.length,c=null!=t;o<l;o++)(a=e[o])&&(i&&!i(a,n,s)||(r.push(a),c&&t.push(o)));return r}function Ce(p,f,m,v,g,e){return v&&!v[E]&&(v=Ce(v)),g&&!g[E]&&(g=Ce(g,e)),ce(function(e,t,i,n){var s,a,r,o=[],l=[],c=t.length,d=e||function(e,t,i){for(var n=0,s=t.length;n<s;n++)oe(e,t[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!p||!e&&f?d:Te(d,o,p,i,n),h=m?g||(e?p:c||v)?[]:t:u;if(m&&m(u,h,i,n),v)for(s=Te(h,l),v(s,[],i,n),a=s.length;a--;)(r=s[a])&&(h[l[a]]=!(u[l[a]]=r));if(e){if(g||p){if(g){for(s=[],a=h.length;a--;)(r=h[a])&&s.push(u[a]=r);g(null,h=[],s,n)}for(a=h.length;a--;)(r=h[a])&&-1<(s=g?N(e,r):o[a])&&(e[s]=!(t[s]=r))}}else h=Te(h===t?h.splice(c,h.length):h),g?g(null,t,h,n):j.apply(t,h)})}function Se(e){for(var s,t,i,n=e.length,a=w.relative[e[0].type],r=a||w.relative[" "],o=a?1:0,l=we(function(e){return e===s},r,!0),c=we(function(e){return-1<N(s,e)},r,!0),d=[function(e,t,i){var n=!a&&(i||t!==x)||((s=t).nodeType?l:c)(e,t,i);return s=null,n}];o<n;o++)if(t=w.relative[e[o].type])d=[we(xe(d),t)];else{if((t=w.filter[e[o].type].apply(null,e[o].matches))[E]){for(i=++o;i<n&&!w.relative[e[i].type];i++);return Ce(1<o&&xe(d),1<o&&be(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(Y,"$1"),t,o<i&&Se(e.slice(o,i)),i<n&&Se(e=e.slice(i)),i<n&&be(e))}d.push(t)}return xe(d)}function Ee(v,g){function e(e,t,i,n,s){var a,r,o,l=0,c="0",d=e&&[],u=[],h=x,p=e||b&&w.find.TAG("*",s),f=k+=null==h?1:Math.random()||.1,m=p.length;for(s&&(x=t==C||t||s);c!==m&&null!=(a=p[c]);c++){if(b&&a){for(r=0,t||a.ownerDocument==C||(T(a),i=!S);o=v[r++];)if(o(a,t||C,i)){n.push(a);break}s&&(k=f)}y&&((a=!o&&a)&&l--,e&&d.push(a))}if(l+=c,y&&c!==l){for(r=0;o=g[r++];)o(d,u,t,i);if(e){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=z.call(n));u=Te(u)}j.apply(n,u),s&&!e&&0<u.length&&1<l+g.length&&oe.uniqueSort(n)}return s&&(k=f,x=h),d}var y=0<g.length,b=0<v.length;return y?ce(e):e}return ye.prototype=w.filters=w.pseudos,w.setFilters=new ye,f=oe.tokenize=function(e,t){var i,n,s,a,r,o,l,c=$[e+" "];if(c)return t?0:c.slice(0);for(r=e,o=[],l=w.preFilter;r;){for(a in i&&!(n=V.exec(r))||(n&&(r=r.slice(n[0].length)||r),o.push(s=[])),i=!1,(n=_.exec(r))&&(i=n.shift(),s.push({value:i,type:n[0].replace(Y," ")}),r=r.slice(i.length)),w.filter)!(n=K[a].exec(r))||l[a]&&!(n=l[a](n))||(i=n.shift(),s.push({value:i,type:a,matches:n}),r=r.slice(i.length));if(!i)break}return t?r.length:r?oe.error(e):$(e,o).slice(0)},h=oe.compile=function(e,t){var i,n=[],s=[],a=P[e+" "];if(!a){for(i=(t=t||f(e)).length;i--;)(a=Se(t[i]))[E]?n.push(a):s.push(a);(a=P(e,Ee(s,n))).selector=e}return a},m=oe.select=function(e,t,i,n){var s,a,r,o,l,c="function"==typeof e&&e,d=!n&&f(e=c.selector||e);if(i=i||[],1===d.length){if(2<(a=d[0]=d[0].slice(0)).length&&"ID"===(r=a[0]).type&&9===t.nodeType&&S&&w.relative[a[1].type]){if(!(t=(w.find.ID(r.matches[0].replace(ne,u),t)||[])[0]))return i;c&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(s=K.needsContext.test(e)?0:a.length;s--&&(r=a[s],!w.relative[o=r.type]);)if((l=w.find[o])&&(n=l(r.matches[0].replace(ne,u),ie.test(a[0].type)&&ge(t.parentNode)||t))){if(a.splice(s,1),!(e=n.length&&be(a)))return j.apply(i,n),i;break}}return(c||h(e,d))(n,t,!S,i,!t||ie.test(e)&&ge(t.parentNode)||t),i},p.sortStable=E.split("").sort(D).join("")===E,p.detectDuplicates=!!c,T(),p.sortDetached=de(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),de(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&de(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),de(function(e){return null==e.getAttribute("disabled")})||ue(H,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),oe}(C);E.find=p,E.expr=p.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;function f(e,t,i){for(var n=[],s=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(s&&E(e).is(i))break;n.push(e)}return n}function T(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var k=E.expr.match.needsContext;function M(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var $=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,i,n){return b(i)?E.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?E.grep(e,function(e){return e===i!==n}):"string"!=typeof i?E.grep(e,function(e){return-1<s.call(i,e)!==n}):E.filter(i,e,n)}E.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?E.find.matchesSelector(n,e)?[n]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,i,n=this.length,s=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<n;t++)if(E.contains(s[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)E.find(e,s[t],i);return 1<n?E.uniqueSort(i):i},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var L,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,i){var n,s;if(!e)return this;if(i=i||L,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==i.ready?i.ready(e):e(E):E.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:D.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:S,!0)),$.test(n[1])&&E.isPlainObject(t))for(n in t)b(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(s=S.getElementById(n[2]))&&(this[0]=s,this.length=1),this}).prototype=E.fn,L=E(S);var A=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,s=this.length,a=[],r="string"!=typeof e&&E(e);if(!k.test(e))for(;n<s;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&E.find.matchesSelector(i,e))){a.push(i);break}return this.pushStack(1<a.length?E.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?s.call(E(e),this[0]):s.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,i){return f(e,"parentNode",i)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,i){return f(e,"nextSibling",i)},prevUntil:function(e,t,i){return f(e,"previousSibling",i)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(M(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(n,s){E.fn[n]=function(e,t){var i=E.map(this,s,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=E.filter(t,i)),1<this.length&&(z[n]||E.uniqueSort(i),A.test(n)&&i.reverse()),this.pushStack(i)}});var j=/[^\x20\t\r\n\f]+/g;function I(e){return e}function N(e){throw e}function H(e,t,i,n){var s;try{e&&b(s=e.promise)?s.call(e).done(t).fail(i):e&&b(s=e.then)?s.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}E.Callbacks=function(n){var e,i;n="string"==typeof n?(e=n,i={},E.each(e.match(j)||[],function(e,t){i[t]=!0}),i):E.extend({},n);function s(){for(o=o||n.once,r=a=!0;c.length;d=-1)for(t=c.shift();++d<l.length;)!1===l[d].apply(t[0],t[1])&&n.stopOnFalse&&(d=l.length,t=!1);n.memory||(t=!1),a=!1,o&&(l=t?[]:"")}var a,t,r,o,l=[],c=[],d=-1,u={add:function(){return l&&(t&&!a&&(d=l.length-1,c.push(t)),function i(e){E.each(e,function(e,t){b(t)?n.unique&&u.has(t)||l.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),t&&!a&&s()),this},remove:function(){return E.each(arguments,function(e,t){for(var i;-1<(i=E.inArray(t,l,i));)l.splice(i,1),i<=d&&d--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return o=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return o=c=[],t||a||(l=t=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),a||s()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},E.extend({Deferred:function(e){var a=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],s="pending",r={state:function(){return s},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var s=arguments;return E.Deferred(function(n){E.each(a,function(e,t){var i=b(s[t[4]])&&s[t[4]];o[t[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),s=null}).promise()},then:function(t,i,n){var l=0;function c(s,a,r,o){return function(){function e(){var e,t;if(!(s<l)){if((e=r.apply(i,n))===a.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?o?t.call(e,c(l,a,I,o),c(l,a,N,o)):(l++,t.call(e,c(l,a,I,o),c(l,a,N,o),c(l,a,I,a.notifyWith))):(r!==I&&(i=void 0,n=[e]),(o||a.resolveWith)(i,n))}}var i=this,n=arguments,t=o?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=s+1&&(r!==N&&(i=void 0,n=[e]),a.rejectWith(i,n))}};s?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),C.setTimeout(t))}}return E.Deferred(function(e){a[0][3].add(c(0,e,b(n)?n:I,e.notifyWith)),a[1][3].add(c(0,e,b(t)?t:I)),a[2][3].add(c(0,e,b(i)?i:N))}).promise()},promise:function(e){return null!=e?E.extend(e,r):r}},o={};return E.each(a,function(e,t){var i=t[2],n=t[5];r[t[1]]=i.add,n&&i.add(function(){s=n},a[3-e][2].disable,a[3-e][3].disable,a[0][2].lock,a[0][3].lock),i.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=i.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){function t(t){return function(e){s[t]=this,a[t]=1<arguments.length?o.call(arguments):e,--i||r.resolveWith(s,a)}}var i=arguments.length,n=i,s=Array(n),a=o.call(arguments),r=E.Deferred();if(i<=1&&(H(e,r.done(t(n)).resolve,r.reject,!i),"pending"===r.state()||b(a[n]&&a[n].then)))return r.then();for(;n--;)H(a[n],t(n),r.reject);return r.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&q.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){C.setTimeout(function(){throw e})};var F=E.Deferred();function R(){S.removeEventListener("DOMContentLoaded",R),C.removeEventListener("load",R),E.ready()}E.fn.ready=function(e){return F.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||F.resolveWith(S,[E])}}),E.ready.then=F.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?C.setTimeout(E.ready):(S.addEventListener("DOMContentLoaded",R),C.addEventListener("load",R));var B=function(e,t,i,n,s,a,r){var o=0,l=e.length,c=null==i;if("object"===x(i))for(o in s=!0,i)B(e,t,o,i[o],!0,a,r);else if(void 0!==n&&(s=!0,b(n)||(r=!0),c&&(t=r?(t.call(e,n),null):(c=t,function(e,t,i){return c.call(E(e),i)})),t))for(;o<l;o++)t(e[o],i,r?n:n.call(e[o],o,t(e[o],i)));return s?e:c?t.call(e):l?t(e[0],i):a},X=/^-ms-/,Y=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function _(e){return e.replace(X,"ms-").replace(Y,V)}function W(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},W(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,s=this.cache(e);if("string"==typeof t)s[_(t)]=i;else for(n in t)s[_(n)]=t[n];return s},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][_(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(_):(t=_(t))in n?[t]:t.match(j)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!E.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var U=new G,K=new G,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,i){var n,s;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(s=i)||"false"!==s&&("null"===s?null:s===+s+""?+s:Q.test(s)?JSON.parse(s):s)}catch(e){}K.set(e,t,i)}else i=void 0;return i}E.extend({hasData:function(e){return K.hasData(e)||U.hasData(e)},data:function(e,t,i){return K.access(e,t,i)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,i){return U.access(e,t,i)},_removeData:function(e,t){U.remove(e,t)}}),E.fn.extend({data:function(i,e){var t,n,s,a=this[0],r=a&&a.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):B(this,function(e){var t;if(a&&void 0===e)return void 0!==(t=K.get(a,i))||void 0!==(t=J(a,i))?t:void 0;this.each(function(){K.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(s=K.get(a),1===a.nodeType&&!U.get(a,"hasDataAttrs"))){for(t=r.length;t--;)r[t]&&0===(n=r[t].name).indexOf("data-")&&(n=_(n.slice(5)),J(a,n,s[n]));U.set(a,"hasDataAttrs",!0)}return s},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),E.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=U.get(e,t),i&&(!n||Array.isArray(i)?n=U.access(e,t,E.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=E.queue(e,t),n=i.length,s=i.shift(),a=E._queueHooks(e,t);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===t&&i.unshift("inprogress"),delete a.stop,s.call(e,function(){E.dequeue(e,t)},a)),!n&&a&&a.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return U.get(e,i)||U.access(e,i,{empty:E.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",i])})})}}),E.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===i?this:this.each(function(){var e=E.queue(this,t,i);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--s||a.resolveWith(r,[r])}var n,s=1,a=E.Deferred(),r=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=U.get(r[o],e+"queueHooks"))&&n.empty&&(s++,n.empty.add(i));return i(),a.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ne=S.documentElement,se=function(e){return E.contains(e.ownerDocument,e)},ae={composed:!0};ne.getRootNode&&(se=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var re=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===E.css(e,"display")};function oe(e,t,i,n){var s,a,r=20,o=n?function(){return n.cur()}:function(){return E.css(e,t,"")},l=o(),c=i&&i[3]||(E.cssNumber[t]?"":"px"),d=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&te.exec(E.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)E.style(e,t,d+c),(1-a)*(1-(a=o()/l||.5))<=0&&(r=0),d/=a;d*=2,E.style(e,t,d+c),i=i||[]}return i&&(d=+d||+l||0,s=i[1]?d+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=d,n.end=s)),s}var le={};function ce(e,t){for(var i,n,s,a,r,o,l,c=[],d=0,u=e.length;d<u;d++)(n=e[d]).style&&(i=n.style.display,t?("none"===i&&(c[d]=U.get(n,"display")||null,c[d]||(n.style.display="")),""===n.style.display&&re(n)&&(c[d]=(l=r=a=void 0,r=(s=n).ownerDocument,o=s.nodeName,(l=le[o])||(a=r.body.appendChild(r.createElement(o)),l=E.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),le[o]=l)))):"none"!==i&&(c[d]="none",U.set(n,"display",i)));for(d=0;d<u;d++)null!=c[d]&&(e[d].style.display=c[d]);return e}E.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){re(this)?E(this).show():E(this).hide()})}});var de,ue,he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;de=S.createDocumentFragment().appendChild(S.createElement("div")),(ue=S.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),de.appendChild(ue),y.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue,de.innerHTML="<option></option>",y.option=!!de.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&M(e,t)?E.merge([e],i):i}function ge(e,t){for(var i=0,n=e.length;i<n;i++)U.set(e[i],"globalEval",!t||U.get(t[i],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,y.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,i,n,s){for(var a,r,o,l,c,d,u=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((a=e[p])||0===a)if("object"===x(a))E.merge(h,a.nodeType?[a]:a);else if(ye.test(a)){for(r=r||u.appendChild(t.createElement("div")),o=(pe.exec(a)||["",""])[1].toLowerCase(),l=me[o]||me._default,r.innerHTML=l[1]+E.htmlPrefilter(a)+l[2],d=l[0];d--;)r=r.lastChild;E.merge(h,r.childNodes),(r=u.firstChild).textContent=""}else h.push(t.createTextNode(a));for(u.textContent="",p=0;a=h[p++];)if(n&&-1<E.inArray(a,n))s&&s.push(a);else if(c=se(a),r=ve(u.appendChild(a),"script"),c&&ge(r),i)for(d=0;a=r[d++];)fe.test(a.type||"")&&i.push(a);return u}var we=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Se(){return!1}function Ee(e,t){return e===function(){try{return S.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,i,n,s,a){var r,o;if("object"==typeof t){for(o in"string"!=typeof i&&(n=n||i,i=void 0),t)ke(e,o,i,n,t[o],a);return e}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Se;else if(!s)return e;return 1===a&&(r=s,(s=function(e){return E().off(e),r.apply(this,arguments)}).guid=r.guid||(r.guid=E.guid++)),e.each(function(){E.event.add(this,t,s,n,i)})}function Me(e,s,a){a?(U.set(e,s,!1),E.event.add(e,s,{namespace:!1,handler:function(e){var t,i,n=U.get(this,s);if(1&e.isTrigger&&this[s]){if(n.length)(E.event.special[s]||{}).delegateType&&e.stopPropagation();else if(n=o.call(arguments),U.set(this,s,n),t=a(this,s),this[s](),n!==(i=U.get(this,s))||t?U.set(this,s,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(U.set(this,s,{value:E.event.trigger(E.extend(n[0],E.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,s)&&E.event.add(e,s,Ce)}E.event={global:{},add:function(t,e,i,n,s){var a,r,o,l,c,d,u,h,p,f,m,v=U.get(t);if(W(t))for(i.handler&&(i=(a=i).handler,s=a.selector),s&&E.find.matchesSelector(ne,s),i.guid||(i.guid=E.guid++),(l=v.events)||(l=v.events=Object.create(null)),(r=v.handle)||(r=v.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(j)||[""]).length;c--;)p=m=(o=Te.exec(e[c])||[])[1],f=(o[2]||"").split(".").sort(),p&&(u=E.event.special[p]||{},p=(s?u.delegateType:u.bindType)||p,u=E.event.special[p]||{},d=E.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&E.expr.match.needsContext.test(s),namespace:f.join(".")},a),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,d):h.push(d),E.event.global[p]=!0)},remove:function(e,t,i,n,s){var a,r,o,l,c,d,u,h,p,f,m,v=U.hasData(e)&&U.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(p=m=(o=Te.exec(t[c])||[])[1],f=(o[2]||"").split(".").sort(),p){for(u=E.event.special[p]||{},h=l[p=(n?u.delegateType:u.bindType)||p]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=a=h.length;a--;)d=h[a],!s&&m!==d.origType||i&&i.guid!==d.guid||o&&!o.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(h.splice(a,1),d.selector&&h.delegateCount--,u.remove&&u.remove.call(e,d));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(e,f,v.handle)||E.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[c],i,n,!0);E.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,i,n,s,a,r,o=new Array(arguments.length),l=E.event.fix(e),c=(U.get(this,"events")||Object.create(null))[l.type]||[],d=E.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(r=E.event.handlers.call(this,l,c),t=0;(s=r[t++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(a=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(n=((E.event.special[a.origType]||{}).handle||a.handler).apply(s.elem,o))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,s,a,r,o=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(a=[],r={},i=0;i<l;i++)void 0===r[s=(n=t[i]).selector+" "]&&(r[s]=n.needsContext?-1<E(s,this).index(c):E.find(s,this,null,[c]).length),r[s]&&a.push(n);a.length&&o.push({elem:c,handlers:a})}return c=this,l<t.length&&o.push({elem:c,handlers:t.slice(l)}),o},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&M(t,"input")&&Me(t,"click",Ce),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&M(t,"input")&&Me(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&M(t,"input")&&U.get(t,"click")||M(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return Me(this,e,Ee),!1},trigger:function(){return Me(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,s){E.event.special[e]={delegateType:s,bindType:s,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=s),t}}}),E.fn.extend({on:function(e,t,i,n){return ke(this,e,t,i,n)},one:function(e,t,i,n){return ke(this,e,t,i,n,1)},off:function(e,t,i){var n,s;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,E(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Se),this.each(function(){E.event.remove(this,e,i,t)});for(s in e)this.off(s,t,e[s]);return this}});var $e=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return M(e,"table")&&M(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Ae(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ze(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var i,n,s,a,r,o;if(1===t.nodeType){if(U.hasData(e)&&(o=U.get(e).events))for(s in U.remove(t,"handle events"),o)for(i=0,n=o[s].length;i<n;i++)E.event.add(t,s,o[s][i]);K.hasData(e)&&(a=K.access(e),r=E.extend({},a),K.set(t,r))}}function je(i,n,s,a){n=v(n);var e,t,r,o,l,c,d=0,u=i.length,h=u-1,p=n[0],f=b(p);if(f||1<u&&"string"==typeof p&&!y.checkClone&&Pe.test(p))return i.each(function(e){var t=i.eq(e);f&&(n[0]=p.call(this,e,t.html())),je(t,n,s,a)});if(u&&(t=(e=be(n,i[0].ownerDocument,!1,i,a)).firstChild,1===e.childNodes.length&&(e=t),t||a)){for(o=(r=E.map(ve(e,"script"),Ae)).length;d<u;d++)l=e,d!==h&&(l=E.clone(l,!0,!0),o&&E.merge(r,ve(l,"script"))),s.call(i[d],l,d);if(o)for(c=r[r.length-1].ownerDocument,E.map(r,ze),d=0;d<o;d++)l=r[d],fe.test(l.type||"")&&!U.access(l,"globalEval")&&E.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):w(l.textContent.replace(Le,""),l,c))}return i}function Ie(e,t,i){for(var n,s=t?E.filter(t,e):e,a=0;null!=(n=s[a]);a++)i||1!==n.nodeType||E.cleanData(ve(n)),n.parentNode&&(i&&se(n)&&ge(ve(n,"script")),n.parentNode.removeChild(n));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,s,a,r,o,l,c,d=e.cloneNode(!0),u=se(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(r=ve(d),n=0,s=(a=ve(e)).length;n<s;n++)o=a[n],l=r[n],"input"===(c=l.nodeName.toLowerCase())&&he.test(o.type)?l.checked=o.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=o.defaultValue);if(t)if(i)for(a=a||ve(e),r=r||ve(d),n=0,s=a.length;n<s;n++)Oe(a[n],r[n]);else Oe(e,d);return 0<(r=ve(d,"script")).length&&ge(r,!u&&ve(e,"script")),d},cleanData:function(e){for(var t,i,n,s=E.event.special,a=0;void 0!==(i=e[a]);a++)if(W(i)){if(t=i[U.expando]){if(t.events)for(n in t.events)s[n]?E.event.remove(i,n):E.removeEvent(i,n,t.handle);i[U.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return B(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return je(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return je(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=De(this,e)).insertBefore(e,t.firstChild)})},before:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return B(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!$e.test(e)&&!me[(pe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(E.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return je(this,arguments,function(e){var t=this.parentNode;E.inArray(this,i)<0&&(E.cleanData(ve(this)),t&&t.replaceChild(e,this))},i)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,r){E.fn[e]=function(e){for(var t,i=[],n=E(e),s=n.length-1,a=0;a<=s;a++)t=a===s?this:this.clone(!0),E(n[a])[r](t),l.apply(i,t.get());return this.pushStack(i)}});function Ne(e,t,i){var n,s,a={};for(s in t)a[s]=e.style[s],e.style[s]=t[s];for(s in n=i.call(e),t)e.style[s]=a[s];return n}var He,qe,Fe,Re,Be,Xe,Ye,Ve,_e=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Ge=new RegExp(ie.join("|"),"i");function Ue(){var e;Ve&&(Ye.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ve.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(Ye).appendChild(Ve),e=C.getComputedStyle(Ve),He="1%"!==e.top,Xe=12===Ke(e.marginLeft),Ve.style.right="60%",Re=36===Ke(e.right),qe=36===Ke(e.width),Ve.style.position="absolute",Fe=12===Ke(Ve.offsetWidth/3),ne.removeChild(Ye),Ve=null)}function Ke(e){return Math.round(parseFloat(e))}function Qe(e,t,i){var n,s,a,r,o=e.style;return(i=i||We(e))&&(""!==(r=i.getPropertyValue(t)||i[t])||se(e)||(r=E.style(e,t)),!y.pixelBoxStyles()&&_e.test(r)&&Ge.test(t)&&(n=o.width,s=o.minWidth,a=o.maxWidth,o.minWidth=o.maxWidth=o.width=r,r=i.width,o.width=n,o.minWidth=s,o.maxWidth=a)),void 0!==r?r+"":r}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ye=S.createElement("div"),(Ve=S.createElement("div")).style&&(Ve.style.backgroundClip="content-box",Ve.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ve.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return Ue(),qe},pixelBoxStyles:function(){return Ue(),Re},pixelPosition:function(){return Ue(),He},reliableMarginLeft:function(){return Ue(),Xe},scrollboxSize:function(){return Ue(),Fe},reliableTrDimensions:function(){var e,t,i,n;return null==Be&&(e=S.createElement("table"),t=S.createElement("tr"),i=S.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ne.appendChild(e).appendChild(t).appendChild(i),n=C.getComputedStyle(t),Be=3<parseInt(n.height),ne.removeChild(e)),Be}}));var Je=["Webkit","Moz","ms"],et=S.createElement("div").style,tt={};function it(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Je.length;i--;)if((e=Je[i]+t)in et)return e}(e)||e)}var nt=/^(none|table(?!-c[ea]).+)/,st=/^--/,at={position:"absolute",visibility:"hidden",display:"block"},rt={letterSpacing:"0",fontWeight:"400"};function ot(e,t,i){var n=te.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function lt(e,t,i,n,s,a){var r="width"===t?1:0,o=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=E.css(e,i+ie[r],!0,s)),n?("content"===i&&(l-=E.css(e,"padding"+ie[r],!0,s)),"margin"!==i&&(l-=E.css(e,"border"+ie[r]+"Width",!0,s))):(l+=E.css(e,"padding"+ie[r],!0,s),"padding"!==i?l+=E.css(e,"border"+ie[r]+"Width",!0,s):o+=E.css(e,"border"+ie[r]+"Width",!0,s));return!n&&0<=a&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-o-.5))||0),l}function ct(e,t,i){var n=We(e),s=(!y.boxSizingReliable()||i)&&"border-box"===E.css(e,"boxSizing",!1,n),a=s,r=Qe(e,t,n),o="offset"+t[0].toUpperCase()+t.slice(1);if(_e.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&s||!y.reliableTrDimensions()&&M(e,"tr")||"auto"===r||!parseFloat(r)&&"inline"===E.css(e,"display",!1,n))&&e.getClientRects().length&&(s="border-box"===E.css(e,"boxSizing",!1,n),(a=o in e)&&(r=e[o])),(r=parseFloat(r)||0)+lt(e,t,i||(s?"border":"content"),a,n,r)+"px"}function dt(e,t,i,n,s){return new dt.prototype.init(e,t,i,n,s)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Qe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var s,a,r,o=_(t),l=st.test(t),c=e.style;if(l||(t=it(o)),r=E.cssHooks[t]||E.cssHooks[o],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(e,!1,n))?s:c[t];"string"===(a=typeof i)&&(s=te.exec(i))&&s[1]&&(i=oe(e,t,s),a="number"),null!=i&&i==i&&("number"!==a||l||(i+=s&&s[3]||(E.cssNumber[o]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(c[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?c.setProperty(t,i):c[t]=i))}},css:function(e,t,i,n){var s,a,r,o=_(t);return st.test(t)||(t=it(o)),(r=E.cssHooks[t]||E.cssHooks[o])&&"get"in r&&(s=r.get(e,!0,i)),void 0===s&&(s=Qe(e,t,n)),"normal"===s&&t in rt&&(s=rt[t]),""===i||i?(a=parseFloat(s),!0===i||isFinite(a)?a||0:s):s}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,i){if(t)return!nt.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,i):Ne(e,at,function(){return ct(e,l,i)})},set:function(e,t,i){var n,s=We(e),a=!y.scrollboxSize()&&"absolute"===s.position,r=(a||i)&&"border-box"===E.css(e,"boxSizing",!1,s),o=i?lt(e,l,i,r,s):0;return r&&a&&(o-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(s[l])-lt(e,l,"border",!1,s)-.5)),o&&(n=te.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),ot(0,t,o)}}}),E.cssHooks.marginLeft=Ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ne(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(s,a){E.cssHooks[s+a]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[s+ie[t]+a]=n[t]||n[t-2]||n[0];return i}},"margin"!==s&&(E.cssHooks[s+a].set=ot)}),E.fn.extend({css:function(e,t){return B(this,function(e,t,i){var n,s,a={},r=0;if(Array.isArray(t)){for(n=We(e),s=t.length;r<s;r++)a[t[r]]=E.css(e,t[r],!1,n);return a}return void 0!==i?E.style(e,t,i):E.css(e,t)},e,t,1<arguments.length)}}),(E.Tween=dt).prototype={constructor:dt,init:function(e,t,i,n,s,a){this.elem=e,this.prop=i,this.easing=s||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=a||(E.cssNumber[i]?"":"px")},cur:function(){var e=dt.propHooks[this.prop];return e&&e.get?e.get(this):dt.propHooks._default.get(this)},run:function(e){var t,i=dt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):dt.propHooks._default.set(this),this}},dt.prototype.init.prototype=dt.prototype,dt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},dt.propHooks.scrollTop=dt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=dt.prototype.init,E.fx.step={};var ut,ht,pt,ft,mt=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function gt(){ht&&(!1===S.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(gt):C.setTimeout(gt,E.fx.interval),E.fx.tick())}function yt(){return C.setTimeout(function(){ut=void 0}),ut=Date.now()}function bt(e,t){var i,n=0,s={height:e};for(t=t?1:0;n<4;n+=2-t)s["margin"+(i=ie[n])]=s["padding"+i]=e;return t&&(s.opacity=s.width=e),s}function wt(e,t,i){for(var n,s=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),a=0,r=s.length;a<r;a++)if(n=s[a].call(i,t,e))return n}function xt(a,e,t){var i,r,n=0,s=xt.prefilters.length,o=E.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ut||yt(),t=Math.max(0,c.startTime+c.duration-e),i=1-(t/c.duration||0),n=0,s=c.tweens.length;n<s;n++)c.tweens[n].run(i);return o.notifyWith(a,[c,i,t]),i<1&&s?t:(s||o.notifyWith(a,[c,1,0]),o.resolveWith(a,[c]),!1)},c=o.promise({elem:a,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:ut||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=E.Tween(a,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var t=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;t<i;t++)c.tweens[t].run(1);return e?(o.notifyWith(a,[c,1,0]),o.resolveWith(a,[c,e])):o.rejectWith(a,[c,e]),this}}),d=c.props;for(!function(e,t){var i,n,s,a,r;for(i in e)if(s=t[n=_(i)],a=e[i],Array.isArray(a)&&(s=a[1],a=e[i]=a[0]),i!==n&&(e[n]=a,delete e[i]),(r=E.cssHooks[n])&&"expand"in r)for(i in a=r.expand(a),delete e[n],a)i in e||(e[i]=a[i],t[i]=s);else t[n]=s}(d,c.opts.specialEasing);n<s;n++)if(i=xt.prefilters[n].call(c,a,d,c.opts))return b(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(d,wt,c),b(c.opts.start)&&c.opts.start.call(a,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:a,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(xt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return oe(i.elem,e,te.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,s=(e=b(e)?(t=e,["*"]):e.match(j)).length;n<s;n++)i=e[n],xt.tweeners[i]=xt.tweeners[i]||[],xt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,s,a,r,o,l,c,d,u="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&re(e),v=U.get(e,"fxshow");for(n in i.queue||(null==(r=E._queueHooks(e,"fx")).unqueued&&(r.unqueued=0,o=r.empty.fire,r.empty.fire=function(){r.unqueued||o()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,E.queue(e,"fx").length||r.empty.fire()})})),t)if(s=t[n],mt.test(s)){if(delete t[n],a=a||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!v||void 0===v[n])continue;m=!0}p[n]=v&&v[n]||E.style(e,n)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(n in u&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=v&&v.display)&&(c=U.get(e,"display")),"none"===(d=E.css(e,"display"))&&(c?d=c:(ce([e],!0),c=e.style.display||c,d=E.css(e,"display"),ce([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===E.css(e,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(v?"hidden"in v&&(m=v.hidden):v=U.access(e,"fxshow",{display:c}),a&&(v.hidden=!m),m&&ce([e],!0),h.done(function(){for(n in m||ce([e]),U.remove(e,"fxshow"),p)E.style(e,n,p[n])})),l=wt(m?v[n]:0,n,h),n in v||(v[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),E.speed=function(e,t,i){var n=e&&"object"==typeof e?E.extend({},e):{complete:i||!i&&t||b(e)&&e,duration:e,easing:i&&t||t&&!b(t)&&t};return E.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in E.fx.speeds?n.duration=E.fx.speeds[n.duration]:n.duration=E.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&E.dequeue(this,n.queue)},n},E.fn.extend({fadeTo:function(e,t,i,n){return this.filter(re).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function s(){var e=xt(this,E.extend({},t),r);(a||U.get(this,"finish"))&&e.stop(!0)}var a=E.isEmptyObject(t),r=E.speed(e,i,n);return s.finish=s,a||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(s,e,a){function r(e){var t=e.stop;delete e.stop,t(a)}return"string"!=typeof s&&(a=e,e=s,s=void 0),e&&this.queue(s||"fx",[]),this.each(function(){var e=!0,t=null!=s&&s+"queueHooks",i=E.timers,n=U.get(this);if(t)n[t]&&n[t].stop&&r(n[t]);else for(t in n)n[t]&&n[t].stop&&vt.test(t)&&r(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=s&&i[t].queue!==s||(i[t].anim.stop(a),e=!1,i.splice(t,1));!e&&a||E.dequeue(this,s)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var e,t=U.get(this),i=t[r+"queue"],n=t[r+"queueHooks"],s=E.timers,a=i?i.length:0;for(t.finish=!0,E.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===r&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,n){var s=E.fn[n];E.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?s.apply(this,arguments):this.animate(bt(n,!0),e,t,i)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){E.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),E.timers=[],E.fx.tick=function(){var e,t=0,i=E.timers;for(ut=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||E.fx.stop(),ut=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ht||(ht=!0,gt())},E.fx.stop=function(){ht=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(n,e){return n=E.fx&&E.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=C.setTimeout(e,n);t.stop=function(){C.clearTimeout(i)}})},pt=S.createElement("input"),ft=S.createElement("select").appendChild(S.createElement("option")),pt.type="checkbox",y.checkOn=""!==pt.value,y.optSelected=ft.selected,(pt=S.createElement("input")).value="t",pt.type="radio",y.radioValue="t"===pt.value;var Tt,Ct=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return B(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,i){var n,s,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?E.prop(e,t,i):(1===a&&E.isXMLDoc(e)||(s=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?Tt:void 0)),void 0!==i?null===i?void E.removeAttr(e,t):s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:(e.setAttribute(t,i+""),i):!(s&&"get"in s&&null!==(n=s.get(e,t)))&&null==(n=E.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&M(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,s=t&&t.match(j);if(s&&1===e.nodeType)for(;i=s[n++];)e.removeAttribute(i)}}),Tt={set:function(e,t,i){return!1===t?E.removeAttr(e,i):e.setAttribute(i,i),i}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var r=Ct[t]||E.find.attr;Ct[t]=function(e,t,i){var n,s,a=t.toLowerCase();return i||(s=Ct[a],Ct[a]=n,n=null!=r(e,t,i)?a:null,Ct[a]=s),n}});var St=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function kt(e){return(e.match(j)||[]).join(" ")}function Mt(e){return e.getAttribute&&e.getAttribute("class")||""}function $t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}E.fn.extend({prop:function(e,t){return B(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,i){var n,s,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&E.isXMLDoc(e)||(t=E.propFix[t]||t,s=E.propHooks[t]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:e[t]=i:s&&"get"in s&&null!==(n=s.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):St.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,i,n,s,a,r,o,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,Mt(this)))});if((e=$t(t)).length)for(;i=this[l++];)if(s=Mt(i),n=1===i.nodeType&&" "+kt(s)+" "){for(r=0;a=e[r++];)n.indexOf(" "+a+" ")<0&&(n+=a+" ");s!==(o=kt(n))&&i.setAttribute("class",o)}return this},removeClass:function(t){var e,i,n,s,a,r,o,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,Mt(this)))});if(!arguments.length)return this.attr("class","");if((e=$t(t)).length)for(;i=this[l++];)if(s=Mt(i),n=1===i.nodeType&&" "+kt(s)+" "){for(r=0;a=e[r++];)for(;-1<n.indexOf(" "+a+" ");)n=n.replace(" "+a+" "," ");s!==(o=kt(n))&&i.setAttribute("class",o)}return this},toggleClass:function(s,t){var a=typeof s,r="string"==a||Array.isArray(s);return"boolean"==typeof t&&r?t?this.addClass(s):this.removeClass(s):b(s)?this.each(function(e){E(this).toggleClass(s.call(this,e,Mt(this),t),t)}):this.each(function(){var e,t,i,n;if(r)for(t=0,i=E(this),n=$t(s);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==s&&"boolean"!=a||((e=Mt(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==s&&U.get(this,"__className__")||""))})},hasClass:function(e){for(var t,i=0,n=" "+e+" ";t=this[i++];)if(1===t.nodeType&&-1<(" "+kt(Mt(t))+" ").indexOf(n))return!0;return!1}});var Pt=/\r/g;E.fn.extend({val:function(i){var n,e,s,t=this[0];return arguments.length?(s=b(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=s?i.call(this,e,E(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(n=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Pt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:kt(E.text(e))}},select:{get:function(e){for(var t,i,n=e.options,s=e.selectedIndex,a="select-one"===e.type,r=a?null:[],o=a?s+1:n.length,l=s<0?o:a?s:0;l<o;l++)if(((i=n[l]).selected||l===s)&&!i.disabled&&(!i.parentNode.disabled||!M(i.parentNode,"optgroup"))){if(t=E(i).val(),a)return t;r.push(t)}return r},set:function(e,t){for(var i,n,s=e.options,a=E.makeArray(t),r=s.length;r--;)((n=s[r]).selected=-1<E.inArray(E.valHooks.option.get(n),a))&&(i=!0);return i||(e.selectedIndex=-1),a}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;function Lt(e){e.stopPropagation()}var Dt=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,i,n){var s,a,r,o,l,c,d,u=[i||S],h=g.call(e,"type")?e.type:e,p=g.call(e,"namespace")?e.namespace.split("."):[],f=d=a=i=i||S;if(3!==i.nodeType&&8!==i.nodeType&&!Dt.test(h+E.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),o=h.indexOf(":")<0&&"on"+h,(e=e[E.expando]?e:new E.Event(h,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[h]||{},n||!c.trigger||!1!==c.trigger.apply(i,t))){if(!n&&!c.noBubble&&!m(i)){for(r=c.delegateType||h,Dt.test(r+h)||(f=f.parentNode);f;f=f.parentNode)u.push(f),a=f;a===(i.ownerDocument||S)&&u.push(a.defaultView||a.parentWindow||C)}for(s=0;(f=u[s++])&&!e.isPropagationStopped();)d=f,e.type=1<s?r:c.bindType||h,(l=(U.get(f,"events")||Object.create(null))[e.type]&&U.get(f,"handle"))&&l.apply(f,t),(l=o&&f[o])&&l.apply&&W(f)&&(e.result=l.apply(f,t),!1===e.result&&e.preventDefault());return e.type=h,n||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(u.pop(),t)||!W(i)||o&&b(i[h])&&!m(i)&&((a=i[o])&&(i[o]=null),E.event.triggered=h,e.isPropagationStopped()&&d.addEventListener(h,Lt),i[h](),e.isPropagationStopped()&&d.removeEventListener(h,Lt),E.event.triggered=void 0,a&&(i[o]=a)),e.result}},simulate:function(e,t,i){var n=E.extend(new E.Event,i,{type:e,isSimulated:!0});E.event.trigger(n,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return E.event.trigger(e,t,i,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(i,n){function s(e){E.event.simulate(n,e.target,E.event.fix(e))}E.event.special[n]={setup:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n);t||e.addEventListener(i,s,!0),U.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n)-1;t?U.access(e,n,t):(e.removeEventListener(i,s,!0),U.remove(e,n))}}});var At=C.location,zt={guid:Date.now()},Ot=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var jt=/\[\]$/,It=/\r?\n/g,Nt=/^(?:submit|button|image|reset|file)$/i,Ht=/^(?:input|select|textarea|keygen)/i;function qt(i,e,n,s){var t;if(Array.isArray(e))E.each(e,function(e,t){n||jt.test(i)?s(i,t):qt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,s)});else if(n||"object"!==x(e))s(i,e);else for(t in e)qt(i+"["+t+"]",e[t],n,s)}E.param=function(e,t){function i(e,t){var i=b(t)?t():t;s[s.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,s=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return s.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&Ht.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var i=E(this).val();return null==i?null:Array.isArray(i)?E.map(i,function(e){return{name:t.name,value:e.replace(It,"\r\n")}}):{name:t.name,value:i.replace(It,"\r\n")}}).get()}});var Ft=/%20/g,Rt=/#.*$/,Bt=/([?&])_=[^&]*/,Xt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Yt=/^(?:GET|HEAD)$/,Vt=/^\/\//,_t={},Wt={},Gt="*/".concat("*"),Ut=S.createElement("a");function Kt(a){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,s=e.toLowerCase().match(j)||[];if(b(t))for(;i=s[n++];)"+"===i[0]?(i=i.slice(1)||"*",(a[i]=a[i]||[]).unshift(t)):(a[i]=a[i]||[]).push(t)}}function Qt(t,s,a,r){var o={},l=t===Wt;function c(e){var n;return o[e]=!0,E.each(t[e]||[],function(e,t){var i=t(s,a,r);return"string"!=typeof i||l||o[i]?l?!(n=i):void 0:(s.dataTypes.unshift(i),c(i),!1)}),n}return c(s.dataTypes[0])||!o["*"]&&c("*")}function Zt(e,t){var i,n,s=E.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((s[i]?e:n=n||{})[i]=t[i]);return n&&E.extend(!0,e,n),e}Ut.href=At.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Gt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,E.ajaxSettings),t):Zt(E.ajaxSettings,e)},ajaxPrefilter:Kt(_t),ajaxTransport:Kt(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var d,u,h,i,p,n,f,m,s,a,v=E.ajaxSetup({},t),g=v.context||v,y=v.context&&(g.nodeType||g.jquery)?E(g):E.event,b=E.Deferred(),w=E.Callbacks("once memory"),x=v.statusCode||{},r={},o={},l="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(f){if(!i)for(i={};t=Xt.exec(h);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(e,t){return null==f&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==f&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)T.always(e[T.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return d&&d.abort(t),c(0,t),this}};if(b.promise(T),v.url=((e||v.url||At.href)+"").replace(Vt,At.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(j)||[""],null==v.crossDomain){n=S.createElement("a");try{n.href=v.url,n.href=n.href,v.crossDomain=Ut.protocol+"//"+Ut.host!=n.protocol+"//"+n.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=E.param(v.data,v.traditional)),Qt(_t,v,t,T),f)return T;for(s in(m=E.event&&v.global)&&0==E.active++&&E.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Yt.test(v.type),u=v.url.replace(Rt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Ft,"+")):(a=v.url.slice(u.length),v.data&&(v.processData||"string"==typeof v.data)&&(u+=(Ot.test(u)?"&":"?")+v.data,delete v.data),!1===v.cache&&(u=u.replace(Bt,"$1"),a=(Ot.test(u)?"&":"?")+"_="+zt.guid+++a),v.url=u+a),v.ifModified&&(E.lastModified[u]&&T.setRequestHeader("If-Modified-Since",E.lastModified[u]),E.etag[u]&&T.setRequestHeader("If-None-Match",E.etag[u])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+Gt+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(s,v.headers[s]);if(v.beforeSend&&(!1===v.beforeSend.call(g,T,v)||f))return T.abort();if(l="abort",w.add(v.complete),T.done(v.success),T.fail(v.error),d=Qt(Wt,v,t,T)){if(T.readyState=1,m&&y.trigger("ajaxSend",[T,v]),f)return T;v.async&&0<v.timeout&&(p=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{f=!1,d.send(r,c)}catch(e){if(f)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,i,n){var s,a,r,o,l,c=t;f||(f=!0,p&&C.clearTimeout(p),d=void 0,h=n||"",T.readyState=0<e?4:0,s=200<=e&&e<300||304===e,i&&(o=function(e,t,i){for(var n,s,a,r,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(s in o)if(o[s]&&o[s].test(n)){l.unshift(s);break}if(l[0]in i)a=l[0];else{for(s in i){if(!l[0]||e.converters[s+" "+l[0]]){a=s;break}r=r||s}a=a||r}if(a)return a!==l[0]&&l.unshift(a),i[a]}(v,T,i)),!s&&-1<E.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),o=function(e,t,i,n){var s,a,r,o,l,c={},d=e.dataTypes.slice();if(d[1])for(r in e.converters)c[r.toLowerCase()]=e.converters[r];for(a=d.shift();a;)if(e.responseFields[a]&&(i[e.responseFields[a]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=d.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(r=c[l+" "+a]||c["* "+a]))for(s in c)if((o=s.split(" "))[1]===a&&(r=c[l+" "+o[0]]||c["* "+o[0]])){!0===r?r=c[s]:!0!==c[s]&&(a=o[0],d.unshift(o[1]));break}if(!0!==r)if(r&&e.throws)t=r(t);else try{t=r(t)}catch(e){return{state:"parsererror",error:r?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(v,o,T,s),s?(v.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(E.lastModified[u]=l),(l=T.getResponseHeader("etag"))&&(E.etag[u]=l)),204===e||"HEAD"===v.type?c="nocontent":304===e?c="notmodified":(c=o.state,a=o.data,s=!(r=o.error))):(r=c,!e&&c||(c="error",e<0&&(e=0))),T.status=e,T.statusText=(t||c)+"",s?b.resolveWith(g,[a,c,T]):b.rejectWith(g,[T,c,r]),T.statusCode(x),x=void 0,m&&y.trigger(s?"ajaxSuccess":"ajaxError",[T,v,s?a:r]),w.fireWith(g,[T,c]),m&&(y.trigger("ajaxComplete",[T,v]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,i){return E.get(e,t,i,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,s){E[s]=function(e,t,i,n){return b(t)&&(n=n||i,i=t,t=void 0),E.ajax(E.extend({url:e,type:s,dataType:n,data:t,success:i},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,i){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,i)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(e){E(this).wrapInner(i.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=b(t);return this.each(function(e){E(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},ei=E.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,E.ajaxTransport(function(s){var a,r;if(y.cors||ei&&!s.crossDomain)return{send:function(e,t){var i,n=s.xhr();if(n.open(s.type,s.url,s.async,s.username,s.password),s.xhrFields)for(i in s.xhrFields)n[i]=s.xhrFields[i];for(i in s.mimeType&&n.overrideMimeType&&n.overrideMimeType(s.mimeType),s.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);a=function(e){return function(){a&&(a=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Jt[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=a(),r=n.onerror=n.ontimeout=a("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&C.setTimeout(function(){a&&r()})},a=a("abort");try{n.send(s.hasContent&&s.data||null)}catch(e){if(a)throw e}},abort:function(){a&&a()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(i){var n,s;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=E("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",s=function(e){n.remove(),s=null,e&&t("error"===e.type?404:200,e.type)}),S.head.appendChild(n[0])},abort:function(){s&&s()}}});var ti,ii=[],ni=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ii.pop()||E.expando+"_"+zt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,i){var n,s,a,r=!1!==e.jsonp&&(ni.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(e.data)&&"data");if(r||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,r?e[r]=e[r].replace(ni,"$1"+n):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return a||E.error(n+" was not called"),a[0]},e.dataTypes[0]="json",s=C[n],C[n]=function(){a=arguments},i.always(function(){void 0===s?E(C).removeProp(n):C[n]=s,e[n]&&(e.jsonpCallback=t.jsonpCallback,ii.push(n)),a&&b(s)&&s(a[0]),a=s=void 0}),"script"}),y.createHTMLDocument=((ti=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),E.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,t.head.appendChild(n)):t=S),a=!i&&[],(s=$.exec(e))?[t.createElement(s[1])]:(s=be([e],t,a),a&&a.length&&E(a).remove(),E.merge([],s.childNodes)));var n,s,a},E.fn.load=function(e,t,i){var n,s,a,r=this,o=e.indexOf(" ");return-1<o&&(n=kt(e.slice(o)),e=e.slice(0,o)),b(t)?(i=t,t=void 0):t&&"object"==typeof t&&(s="POST"),0<r.length&&E.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done(function(e){a=arguments,r.html(n?E("<div>").append(E.parseHTML(e)).find(n):e)}).always(i&&function(e,t){r.each(function(){i.apply(this,a||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,i){var n,s,a,r,o,l,c=E.css(e,"position"),d=E(e),u={};"static"===c&&(e.style.position="relative"),o=d.offset(),a=E.css(e,"top"),l=E.css(e,"left"),s=("absolute"===c||"fixed"===c)&&-1<(a+l).indexOf("auto")?(r=(n=d.position()).top,n.left):(r=parseFloat(a)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,i,E.extend({},o))),null!=t.top&&(u.top=t.top-o.top+r),null!=t.left&&(u.left=t.left-o.left+s),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),d.css(u))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],s={top:0,left:0};if("fixed"===E.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((s=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),s.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-s.top-E.css(n,"marginTop",!0),left:t.left-s.left-E.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ne})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,s){var a="pageYOffset"===s;E.fn[t]=function(e){return B(this,function(e,t,i){var n;if(m(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[s]:e[t];n?n.scrollTo(a?n.pageXOffset:i,a?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),E.each(["top","left"],function(e,i){E.cssHooks[i]=Ze(y.pixelPosition,function(e,t){if(t)return t=Qe(e,i),_e.test(t)?E(e).position()[i]+"px":t})}),E.each({Height:"height",Width:"width"},function(r,o){E.each({padding:"inner"+r,content:o,"":"outer"+r},function(n,a){E.fn[a]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),s=n||(!0===e||!0===t?"margin":"border");return B(this,function(e,t,i){var n;return m(e)?0===a.indexOf("outer")?e["inner"+r]:e.document.documentElement["client"+r]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+r],n["scroll"+r],e.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?E.css(e,t,s):E.style(e,t,i,s)},o,i?e:void 0,i)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){E.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}});var si=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var i,n,s;if("string"==typeof t&&(i=e[t],t=e,e=i),b(e))return n=o.call(arguments,2),(s=function(){return e.apply(t||this,n.concat(o.call(arguments)))}).guid=e.guid=e.guid||E.guid++,s},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=M,E.isFunction=b,E.isWindow=m,E.camelCase=_,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(si,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var ai=C.jQuery,ri=C.$;return E.noConflict=function(e){return C.$===E&&(C.$=ri),e&&C.jQuery===E&&(C.jQuery=ai),E},void 0===e&&(C.jQuery=C.$=E),E}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.FlipClock=t()}(this,function(){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,i){return(d=function(){if("undefined"!=typeof Reflect&&Reflect.construct&&!Reflect.construct.sham){if("function"==typeof Proxy)return 1;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),1}catch(e){return}}}()?Reflect.construct:function(e,t,i){var n=[null];n.push.apply(n,t);var s=new(Function.bind.apply(e,n));return i&&c(s,i.prototype),s}).apply(null,arguments)}function u(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e,t,i){return(h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,i){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(n){var s=Object.getOwnPropertyDescriptor(n,t);return s.get?s.get.call(i):s.value}})(e,t,i||e)}function p(e){throw Error(e)}function f(e){if(S(e)){for(var t=arguments.length,i=new Array(1<t?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];return e.call.apply(e,[this].concat(i))}}function i(e){return y(e=y(t=e)||t<0?Math.ceil(e):Math.floor(e))?("-"+e).toString():e;var t}function m(e){return!w(e)&&!b(e)}function t(t){return function(e){return e.map(t).reduce(function(e,t){return e.concat(t)},[])}}function v(e){return t(function(e){return e})(e)}function g(e){return t(function(e){return Array.isArray(e)?g(e):e})(e)}function y(e){return 1/Math.round(e)==-1/0}function b(e){return null===e}function w(e){return void 0===e}function x(e){return"string"==typeof e}function T(e){return e instanceof Array}function C(e){var t=a(e);return null!=e&&!T(e)&&("object"==t||"function"==t)}function S(e){return e instanceof Function}function E(e){return!isNaN(e)}var k=function(){function t(e){r(this,t),this.setAttribute(Object.assign({events:{}},e))}return s(t,[{key:"emit",value:function(e){for(var t=this,i=arguments.length,n=new Array(1<i?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];return this.events[e]&&this.events[e].forEach(function(e){e.apply(t,n)}),this}},{key:"on",value:function(e,t){return this.events[e]||(this.events[e]=[]),this.events[e].push(t),this}},{key:"off",value:function(e,t){return this.events[e]&&t?this.events[e]=this.events[e].filter(function(e){return e!==t}):this.events[e]=[],this}},{key:"once",value:function(e,t){var i,n,s=this;return i=t,n=function(){return s.off(e,t)},t=function(){return n(i())},this.on(e,t,!0)}},{key:"getAttribute",value:function(e){return this.hasOwnProperty(e)?this[e]:null}},{key:"getAttributes",value:function(){var t=this,i={};return Object.getOwnPropertyNames(this).forEach(function(e){i[e]=t.getAttribute(e)}),i}},{key:"getPublicAttributes",value:function(){var i=this;return Object.keys(this.getAttributes()).filter(function(e){return!e.match(/^\$/)}).reduce(function(e,t){return e[t]=i.getAttribute(t),e},{})}},{key:"setAttribute",value:function(e,t){C(e)?this.setAttributes(e):this[e]=t}},{key:"setAttributes",value:function(e){for(var t in e)this.setAttribute(t,e[t])}},{key:"callback",value:function(e){return f.call(this,e)}},{key:"name",get:function(){return this.constructor.defineName instanceof Function||p("Every class must define its name."),this.constructor.defineName()}},{key:"events",get:function(){return this.$events||{}},set:function(e){this.$events=e}}],[{key:"make",value:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return d(this,t)}}]),t}();function M(e,i){return i=Object.assign({minimumDigits:0,prependLeadingZero:!0},i),function(e,t){var i=g(e).length;if(i<t)for(var n=0;n<t-i;n++)e[0].unshift("0");return e}(v([e]).map(function(e){return v(g([e]).map(function(e){return t=e,(i.prependLeadingZero&&1===t.toString().split("").length?"0":"").concat(t).split("");var t}))}),i.minimumDigits||0)}var $=[{min:48,max:57},{min:65,max:90},{min:97,max:122}];function P(e,t){switch(t){case"number":return parseFloat(e)}return e}function L(e,t){return String.fromCharCode(t(function(e){for(var t in $){var i=e.toString().charCodeAt(0);if($[t].min<=i&&$[t].max>=i)return $[t]}return null}(e),e.charCodeAt(0)))}var D=function(){function n(e,t){var i;return r(this,n),(i=u(this,l(n).call(this,Object.assign({format:function(e){return e},prependLeadingZero:!0,minimumDigits:0},t)))).value||(i.value=e),i}function e(){return t.apply(this,arguments)}var t;return o(n,k),s(n,[{key:"isNaN",value:(t=function(){return isNaN(this.value)},e.toString=function(){return t.toString()},e)},{key:"isNumber",value:function(){return E()}},{key:"clone",value:function(e,t){return new this.constructor(e,Object.assign(this.getPublicAttributes(),t))}},{key:"digits",get:function(){return this.$digits},set:function(e){this.$digits=e,this.minimumDigits=Math.max(this.minimumDigits,g(e).length)}},{key:"value",get:function(){return this.$value},set:function(e){this.$value=e,this.digits=M(this.format(e),{minimumDigits:this.minimumDigits,prependLeadingZero:this.prependLeadingZero})}}],[{key:"defineName",value:function(){return"FaceValue"}}]),n}();function A(i){for(var n=!1,e=arguments.length,t=new Array(1<e?e-1:0),s=1;s<e;s++)t[s-1]=arguments[s];return v(t).forEach(function(e){var t;(b(i)&&b(e)||C(e)&&i instanceof e||S(e)&&!((t=e)instanceof Function&&t.name)&&!0===e(i)||x(e)&&a(i)===e)&&(n=!0)}),n}var z={className:"The className() is not defined.",items:"The items property must be an array.",theme:"The theme property must be an object.",language:"The language must be an object.",date:"The value must be an instance of a Date.",face:"The face must be an instance of a Face class.",element:"The element must be an instance of an HTMLElement",faceValue:"The face must be an instance of a FaceValue class.",timer:"The timer property must be an instance of a Timer class."},O=function(){function n(e,t){var i;return r(this,n),e instanceof D||!C(e)||(t=e,e=void 0),(i=u(this,l(n).call(this))).setAttributes(Object.assign({autoStart:!0,countdown:!1,animationRate:500},i.defaultAttributes(),t||{})),(b(e)||w(e))&&(e=i.defaultValue()),e&&(i.value=e),i}return o(n,k),s(n,[{key:"interval",value:function(e,t){return this.countdown?this.decrement(e):this.increment(e),f.call(this,t),this.shouldStop(e)&&e.stop(),this.emit("interval")}},{key:"shouldStop",value:function(e){return!w(this.stopAt)&&this.stopAt===e.value.value}},{key:"format",value:function(e,t){return t}},{key:"defaultValue",value:function(){}},{key:"defaultAttributes",value:function(){}},{key:"defaultDataType",value:function(){}},{key:"increment",value:function(){}},{key:"decrement",value:function(){}},{key:"started",value:function(){}},{key:"stopped",value:function(){}},{key:"reset",value:function(){}},{key:"initialized",value:function(){}},{key:"rendered",value:function(){}},{key:"mounted",value:function(e){this.autoStart&&e.timer.isStopped&&window.requestAnimationFrame(function(){return e.start(e)})}},{key:"createFaceValue",value:function(t,e){var i=this;return D.make(S(e)&&!e.name?e():e,{minimumDigits:this.minimumDigits,format:function(e){return i.format(t,e)}})}},{key:"dataType",get:function(){return this.defaultDataType()}},{key:"value",get:function(){return this.$value},set:function(e){e instanceof D||(e=this.createFaceValue(e)),this.$value=e}},{key:"stopAt",get:function(){return this.$stopAt},set:function(e){this.$stopAt=e}},{key:"originalValue",get:function(){return this.$originalValue},set:function(e){this.$originalValue=e}}]),n}(),e=Object.freeze({dictionary:{years:"Ø³ÙÙØ§Øª",months:"Ø´ÙÙØ±",days:"Ø£ÙØ§Ù",hours:"Ø³Ø§Ø¹Ø§Øª",minutes:"Ø¯ÙØ§Ø¦Ù",seconds:"Ø«ÙØ§ÙÙ"},aliases:["ar","ar-ar","arabic"]}),j=Object.freeze({dictionary:{years:"Anys",months:"Mesos",days:"Dies",hours:"Hores",minutes:"Minuts",seconds:"Segons"},aliases:["ca","ca-es","catalan"]}),I=Object.freeze({dictionary:{years:"Roky",months:"MÄsÃ­ce",days:"Dny",hours:"Hodiny",minutes:"Minuty",seconds:"Sekundy"},aliases:["cs","cs-cz","cz","cz-cs","czech"]}),N=Object.freeze({dictionary:{years:"Ãr",months:"MÃ¥neder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},aliases:["da","da-dk","danish"]}),H=Object.freeze({dictionary:{years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},aliases:["de","de-de","german"]}),q=Object.freeze({dictionary:{years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},aliases:["en","en-us","english"]}),F=Object.freeze({dictionary:{years:"AÃ±os",months:"Meses",days:"DÃ­as",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},aliases:["es","es-es","spanish"]}),R=Object.freeze({dictionary:{years:"Ø³Ø§Ù",months:"ÙØ§Ù",days:"Ø±ÙØ²",hours:"Ø³Ø§Ø¹Øª",minutes:"Ø¯ÙÛÙÙ",seconds:"Ø«Ø§ÙÛÙ"},aliases:["fa","fa-ir","persian"]}),B=Object.freeze({dictionary:{years:"Vuotta",months:"Kuukautta",days:"PÃ¤ivÃ¤Ã¤",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},aliases:["fi","fi-fi","finnish"]}),X=Object.freeze({dictionary:{years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},aliases:["fr","fr-ca","french"]}),Y=Object.freeze({dictionary:{years:"×©× ××",months:"××××©",days:"××××",hours:"×©×¢××ª",minutes:"××§××ª",seconds:"×©× ×××ª"},aliases:["il","he-il","hebrew"]}),V=Object.freeze({dictionary:{years:"Ãv",months:"HÃ³nap",days:"Nap",hours:"Ãra",minutes:"Perc",seconds:"MÃ¡sodperc"},aliases:["hu","hu-hu","hungarian"]}),_=Object.freeze({dictionary:{years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},aliases:["da","da-dk","danish"]}),W=Object.freeze({dictionary:{years:"å¹´",months:"æ",days:"æ¥",hours:"æ",minutes:"å",seconds:"ç§"},aliases:["jp","ja-jp","japanese"]}),G=Object.freeze({dictionary:{years:"ë",months:"ì",days:"ì¼",hours:"ì",minutes:"ë¶",seconds:"ì´"},aliases:["ko","ko-kr","korean"]}),U=Object.freeze({dictionary:{years:"Gadi",months:"MÄneÅ¡i",days:"Dienas",hours:"Stundas",minutes:"MinÅ«tes",seconds:"Sekundes"},aliases:["lv","lv-lv","latvian"]}),K=Object.freeze({dictionary:{years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},aliases:["nl","nl-be","dutch"]}),Q=Object.freeze({dictionary:{years:"Ãr",months:"MÃ¥neder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},aliases:["no","nb","no-nb","norwegian"]}),Z=Object.freeze({dictionary:{years:"Lat",months:"MiesiÄcy",days:"Dni",hours:"Godziny",minutes:"Minuty",seconds:"Sekundy"},aliases:["pl","pl-pl","polish"]}),J=Object.freeze({dictionary:{years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},aliases:["pt","pt-br","portuguese"]}),ee=Object.freeze({dictionary:{years:"Ani",months:"Luni",days:"Zile",hours:"Ore",minutes:"Minute",seconds:"sSecunde"},aliases:["ro","ro-ro","romana"]}),te=Object.freeze({dictionary:{years:"Ð»ÐµÑ",months:"Ð¼ÐµÑÑÑÐµÐ²",days:"Ð´Ð½ÐµÐ¹",hours:"ÑÐ°ÑÐ¾Ð²",minutes:"Ð¼Ð¸Ð½ÑÑ",seconds:"ÑÐµÐºÑÐ½Ð´"},aliases:["ru","ru-ru","russian"]}),ie=Object.freeze({dictionary:{years:"Roky",months:"Mesiace",days:"Dni",hours:"Hodiny",minutes:"MinÃºty",seconds:"Sekundy"},aliases:["sk","sk-sk","slovak"]}),ne=Object.freeze({dictionary:{years:"Ãr",months:"MÃ¥nader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},aliases:["sv","sv-se","swedish"]}),se=Object.freeze({dictionary:{years:"à¸à¸µ",months:"à¹à¸à¸·à¸­à¸",days:"à¸§à¸±à¸",hours:"à¸à¸±à¹à¸§à¹à¸¡à¸",minutes:"à¸à¸²à¸à¸µ",seconds:"à¸§à¸´à¸à¸²à¸à¸µ"},aliases:["th","th-th","thai"]}),ae=Object.freeze({dictionary:{years:"YÄ±l",months:"Ay",days:"GÃ¼n",hours:"Saat",minutes:"Dakika",seconds:"Saniye"},aliases:["tr","tr-tr","turkish"]}),re=Object.freeze({dictionary:{years:"ÑÐ¾ÐºÐ¸",months:"Ð¼ÑÑÑÑÑ",days:"Ð´Ð½Ñ",hours:"Ð³Ð¾Ð´Ð¸Ð½Ð¸",minutes:"ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",seconds:"ÑÐµÐºÑÐ½Ð´Ð¸"},aliases:["ua","ua-ua","ukraine"]}),oe=Object.freeze({dictionary:{years:"NÄm",months:"ThÃ¡ng",days:"NgÃ y",hours:"Giá»",minutes:"PhÃºt",seconds:"GiÃ¢y"},aliases:["vn","vn-vn","vietnamese"]}),le=Object.freeze({dictionary:{years:"å¹´",months:"æ",days:"æ¥",hours:"æ¶",minutes:"å",seconds:"ç§"},aliases:["zh","zh-cn","chinese"]}),ce=Object.freeze({dictionary:{years:"å¹´",months:"æ",days:"æ¥",hours:"æ",minutes:"å",seconds:"ç§"},aliases:["zh-tw"]}),de=Object.freeze({Arabic:e,Catalan:j,Czech:I,Danish:N,German:H,English:q,Spanish:F,Persian:R,Finnish:B,French:X,Hebrew:Y,Hungarian:V,Italian:_,Japanese:W,Korean:G,Latvian:U,Dutch:K,Norwegian:Q,Polish:Z,Portuguese:J,Romanian:ee,Russian:te,Slovak:ie,Swedish:ne,Thai:se,Turkish:ae,Ukrainian:re,Vietnamese:oe,Chinese:le,TraditionalChinese:ce});function ue(t){return t?de[t.toLowerCase()]||Object.values(de).find(function(e){return-1!==e.aliases.indexOf(t)}):null}function he(t,e){return T(e)&&e.filter(m).forEach(function(e){e instanceof HTMLElement&&t.appendChild(e)}),t}function pe(e,t,i){return e instanceof HTMLElement||(e=document.createElement(e)),function(e,t){if(C(t))for(var i in t)e.setAttribute(i,t[i])}(e,C(t)?t:i),C(t)||T(t)?he(e,t):e.innerHTML=t,e}var fe=function(){function i(e){var t;if(r(this,i),(t=u(this,l(i).call(this,Object.assign({parent:null},e)))).theme||p("".concat(t.name," does not have a theme defined.")),t.language||p("".concat(t.name," does not have a language defined.")),!t.theme[t.name])throw new Error("".concat(t.name," cannot be rendered because it has no template."));return t}return o(i,k),s(i,[{key:"translate",value:function(e){return t=e,i=this.language,((n=x(i)?ue(i):i).dictionary||n)[t]||t;var t,i,n}},{key:"t",value:function(e){return this.translate(e)}},{key:"render",value:function(){var e,t,i=pe("div",{class:"flip-clock"===this.className?this.className:"flip-clock-"+this.className});return this.theme[this.name](i,this),this.el?this.el.innerHTML!==i.innerHTML&&(this.el=(e=i,(t=this.el).parentNode?(t.parentNode.replaceChild(e,t),e):t)):this.el=i,this.el}},{key:"mount",value:function(e,t){var i=1<arguments.length&&void 0!==t&&t;return this.render(),this.parent=e,i?this.parent.insertBefore(this.el,i):this.parent.appendChild(this.el),this.el}},{key:"className",get:function(){return this.constructor.defineName().replace(/([a-z])([A-Z])/g,"$1-$2").replace(/\s+/g,"-").toLowerCase()}},{key:"el",get:function(){return this.$el},set:function(e){A(e,null,HTMLElement)||p(z.element),this.$el=e}},{key:"parent",get:function(){return this.$parent},set:function(e){this.$parent=e}},{key:"theme",get:function(){return this.$theme},set:function(e){A(e,"object")||p(z.value),this.$theme=e}},{key:"language",get:function(){return this.$language},set:function(e){x(e)&&(e=ue(e)),A(e,"object")||p(z.language),this.$language=e}}]),i}(),me=function(){function e(){return r(this,e),u(this,l(e).apply(this,arguments))}return o(e,fe),s(e,null,[{key:"defineName",value:function(){return"Divider"}}]),e}(),ve=function(){function i(e,t){return r(this,i),u(this,l(i).call(this,Object.assign({value:e},C(e)?e:null,t)))}return o(i,fe),s(i,null,[{key:"defineName",value:function(){return"ListItem"}}]),i}(),ge=function(){function i(e,t){return r(this,i),u(this,l(i).call(this,Object.assign({value:e,items:[]},C(e)?e:null,t)))}return o(i,fe),s(i,[{key:"createListItem",value:function(e,t){var i=new ve(e,Object.assign({theme:this.theme,language:this.language},t));return this.$items.push(i),i}},{key:"value",get:function(){return this.$value},set:function(e){this.$value=e}},{key:"items",get:function(){return this.$items},set:function(e){this.$items=e}}],[{key:"defineName",value:function(){return"List"}}]),i}(),ye=function(){function i(e,t){return r(this,i),u(this,l(i).call(this,Object.assign({items:T(e)?e:[]},C(e)?e:null,t)))}return o(i,fe),s(i,null,[{key:"defineName",value:function(){return"Group"}}]),i}(),be=function(){function i(e,t){return r(this,i),u(this,l(i).call(this,Object.assign({label:e},C(e)?e:null,t)))}return o(i,fe),s(i,null,[{key:"defineName",value:function(){return"Label"}}]),i}(),we=function(){function t(e){return r(this,t),u(this,l(t).call(this,Object.assign({count:0,handle:null,started:null,running:!1,interval:E(e)?e:null},C(e)?e:null)))}return o(t,k),s(t,[{key:"reset",value:function(e){var t=this;return this.stop(function(){t.count=0,t.start(function(){return f.call(t,e)}),t.emit("reset")}),this}},{key:"start",value:function(t){var i=this;this.started=new Date,this.lastLoop=Date.now(),this.running=!0,this.emit("start");return function e(){return Date.now()-i.lastLoop>=i.interval&&(f.call(i,t),i.lastLoop=Date.now(),i.emit("interval"),i.count++),i.handle=window.requestAnimationFrame(e),i}()}},{key:"stop",value:function(e){var t=this;return this.isRunning&&setTimeout(function(){window.cancelAnimationFrame(t.handle),t.running=!1,f.call(t,e),t.emit("stop")}),this}},{key:"elapsed",get:function(){return this.lastLoop?this.lastLoop-(this.started?this.started.getTime():(new Date).getTime()):0}},{key:"isRunning",get:function(){return!0===this.running}},{key:"isStopped",get:function(){return!1===this.running}}],[{key:"defineName",value:function(){return"Timer"}}]),t}(),xe=function(){function e(){return r(this,e),u(this,l(e).apply(this,arguments))}return o(e,O),s(e,[{key:"increment",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:1;e.value=this.value.value+i}},{key:"decrement",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:1;e.value=this.value.value-i}}],[{key:"defineName",value:function(){return"Counter"}}]),e}(),Te=function(){function e(){return r(this,e),u(this,l(e).apply(this,arguments))}return o(e,O),s(e,[{key:"defaultDataType",value:function(){return Date}},{key:"defaultAttributes",value:function(){return{showSeconds:!0,showLabels:!0}}},{key:"shouldStop",value:function(e){if(b(e.stopAt)||w(e.stopAt))return!1;if(this.stopAt instanceof Date)return this.countdown?this.stopAt.getTime()>=this.value.value.getTime():this.stopAt.getTime()<=this.value.value.getTime();if(E(this.stopAt)){var t=Math.floor((this.value.value.getTime()-this.originalValue.getTime())/1e3);return this.countdown?this.stopAt>=t:this.stopAt<=t}throw new Error("the stopAt property must be an instance of Date or Number.")}},{key:"increment",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()+i+((new Date).getTime()-e.timer.lastLoop))}},{key:"decrement",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()-i-((new Date).getTime()-e.timer.lastLoop))}},{key:"format",value:function(e,t){var i=e.timer.isRunning?e.timer.started:new Date(Date.now()-50);return[[this.getMinutes(t,i)],this.showSeconds?[this.getSeconds(t,i)]:null].filter(m)}},{key:"getMinutes",value:function(e,t){return i(this.getTotalSeconds(e,t)/60)}},{key:"getSeconds",value:function(e,t){var i=this.getTotalSeconds(e,t);return Math.abs(Math.ceil(60===i?0:i%60))}},{key:"getTotalSeconds",value:function(e,t){return e.getTime()===t.getTime()?0:Math.round((e.getTime()-t.getTime())/1e3)}}],[{key:"defineName",value:function(){return"MinuteCounter"}}]),e}(),Ce=function(){function i(){return r(this,i),u(this,l(i).apply(this,arguments))}return o(i,Te),s(i,[{key:"format",value:function(e,t){var i=e.timer.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,r=[[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&r.push([this.getSeconds(s,a)]),r}},{key:"getMinutes",value:function(e,t){return Math.abs(h(l(i.prototype),"getMinutes",this).call(this,e,t)%60)}},{key:"getHours",value:function(e,t){return Math.floor(this.getTotalSeconds(e,t)/60/60)}}],[{key:"defineName",value:function(){return"HourCounter"}}]),i}(),Se=function(){function i(){return r(this,i),u(this,l(i).apply(this,arguments))}return o(i,Ce),s(i,[{key:"format",value:function(e,t){var i=e.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,r=[[this.getDays(s,a)],[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&r.push([this.getSeconds(s,a)]),r}},{key:"getDays",value:function(e,t){return Math.floor(this.getTotalSeconds(e,t)/60/60/24)}},{key:"getHours",value:function(e,t){return Math.abs(h(l(i.prototype),"getHours",this).call(this,e,t)%24)}}],[{key:"defineName",value:function(){return"DayCounter"}}]),i}(),Ee=function(){function e(){return r(this,e),u(this,l(e).apply(this,arguments))}return o(e,O),s(e,[{key:"defaultDataType",value:function(){return Date}},{key:"defaultValue",value:function(){return new Date}},{key:"defaultAttributes",value:function(){return{showSeconds:!0,showLabels:!1}}},{key:"format",value:function(e,t){var i=[[(t=t||new Date).getHours()],[t.getMinutes()]];return this.showSeconds&&i.push([t.getSeconds()]),i}},{key:"increment",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()+i+((new Date).getTime()-e.timer.lastLoop))}},{key:"decrement",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()-i-((new Date).getTime()-e.timer.lastLoop))}}],[{key:"defineName",value:function(){return"TwentyFourHourClock"}}]),e}(),ke=function(){function e(){return r(this,e),u(this,l(e).apply(this,arguments))}return o(e,Ee),s(e,[{key:"defaultAttributes",value:function(){return{showLabels:!1,showSeconds:!0,showMeridium:!0}}},{key:"format",value:function(e,t){var i=(t=t||new Date).getHours(),n=[12<i?i-12:0===i?12:i,t.getMinutes()];return this.meridium=12<i?"pm":"am",this.showSeconds&&n.push(t.getSeconds()),n}}],[{key:"defineName",value:function(){return"TwelveHourClock"}}]),e}(),Me=function(){function i(){return r(this,i),u(this,l(i).apply(this,arguments))}return o(i,Se),s(i,[{key:"format",value:function(e,t){var i=e.timer.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,r=[[this.getWeeks(s,a)],[this.getDays(s,a)],[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&r.push([this.getSeconds(s,a)]),r}},{key:"getWeeks",value:function(e,t){return Math.floor(this.getTotalSeconds(e,t)/60/60/24/7)}},{key:"getDays",value:function(e,t){return Math.abs(h(l(i.prototype),"getDays",this).call(this,e,t)%7)}}],[{key:"defineName",value:function(){return"WeekCounter"}}]),i}(),$e=function(){function i(){return r(this,i),u(this,l(i).apply(this,arguments))}return o(i,Me),s(i,[{key:"format",value:function(e,t){var i=e.timer.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,r=[[this.getYears(s,a)],[this.getWeeks(s,a)],[this.getDays(s,a)],[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&r.push([this.getSeconds(s,a)]),r}},{key:"getYears",value:function(e,t){return Math.floor(Math.max(0,this.getTotalSeconds(e,t)/60/60/24/7/52))}},{key:"getWeeks",value:function(e,t){return Math.abs(h(l(i.prototype),"getWeeks",this).call(this,e,t)%52)}}],[{key:"defineName",value:function(){return"YearCounter"}}]),i}(),Pe=Object.freeze({Counter:xe,DayCounter:Se,MinuteCounter:Te,HourCounter:Ce,TwelveHourClock:ke,TwentyFourHourClock:Ee,WeekCounter:Me,YearCounter:$e});function Le(e,t){return e?e.childNodes?e.childNodes[t]:e[t]:null}function De(e,t){t.createDivider().mount(e,e.childNodes[1]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[3]),t.face.showLabels&&(t.createLabel("hours").mount(e.childNodes[0]),t.createLabel("minutes").mount(e.childNodes[2]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[4]))}var Ae={face:xe,theme:{Divider:function(e,t){he(e,[pe("div",{class:"flip-clock-dot top"}),pe("div",{class:"flip-clock-dot bottom"})])},FlipClock:function(e,r){he(e,r.value.digits.map(function(e,t){var a=Le(r.el?r.el.querySelectorAll(".flip-clock-group"):null,t),i=e.map(function(e,t){var i,n=Le(a?a.querySelectorAll(".flip-clock-list"):null,t),s=(i=n)?i.querySelector(".flip-clock-list-item:first-child .top").innerHTML:null;return r.createList(e,{domValue:s,countdown:r.countdown,animationRate:r.face.animationRate||r.face.delay})});return r.createGroup(i)}).map(function(e){return e.render()}))},Group:function(e,t){he(e,t.items.map(function(e){return e.render()}))},Label:function(e,t){e.innerHTML=t.t(t.label)},List:function(e,t){var i,n,s=t.domValue||(t.countdown?P((i=t.value).toString().split("").map(function(e){return L(e,function(e,t){return!e||t<e.max?t+1:e.min})}).join(""),a(i)):P((n=t.value).toString().split("").map(function(e){return L(e,function(e,t){return!e||t>e.min?t-1:e.max})}).join(""),a(n)));t.domValue&&t.domValue!==t.value&&e.classList.add("flip"),e.style.animationDelay="".concat(t.animationRate/2,"ms"),e.style.animationDuration="".concat(t.animationRate/2,"ms"),t.items=[t.createListItem(t.value,{active:!0}),t.createListItem(s,{active:!1})],he(e,t.items.map(function(e){return e.render()}))},ListItem:function(e,t){var i=!0===t.active?"active":!1===t.active?"before":null;e.classList.add(i),he(e,[pe("div",[pe("div",t.value,{class:"top"}),pe("div",t.value,{class:"bottom"})],{class:"flip-clock-list-item-inner"})])},faces:Object.freeze({DayCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.createDivider().mount(e,e.childNodes[3]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[5]),t.face.showLabels&&(t.createLabel("days").mount(e.childNodes[0]),t.createLabel("hours").mount(e.childNodes[2]),t.createLabel("minutes").mount(e.childNodes[4]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[6]))},HourCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[3]),t.face.showLabels&&(t.createLabel("hours").mount(e.childNodes[0]),t.createLabel("minutes").mount(e.childNodes[2]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[4]))},MinuteCounter:function(e,t){t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[1]),t.face.showLabels&&(t.createLabel("minutes").mount(e.childNodes[0]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[2]))},TwelveHourClock:function(e,t){var i,n;De(e,t),t.face.showMeridium&&t.face.meridium&&(i=t.createLabel(t.face.meridium),n=e.childNodes[e.childNodes.length-1],i.mount(n).classList.add("flip-clock-meridium"))},TwentyFourHourClock:De,WeekCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.createDivider().mount(e,e.childNodes[3]),t.createDivider().mount(e,e.childNodes[5]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[7]),t.face.showLabels&&(t.createLabel("weeks").mount(e.childNodes[0]),t.createLabel("days").mount(e.childNodes[2]),t.createLabel("hours").mount(e.childNodes[4]),t.createLabel("minutes").mount(e.childNodes[6]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[8]))},YearCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.createDivider().mount(e,e.childNodes[3]),t.createDivider().mount(e,e.childNodes[5]),t.createDivider().mount(e,e.childNodes[7]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[9]),t.face.showLabels&&(t.createLabel("years").mount(e.childNodes[0]),t.createLabel("weeks").mount(e.childNodes[2]),t.createLabel("days").mount(e.childNodes[4]),t.createLabel("hours").mount(e.childNodes[6]),t.createLabel("minutes").mount(e.childNodes[8]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[10]))}})},language:q};return function(){function a(e,t,i){var n;r(this,a),A(e,HTMLElement)||p(z.element),C(t)&&!i&&(i=t,t=void 0);var s=i.face||Ae.face;return delete i.face,(n=u(this,l(a).call(this,Object.assign({originalValue:t,theme:Ae.theme,language:Ae.language,timer:we.make(i.interval||1e3)},i)))).face||(n.face=s),n.mount(e),n}return o(a,fe),s(a,[{key:"mount",value:function(e){return h(l(a.prototype),"mount",this).call(this,e),this.face.mounted(this),this}},{key:"render",value:function(){return h(l(a.prototype),"render",this).call(this),this.theme.faces[this.face.name]&&this.theme.faces[this.face.name](this.el,this),this.face.rendered(this),this.el}},{key:"start",value:function(e){var t=this;return this.timer.started||(this.value=this.originalValue),w(this.face.stopAt)&&(this.face.stopAt=this.stopAt),w(this.face.originalValue)&&(this.face.originalValue=this.originalValue),this.timer.start(function(){t.face.interval(t,e)}),this.face.started(this),this.emit("start")}},{key:"stop",value:function(e){return this.timer.stop(e),this.face.stopped(this),this.emit("stop")}},{key:"reset",value:function(e){var t=this;return this.value=this.originalValue,this.timer.reset(function(){return t.interval(t,e)}),this.face.reset(this),this.emit("reset")}},{key:"increment",value:function(e){return this.face.increment(this,e),this}},{key:"decrement",value:function(e){return this.face.decrement(this,e),this}},{key:"createDivider",value:function(e){return me.make(Object.assign({theme:this.theme,language:this.language},e))}},{key:"createList",value:function(e,t){return ge.make(e,Object.assign({theme:this.theme,language:this.language},t))}},{key:"createLabel",value:function(e,t){return be.make(e,Object.assign({theme:this.theme,language:this.language},t))}},{key:"createGroup",value:function(e,t){return ye.make(e,Object.assign({theme:this.theme,language:this.language},t))}},{key:"face",get:function(){return this.$face},set:function(e){A(e,[O,"string","function"])||p(z.face),this.$face=(Pe[e]||e).make(Object.assign(this.getPublicAttributes(),{originalValue:this.face?this.face.originalValue:void 0})),this.$face.initialized(this),this.value?this.$face.value=this.face.createFaceValue(this,this.value.value):this.value||(this.value=this.originalValue),this.el&&this.render()}},{key:"stopAt",get:function(){return S(this.$stopAt)?this.$stopAt(this):this.$stopAt},set:function(e){this.$stopAt=e}},{key:"timer",get:function(){return this.$timer},set:function(e){A(e,we)||p(z.timer),this.$timer=e}},{key:"value",get:function(){return this.face?this.face.value:null},set:function(e){if(!this.face)throw new Error("A face must be set before setting a value.");e instanceof D?this.face.value=e:this.value?this.face.value=this.face.value.clone(e):this.face.value=this.face.createFaceValue(this,e),this.el&&this.render()}},{key:"originalValue",get:function(){return S(this.$originalValue)&&!this.$originalValue.name?this.$originalValue():w(this.$originalValue)||b(this.$originalValue)?this.face?this.face.defaultValue():void 0:this.$originalValue},set:function(e){this.$originalValue=e}}],[{key:"defineName",value:function(){return"FlipClock"}},{key:"setDefaultFace",value:function(e){A(e,O)||p(z.face),Ae.face=e}},{key:"setDefaultTheme",value:function(e){A(e,"object")||p(z.theme),Ae.theme=e}},{key:"setDefaultLanguage",value:function(e){A(e,"object")||p(z.language),Ae.language=e}},{key:"defaults",get:function(){return Ae}}]),a}()}),function(l,u,m,v){"use strict";var e,s,r,a,h,t,c,p,d,n,i,o,f,g;function y(e,t){var i,n,s,a=[],r=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=d(e.data.options,t)),i=t.$target||m(e.currentTarget).trigger("blur"),(s=m.fancybox.getInstance())&&s.$trigger&&s.$trigger.is(i)||(a=t.selector?m(t.selector):(n=i.attr("data-fancybox")||"")?(a=e.data?e.data.items:[]).length?a.filter('[data-fancybox="'+n+'"]'):m('[data-fancybox="'+n+'"]'):[i],(r=m(a).index(i))<0&&(r=0),(s=m.fancybox.open(a,t,r)).$trigger=i))}l.console=l.console||{info:function(e){}},m&&(m.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:m.noop,beforeLoad:m.noop,afterLoad:m.noop,beforeShow:m.noop,afterShow:m.noop,beforeClose:m.noop,afterClose:m.noop,onActivate:m.noop,onDeactivate:m.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=m(l),r=m(u),a=0,h=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},c=function(){var e,t=u.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(t.style[e]!==v)return i[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},d=function(e,t){var i=m.extend(!0,{},e,t);return m.each(t,function(e,t){m.isArray(t)&&(i[e]=t)}),i},n=function(e,t,i){var n=this;n.opts=d({index:i},m.fancybox.defaults),m.isPlainObject(t)&&(n.opts=d(n.opts,t)),m.fancybox.isMobile&&(n.opts=d(n.opts,n.opts.mobile)),n.id=n.opts.id||++a,n.currIndex=parseInt(n.opts.index,10)||0,n.prevIndex=null,n.prevPos=null,n.currPos=0,n.firstRun=!0,n.group=[],n.slides={},n.addContent(e),n.group.length&&n.init()},m.extend(n.prototype,{init:function(){var t,i,n=this,s=n.group[n.currIndex].opts;s.closeExisting&&m.fancybox.close(!0),m("body").addClass("fancybox-active"),!m.fancybox.getInstance()&&!1!==s.hideScrollbar&&!m.fancybox.isMobile&&u.body.scrollHeight>l.innerHeight&&(m("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-u.documentElement.clientWidth)+"px;}</style>"),m("body").addClass("compensate-for-scrollbar")),i="",m.each(s.buttons,function(e,t){i+=s.btnTpl[t]||""}),t=m(n.translate(n,s.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",s.btnTpl.arrowLeft+s.btnTpl.arrowRight))).attr("id","fancybox-container-"+n.id).addClass(s.baseClass).data("FancyBox",n).appendTo(s.parentEl),n.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){n.$refs[e]=t.find(".fancybox-"+e)}),n.trigger("onInit"),n.activate(),n.jumpTo(n.currIndex)},translate:function(e,t){var i=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return i[t]===v?e:i[t]})},addContent:function(e){var t,c=this,i=m.makeArray(e);m.each(i,function(e,t){var i,n,s,a,r,o={},l={};m.isPlainObject(t)?l=(o=t).opts||t:"object"===m.type(t)&&m(t).length?(l=(i=m(t)).data()||{},(l=m.extend(!0,{},l,l.options)).$orig=i,o.src=c.opts.src||l.src||i.attr("href"),o.type||o.src||(o.type="inline",o.src=t)):o={type:"html",src:t+""},o.opts=m.extend(!0,{},c.opts,l),m.isArray(l.buttons)&&(o.opts.buttons=l.buttons),m.fancybox.isMobile&&o.opts.mobile&&(o.opts=d(o.opts,o.opts.mobile)),n=o.type||o.opts.type,a=o.src||"",!n&&a&&((s=a.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",o.opts.video.format||(o.opts.video.format="video/"+("ogv"===s[1]?"ogg":s[1]))):a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":a.match(/\.(pdf)((\?|#).*)?$/i)?(n="iframe",o=m.extend(!0,o,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===a.charAt(0)&&(n="inline")),n?o.type=n:c.trigger("objectNeedsType",o),o.contentType||(o.contentType=-1<m.inArray(o.type,["html","inline","ajax"])?"html":o.type),o.index=c.group.length,"auto"==o.opts.smallBtn&&(o.opts.smallBtn=-1<m.inArray(o.type,["html","inline","ajax"])),"auto"===o.opts.toolbar&&(o.opts.toolbar=!o.opts.smallBtn),o.$thumb=o.opts.$thumb||null,o.opts.$trigger&&o.index===c.opts.index&&(o.$thumb=o.opts.$trigger.find("img:first"),o.$thumb.length&&(o.opts.$orig=o.opts.$trigger)),o.$thumb&&o.$thumb.length||!o.opts.$orig||(o.$thumb=o.opts.$orig.find("img:first")),o.$thumb&&!o.$thumb.length&&(o.$thumb=null),o.thumb=o.opts.thumb||(o.$thumb?o.$thumb[0].src:null),"function"===m.type(o.opts.caption)&&(o.opts.caption=o.opts.caption.apply(t,[c,o])),"function"===m.type(c.opts.caption)&&(o.opts.caption=c.opts.caption.apply(t,[c,o])),o.opts.caption instanceof m||(o.opts.caption=o.opts.caption===v?"":o.opts.caption+""),"ajax"===o.type&&1<(r=a.split(/\s+/,2)).length&&(o.src=r.shift(),o.opts.filter=r.shift()),o.opts.modal&&(o.opts=m.extend(!0,o.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(o)}),Object.keys(c.slides).length&&(c.updateControls(),(t=c.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var n=this;n.removeEvents(),n.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),n.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),n.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),n.next()}).on("click.fb","[data-fancybox-zoom]",function(e){n[n.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(n.requestId&&t(n.requestId),n.requestId=h(function(){n.update(e)})):(n.current&&"iframe"===n.current.type&&n.$refs.stage.hide(),setTimeout(function(){n.$refs.stage.show(),n.update(e)},m.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(e){var t=(m.fancybox?m.fancybox.getInstance():null).current,i=e.keyCode||e.which;if(9!=i){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||m(e.target).is("input,textarea,video,audio,select")))return 8===i||27===i?(e.preventDefault(),void n.close(e)):37===i||38===i?(e.preventDefault(),void n.previous()):39===i||40===i?(e.preventDefault(),void n.next()):void n.trigger("afterKeydown",e,i)}else t.opts.trapFocus&&n.focus(e)}),n.group[n.currIndex].opts.idleTime&&(n.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){n.idleSecondsCounter=0,n.isIdle&&n.showControls(),n.isIdle=!1}),n.idleInterval=l.setInterval(function(){n.idleSecondsCounter++,n.idleSecondsCounter>=n.group[n.currIndex].opts.idleTime&&!n.isDragging&&(n.isIdle=!0,n.idleSecondsCounter=0,n.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,n){var t,i,s,a,r,o,l,c,d,u=this,h=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(e=parseInt(e,10),!(s=u.current?u.current.opts.loop:u.opts.loop)&&(e<0||h<=e))return!1;if(t=u.firstRun=!Object.keys(u.slides).length,r=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,a=u.createSlide(e),1<h&&((s||a.index<h-1)&&u.createSlide(e+1),(s||0<a.index)&&u.createSlide(e-1)),u.current=a,u.currIndex=a.index,u.currPos=a.pos,u.trigger("beforeShow",t),u.updateControls(),a.forcedDuration=v,m.isNumeric(n)?a.forcedDuration=n:n=a.opts[t?"animationDuration":"transitionDuration"],n=parseInt(n,10),i=u.isMoved(a),a.$slide.addClass("fancybox-slide--current"),t)return a.opts.animationEffect&&n&&u.$refs.container.css("transition-duration",n+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(a),void u.preload("image");o=m.fancybox.getTranslate(r.$slide),l=m.fancybox.getTranslate(u.$refs.stage),m.each(u.slides,function(e,t){m.fancybox.stop(t.$slide,!0)}),r.pos!==a.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(d=o.left-(r.pos*o.width+r.pos*r.opts.gutter),m.each(u.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=t.pos*o.width+t.pos*t.opts.gutter;m.fancybox.setTranslate(t.$slide,{top:0,left:i-l.left+d}),t.pos!==a.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>a.pos?"next":"previous")),p(t.$slide),m.fancybox.animate(t.$slide,{top:0,left:(t.pos-a.pos)*o.width+(t.pos-a.pos)*t.opts.gutter},n,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===u.currPos&&u.complete()})})):n&&a.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+a.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>a.pos?"next":"previous")),m.fancybox.animate(r.$slide,c,n,function(){r.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),a.isLoaded?u.revealContent(a):u.loadSlide(a),u.preload("image")}},createSlide:function(e){var t,i=this,n=e%i.group.length;return n=n<0?i.group.length+n:n,!i.slides[e]&&i.group[n]&&(t=m('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[e]=m.extend(!0,{},i.group[n],{pos:e,$slide:t,isLoaded:!1}),i.updateSlide(i.slides[e])),i.slides[e]},scaleToActual:function(e,t,i){var n,s,a,r,o,l=this,c=l.current,d=c.$content,u=m.fancybox.getTranslate(c.$slide).width,h=m.fancybox.getTranslate(c.$slide).height,p=c.width,f=c.height;l.isAnimating||l.isMoved()||!d||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,m.fancybox.stop(d),e=e===v?.5*u:e,t=t===v?.5*h:t,(n=m.fancybox.getTranslate(d)).top-=m.fancybox.getTranslate(c.$slide).top,n.left-=m.fancybox.getTranslate(c.$slide).left,r=p/n.width,o=f/n.height,s=.5*u-.5*p,a=.5*h-.5*f,u<p&&(0<(s=n.left*r-(e*r-e))&&(s=0),s<u-p&&(s=u-p)),h<f&&(0<(a=n.top*o-(t*o-t))&&(a=0),a<h-f&&(a=h-f)),l.updateCursor(p,f),m.fancybox.animate(d,{top:a,left:s,scaleX:r,scaleY:o},i||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,i=this,n=i.current,s=n.$content;i.isAnimating||i.isMoved()||!s||"image"!=n.type||!n.isLoaded||n.hasError||(i.isAnimating=!0,m.fancybox.stop(s),t=i.getFitPos(n),i.updateCursor(t.width,t.height),m.fancybox.animate(s,{top:t.top,left:t.left,scaleX:t.width/s.width(),scaleY:t.height/s.height()},e||366,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,n,s,a=e.$content,r=e.$slide,o=e.width||e.opts.width,l=e.height||e.opts.height,c={};return!!(e.isLoaded&&a&&a.length)&&(t=m.fancybox.getTranslate(this.$refs.stage).width,i=m.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(a.css("marginLeft"))+parseFloat(a.css("marginRight")),i-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(a.css("marginTop"))+parseFloat(a.css("marginBottom")),o&&l||(o=t,l=i),t-.5<(o*=n=Math.min(1,t/o,i/l))&&(o=t),i-.5<(l*=n)&&(l=i),"image"===e.type?(c.top=Math.floor(.5*(i-l))+parseFloat(r.css("paddingTop")),c.left=Math.floor(.5*(t-o))+parseFloat(r.css("paddingLeft"))):"video"===e.contentType&&(o/(s=e.opts.width&&e.opts.height?o/l:e.opts.ratio||16/9)<l?l=o/s:l*s<o&&(o=l*s)),c.width=o,c.height=l,c)},update:function(i){var n=this;m.each(n.slides,function(e,t){n.updateSlide(t,i)})},updateSlide:function(e,t){var i=this,n=e&&e.$content,s=e.width||e.opts.width,a=e.height||e.opts.height,r=e.$slide;i.adjustCaption(e),n&&(s||a||"video"===e.contentType)&&!e.hasError&&(m.fancybox.stop(n),m.fancybox.setTranslate(n,i.getFitPos(e)),e.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(e),r.length&&(r.trigger("refresh"),e.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),i.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,i=t.current,n=i.$slide;!t.isClosing&&i&&(n.siblings().css({transform:"",opacity:""}),n.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),m.fancybox.animate(n,{top:0,left:0,opacity:1},e===v?0:e,function(){n.css({transform:"",opacity:""}),i.isComplete||t.complete()},!1))},isMoved:function(e){var t,i,n=e||this.current;return!!n&&(i=m.fancybox.getTranslate(this.$refs.stage),t=m.fancybox.getTranslate(n.$slide),!n.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-i.top)||.5<Math.abs(t.left-i.left)))},updateCursor:function(e,t){var i,n,s=this,a=s.current,r=s.$refs.container;a&&!s.isClosing&&s.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),n=!!(i=s.canPan(e,t))||s.isZoomable(),r.toggleClass("fancybox-is-zoomable",n),m("[data-fancybox-zoom]").prop("disabled",!n),i?r.addClass("fancybox-can-pan"):n&&("zoom"===a.opts.clickContent||m.isFunction(a.opts.clickContent)&&"zoom"==a.opts.clickContent(a))?r.addClass("fancybox-can-zoomIn"):a.opts.touch&&(a.opts.touch.vertical||1<s.group.length)&&"video"!==a.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var i=!1,n=this.current,s=n.$content;return e!==v&&t!==v?i=e<n.width&&t<n.height:s&&(i=(i=m.fancybox.getTranslate(s)).width<n.width&&i.height<n.height),i},canPan:function(e,t){var i=this.current,n=null,s=!1;return"image"===i.type&&(i.isComplete||e&&t)&&!i.hasError&&(s=this.getFitPos(i),e!==v&&t!==v?n={width:e,height:t}:i.isComplete&&(n=m.fancybox.getTranslate(i.$content)),n&&s&&(s=1.5<Math.abs(n.width-s.width)||1.5<Math.abs(n.height-s.height))),s},loadSlide:function(i){var e,t,n,s=this;if(!i.isLoading&&!i.isLoaded){if(!(i.isLoading=!0)===s.trigger("beforeLoad",i))return i.isLoading=!1;switch(e=i.type,(t=i.$slide).off("refresh").trigger("onReset").addClass(i.opts.slideClass),e){case"image":s.setImage(i);break;case"iframe":s.setIframe(i);break;case"html":s.setContent(i,i.src||i.content);break;case"video":s.setContent(i,i.opts.video.tpl.replace(/\{\{src\}\}/gi,i.src).replace("{{format}}",i.opts.videoFormat||i.opts.video.format||"").replace("{{poster}}",i.thumb||""));break;case"inline":m(i.src).length?s.setContent(i,m(i.src)):s.setError(i);break;case"ajax":s.showLoading(i),n=m.ajax(m.extend({},i.opts.ajax.settings,{url:i.src,success:function(e,t){"success"===t&&s.setContent(i,e)},error:function(e,t){e&&"abort"!==t&&s.setError(i)}})),t.one("onReset",function(){n.abort()});break;default:s.setError(i)}return!0}},setImage:function(t){var e,i=this;setTimeout(function(){var e=t.$image;i.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||i.showLoading(t)},50),i.checkSrcset(t),t.$content=m('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=u.createElement("img")).onerror=function(){m(this).remove(),t.$ghost=null},e.onload=function(){i.afterLoad(t)},t.$ghost=m(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),i.setBigImage(t)},checkSrcset:function(e){var t,i,n,s,a=e.opts.srcset||e.opts.image.srcset;if(a){n=l.devicePixelRatio||1,s=l.innerWidth*n,(i=a.split(",").map(function(e){var n={};return e.trim().split(/\s+/).forEach(function(e,t){var i=parseInt(e.substring(0,e.length-1),10);if(0===t)return n.url=e;i&&(n.value=i,n.postfix=e[e.length-1])}),n})).sort(function(e,t){return e.value-t.value});for(var r=0;r<i.length;r++){var o=i[r];if("w"===o.postfix&&o.value>=s||"x"===o.postfix&&o.value>=n){t=o;break}}!t&&i.length&&(t=i[i.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=a)}},setBigImage:function(t){var i=this,e=u.createElement("img"),n=m(e);t.$image=n.one("error",function(){i.setError(t)}).one("load",function(){var e;t.$ghost||(i.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),i.afterLoad(t)),i.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<s.width()/s.height()?"100":Math.round(t.width/t.height*100))+"vw"),n.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!i.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),i.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&n.naturalWidth&&n.naturalHeight?n.trigger("load"):e.error&&n.trigger("error")},resolveImageSlideSize:function(e,t,i){var n=parseInt(e.opts.width,10),s=parseInt(e.opts.height,10);e.width=t,e.height=i,0<n&&(e.width=n,e.height=Math.floor(n*i/t)),0<s&&(e.width=Math.floor(s*t/i),e.height=s)},setIframe:function(s){var a,t=this,r=s.opts.iframe,o=s.$slide;s.$content=m('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(o),o.addClass("fancybox-slide--"+s.contentType),s.$iframe=a=m(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(s.$content),r.preload?(t.showLoading(s),a.on("load.fb error.fb",function(e){this.isReady=1,s.$slide.trigger("refresh"),t.afterLoad(s)}),o.on("refresh.fb",function(){var e,t=s.$content,i=r.css.width,n=r.css.height;if(1===a[0].isReady){try{e=a.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(o.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),i===v&&(i=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",i||"").css("max-width",""),n===v&&(n=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",n||""),o.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(s),a.attr("src",s.src),o.one("onReset",function(){try{m(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}m(this).off("refresh.fb").empty(),s.isLoaded=!1,s.isRevealed=!1})},setContent:function(e,t){var i;this.isClosing||(this.hideLoading(e),e.$content&&m.fancybox.stop(e.$content),e.$slide.empty(),(i=t)&&i.hasOwnProperty&&i instanceof m&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=m("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===m.type(t)&&(t=m("<div>").append(m.trim(t)).contents()),e.opts.filter&&(t=m("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){m(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(m(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),m(t).appendTo(e.$slide),m(t).is("video,audio")&&(m(t).addClass("fancybox-video"),m(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||m(t).attr("width"),e.opts.height=e.opts.height||m(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=m(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=m(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&m('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t,i=this,n=e||i.current,s=n.opts.caption,a=n.opts.preventCaptionOverlap,r=i.$refs.caption,o=!1;r.toggleClass("fancybox-caption--separate",a),a&&s&&s.length&&(n.pos!==i.currPos?((t=r.clone().appendTo(r.parent())).children().eq(0).empty().html(s),o=t.outerHeight(!0),t.empty().remove()):i.$caption&&(o=i.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",o||""))},adjustLayout:function(e){var t,i,n,s,a=e||this.current;a.isLoaded&&!0!==a.opts.disableLayoutFix&&(a.$content.css("margin-bottom",""),a.$content.outerHeight()>a.$slide.height()+.5&&(n=a.$slide[0].style["padding-bottom"],s=a.$slide.css("padding-bottom"),0<parseFloat(s)&&(t=a.$slide[0].scrollHeight,a.$slide.css("padding-bottom",0),Math.abs(t-a.$slide[0].scrollHeight)<1&&(i=s),a.$slide.css("padding-bottom",n))),a.$content.css("margin-bottom",i))},revealContent:function(e){var t,i,n,s,a=this,r=e.$slide,o=!1,l=!1,c=a.isMoved(e),d=e.isRevealed;return e.isRevealed=!0,t=e.opts[a.firstRun?"animationEffect":"transitionEffect"],n=e.opts[a.firstRun?"animationDuration":"transitionDuration"],n=parseInt(e.forcedDuration===v?n:e.forcedDuration,10),!c&&e.pos===a.currPos&&n||(t=!1),"zoom"===t&&(e.pos===a.currPos&&n&&"image"===e.type&&!e.hasError&&(l=a.getThumbPos(e))?o=a.getFitPos(e):t="fade"),"zoom"===t?(a.isAnimating=!0,o.scaleX=o.width/l.width,o.scaleY=o.height/l.height,"auto"==(s=e.opts.zoomOpacity)&&(s=.1<Math.abs(e.width/e.height-l.width/l.height)),s&&(l.opacity=.1,o.opacity=1),m.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),p(e.$content),void m.fancybox.animate(e.$content,o,n,function(){a.isAnimating=!1,a.complete()})):(a.updateSlide(e),t?(m.fancybox.stop(r),i="fancybox-slide--"+(e.pos>=a.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,r.addClass(i).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==e.type&&e.$content.hide().show(0),void m.fancybox.animate(r,"fancybox-slide--current",n,function(){r.removeClass(i).css({transform:"",opacity:""}),e.pos===a.currPos&&a.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===a.currPos&&a.complete())))},getThumbPos:function(e){var t,i,n,s,a,r,o,l,c,d=e.$thumb;return!!(d&&(o=d[0])&&o.ownerDocument===u&&(m(".fancybox-container").css("pointer-events","none"),l={x:o.getBoundingClientRect().left+o.offsetWidth/2,y:o.getBoundingClientRect().top+o.offsetHeight/2},c=u.elementFromPoint(l.x,l.y)===o,m(".fancybox-container").css("pointer-events",""),c))&&(i=m.fancybox.getTranslate(d),n=parseFloat(d.css("border-top-width")||0),s=parseFloat(d.css("border-right-width")||0),a=parseFloat(d.css("border-bottom-width")||0),r=parseFloat(d.css("border-left-width")||0),t={top:i.top+n,left:i.left+r,width:i.width-s-r,height:i.height-n-a,scaleX:1,scaleY:1},0<i.width&&0<i.height&&t)},complete:function(){var e,i=this,t=i.current,n={};!i.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),i.preload("inline"),p(t.$slide),t.$slide.addClass("fancybox-slide--complete"),m.each(i.slides,function(e,t){t.pos>=i.currPos-1&&t.pos<=i.currPos+1?n[t.pos]=t:t&&(m.fancybox.stop(t.$slide),t.$slide.off().remove())}),i.slides=n),i.isAnimating=!1,i.updateCursor(),i.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),i.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):i.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,i,n=this;n.group.length<2||(i=n.slides[n.currPos+1],(t=n.slides[n.currPos-1])&&t.type===e&&n.loadSlide(t),i&&i.type===e&&n.loadSlide(i))},focus:function(e,t){var i,n,s=this,a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");s.isClosing||((i=(i=!e&&s.current&&s.current.isComplete?s.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):s.$refs.container.find("*:visible")).filter(a).filter(function(){return"hidden"!==m(this).css("visibility")&&!m(this).hasClass("disabled")})).length?(n=i.index(u.activeElement),e&&e.shiftKey?(n<0||0==n)&&(e.preventDefault(),i.eq(i.length-1).trigger("focus")):(n<0||n==i.length-1)&&(e&&e.preventDefault(),i.eq(0).trigger("focus"))):s.$refs.container.trigger("focus"))},activate:function(){var t=this;m(".fancybox-container").each(function(){var e=m(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function i(){d.cleanUp(e)}var n,s,a,r,o,l,c,d=this,u=d.current;return!d.isClosing&&(!(d.isClosing=!0)===d.trigger("beforeClose",e)?(d.isClosing=!1,h(function(){d.update()}),!1):(d.removeEvents(),a=u.$content,n=u.opts.animationEffect,s=m.isNumeric(t)?t:n?u.opts.animationDuration:0,u.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?m.fancybox.stop(u.$slide):n=!1,u.$slide.siblings().trigger("onReset").remove(),s&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",s+"ms"),d.hideLoading(u),d.hideControls(!0),d.updateCursor(),"zoom"!==n||a&&s&&"image"===u.type&&!d.isMoved()&&!u.hasError&&(c=d.getThumbPos(u))||(n="fade"),"zoom"===n?(m.fancybox.stop(a),l={top:(r=m.fancybox.getTranslate(a)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(o=u.opts.zoomOpacity)&&(o=.1<Math.abs(u.width/u.height-c.width/c.height)),o&&(c.opacity=0),m.fancybox.setTranslate(a,l),p(a),m.fancybox.animate(a,c,s,i)):n&&s?m.fancybox.animate(u.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+n,s,i):!0===e?setTimeout(i,s):i(),!0))},cleanUp:function(e){var t,i,n,s=this,a=s.current.opts.$orig;s.current.$slide.trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",e),s.current.opts.backFocus&&(a&&a.length&&a.is(":visible")||(a=s.$trigger),a&&a.length&&(i=l.scrollX,n=l.scrollY,a.trigger("focus"),m("html, body").scrollTop(n).scrollLeft(i))),s.current=null,(t=m.fancybox.getInstance())?t.activate():(m("body").removeClass("fancybox-active compensate-for-scrollbar"),m("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,n=Array.prototype.slice.call(arguments,1),s=this,a=t&&t.opts?t:s.current;if(a?n.unshift(a):a=s,n.unshift(s),m.isFunction(a.opts[e])&&(i=a.opts[e].apply(a,n)),!1===i)return i;"afterClose"!==e&&s.$refs?s.$refs.container.trigger(e+".fb",n):r.trigger(e+".fb",n)},updateControls:function(){var e=this,t=e.current,i=t.index,n=e.$refs.container,s=e.$refs.caption,a=t.opts.caption;t.$slide.trigger("refresh"),a&&a.length?(e.$caption=s).children().eq(0).html(a):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),n.find("[data-fancybox-count]").html(e.group.length),n.find("[data-fancybox-index]").html(i+1),n.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&i<=0),n.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&i>=e.group.length-1),"image"===t.type?n.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&n.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),m(u.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,i=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,i.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),m.fancybox={version:"3.5.7",defaults:e,getInstance:function(e){var t=m('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof n&&("string"===m.type(e)?t[e].apply(t,i):"function"===m.type(e)&&e.apply(t,i),t)},open:function(e,t,i){return new n(e,t,i)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(i=u.createElement("div"),l.getComputedStyle&&l.getComputedStyle(i)&&l.getComputedStyle(i).getPropertyValue("transform")&&!(u.documentMode&&u.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var i="",n={};if(e&&t)return t.left===v&&t.top===v||(i=(t.left===v?e.position().left:t.left)+"px, "+(t.top===v?e.position().top:t.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),t.scaleX!==v&&t.scaleY!==v?i+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==v&&(i+=" scaleX("+t.scaleX+")"),i.length&&(n.transform=i),t.opacity!==v&&(n.opacity=t.opacity),t.width!==v&&(n.width=t.width),t.height!==v&&(n.height=t.height),e.css(n)},animate:function(t,i,n,s,a){var r,o=this;m.isFunction(n)&&(s=n,n=null),o.stop(t),r=o.getTranslate(t),t.on(c,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(o.stop(t),m.isNumeric(n)&&t.css("transition-duration",""),m.isPlainObject(i)?i.scaleX!==v&&i.scaleY!==v&&o.setTranslate(t,{top:i.top,left:i.left,width:r.width*i.scaleX,height:r.height*i.scaleY,scaleX:1,scaleY:1}):!0!==a&&t.removeClass(i),m.isFunction(s)&&s(e))}),m.isNumeric(n)&&t.css("transition-duration",n+"ms"),m.isPlainObject(i)?(i.scaleX!==v&&i.scaleY!==v&&(delete i.width,delete i.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),m.fancybox.setTranslate(t,i)):t.addClass(i),t.data("timer",setTimeout(function(){t.trigger(c)},n+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(c),e.off(c).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},m.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?m("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},y),this},r.on("click.fb-start","[data-fancybox]",y),r.on("click.fb-start","[data-fancybox-trigger]",function(e){m('[data-fancybox="'+m(this).attr("data-fancybox-trigger")+'"]').eq(m(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:m(this)})}),o=".fancybox-button",f="fancybox-focus",g=null,r.on("mousedown mouseup focus blur",o,function(e){switch(e.type){case"mousedown":g=m(this);break;case"mouseup":g=null;break;case"focusin":m(o).removeClass(f),m(this).is(g)||m(this).is("[disabled]")||m(this).addClass(f);break;case"focusout":m(o).removeClass(f)}})))}(window,document,jQuery),function(p){"use strict";function f(i,e,t){if(i)return t=t||"","object"===p.type(t)&&(t=p.param(t,!0)),p.each(e,function(e,t){i=i.replace("$"+e,t||"")}),t.length&&(i+=(0<i.indexOf("?")?"&":"?")+t),i}var n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};p(document).on("objectNeedsType.fb",function(e,t,s){var a,r,o,l,c,d,u=s.src||"",h=!1,i=p.extend(!0,{},n,s.opts.media);p.each(i,function(e,t){if(r=u.match(t.matcher)){if(h=t.type,d=e,c={},t.paramPlace&&r[t.paramPlace]){"?"==(l=r[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var i=0;i<l.length;++i){var n=l[i].split("=",2);2==n.length&&(c[n[0]]=decodeURIComponent(n[1].replace(/\+/g," ")))}}return o=p.extend(!0,{},t.params,s.opts[e],c),u="function"===p.type(t.url)?t.url.call(this,r,o,s):f(t.url,r,o),a="function"===p.type(t.thumb)?t.thumb.call(this,r,o,s):f(t.thumb,r),"youtube"===e?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,i,n){return"&start="+((i?60*parseInt(i,10):0)+parseInt(n,10))}):"vimeo"===e&&(u=u.replace("&%23","#")),!1}}),h?(s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=a),"iframe"===h&&(s.opts=p.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(s,{type:h,src:u,origSrc:s.src,contentSource:d,contentType:"image"===h?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(s.type=s.opts.defaultType)});var s={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,i=this;this[e].loaded?setTimeout(function(){i.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){i[e].loaded=!0,i.done(e)}:t.onload=function(){i[e].loaded=!0,i.done(e)},document.body.appendChild(t))},done:function(e){var t,i;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=p.fancybox.getInstance())&&(i=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){t.next()}))}};p(document).on({"afterShow.fb":function(e,t,i){1<t.group.length&&("youtube"===i.contentSource||"vimeo"===i.contentSource)&&s.load(i.contentSource)}})}(jQuery),function(m,l,v){"use strict";function d(e){var t=[];for(var i in e=(e=e.originalEvent||e||m.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[i].pageX?t.push({x:e[i].pageX,y:e[i].pageY}):e[i].clientX&&t.push({x:e[i].clientX,y:e[i].clientY});return t}function g(e,t,i){return t&&e?"x"===i?e.x-t.x:"y"===i?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||v.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,i=e[0].attributes,n=i.length;t<n;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return 1}function u(e){for(var t,i,n,s,a,r=!1;t=e.get(0),0,i=m.getComputedStyle(t)["overflow-y"],n=m.getComputedStyle(t)["overflow-x"],s=("scroll"===i||"auto"===i)&&t.scrollHeight>t.clientHeight,a=("scroll"===n||"auto"===n)&&t.scrollWidth>t.clientWidth,!(r=s||a)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return r}function i(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",v.proxy(t,"ontouchstart"))}var y=m.requestAnimationFrame||m.webkitRequestAnimationFrame||m.mozRequestAnimationFrame||m.oRequestAnimationFrame||function(e){return m.setTimeout(e,1e3/60)},b=m.cancelAnimationFrame||m.webkitCancelAnimationFrame||m.mozCancelAnimationFrame||m.oCancelAnimationFrame||function(e){m.clearTimeout(e)};i.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),v(l).off(".fb.touch"),e.requestId&&(b(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},i.prototype.ontouchstart=function(e){var t=this,i=v(e.target),n=t.instance,s=n.current,a=s.$slide,r=s.$content,o="touchstart"==e.type;if(o&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&a.length&&i.length&&!c(i)&&!c(i.parent())&&(i.is("img")||!(e.originalEvent.clientX>i[0].clientWidth+i.offset().left))){if(!s||n.isAnimating||s.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=d(e),t.startPoints.length&&(s.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=i,t.$content=r,t.opts=s.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=n.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(a[0].clientWidth),t.canvasHeight=Math.round(a[0].clientHeight),t.contentLastPos=null,t.contentStartPos=v.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=v.fancybox.getTranslate(a),t.stagePos=v.fancybox.getTranslate(n.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,v(l).off(".fb.touch").on(o?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",v.proxy(t,"ontouchend")).on(o?"touchmove.fb.touch":"mousemove.fb.touch",v.proxy(t,"ontouchmove")),v.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(i.is(t.$stage)||t.$stage.find(i).length)||(i.is(".fancybox-image")&&e.preventDefault(),v.fancybox.isMobile&&i.parents(".fancybox-caption").length))&&(t.isScrollable=u(i)||u(i.parent()),v.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!s.hasError||(t.canPan?(v.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===s.type&&(s.isLoaded||s.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,v.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-v(m).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-v(m).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=g(t.startPoints[0],t.startPoints[1]))))}},i.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},i.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=d(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=g(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=g(t.newPoints[0],t.startPoints[0],"y"),t.distance=g(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},i.prototype.onSwipe=function(e){var t,s=this,a=s.instance,i=s.isSwiping,n=s.sliderStartPos.left||0;if(!0!==i)"x"==i&&(0<s.distanceX&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?n+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?n-=Math.pow(-s.distanceX,.8):n+=s.distanceX),s.sliderLastPos={top:"x"==i?0:s.sliderStartPos.top+s.distanceY,left:n},s.requestId&&(b(s.requestId),s.requestId=null),s.requestId=y(function(){s.sliderLastPos&&(v.each(s.instance.slides,function(e,t){var i=t.pos-s.instance.currPos;v.fancybox.setTranslate(t.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+i*s.canvasWidth+i*t.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(s.distance)){if(s.canTap=!1,a.group.length<2&&s.opts.vertical?s.isSwiping="y":a.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&800<v(m).width()?s.isSwiping="x":(t=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=45<t&&t<135?"y":"x"),"y"===s.isSwiping&&v.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);a.isDragging=s.isSwiping,s.startPoints=s.newPoints,v.each(a.slides,function(e,t){var i,n;v.fancybox.stop(t.$slide),i=v.fancybox.getTranslate(t.$slide),n=v.fancybox.getTranslate(a.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===a.current.pos&&(s.sliderStartPos.top=i.top-n.top,s.sliderStartPos.left=i.left-n.left),v.fancybox.setTranslate(t.$slide,{top:i.top-n.top,left:i.left-n.left})}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop()}},i.prototype.onPan=function(){var e=this;g(e.newPoints[0],e.realPoints[0])<(v.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)}))},i.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,i=e.canvasHeight,n=e.distanceX,s=e.distanceY,a=e.contentStartPos,r=a.left,o=a.top,l=a.width,c=a.height,d=t<l?r+n:r,u=o+s,h=Math.max(0,.5*t-.5*l),p=Math.max(0,.5*i-.5*c),f=Math.min(t-l,.5*t-.5*l),m=Math.min(i-c,.5*i-.5*c);return 0<n&&h<d&&(d=h-1+Math.pow(-h+r+n,.8)||0),n<0&&d<f&&(d=f+1-Math.pow(f-r-n,.8)||0),0<s&&p<u&&(u=p-1+Math.pow(-p+o+s,.8)||0),s<0&&u<m&&(u=m+1-Math.pow(m-o-s,.8)||0),{top:u,left:d}},i.prototype.limitPosition=function(e,t,i,n){var s=this.canvasWidth,a=this.canvasHeight;return e=s<i?(e=0<e?0:e)<s-i?s-i:e:Math.max(0,s/2-i/2),{top:t=a<n?(t=0<t?0:t)<a-n?a-n:t:Math.max(0,a/2-n/2),left:e}},i.prototype.onZoom=function(){var e=this,t=e.contentStartPos,i=t.width,n=t.height,s=t.left,a=t.top,r=g(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,o=Math.floor(i*r),l=Math.floor(n*r),c=(i-o)*e.percentageOfImageAtPinchPointX,d=(n-l)*e.percentageOfImageAtPinchPointY,u=(e.newPoints[0].x+e.newPoints[1].x)/2-v(m).scrollLeft(),h=(e.newPoints[0].y+e.newPoints[1].y)/2-v(m).scrollTop(),p=u-e.centerPointStartX,f={top:a+(d+(h-e.centerPointStartY)),left:s+(c+p),scaleX:r,scaleY:r};e.canTap=!1,e.newWidth=o,e.newHeight=l,e.contentLastPos=f,e.requestId&&b(e.requestId),e.requestId=y(function(){v.fancybox.setTranslate(e.$content,e.contentLastPos)})},i.prototype.ontouchend=function(e){var t=this,i=t.isSwiping,n=t.isPanning,s=t.isZooming,a=t.isScrolling;if(t.endPoints=d(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),v(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(b(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,n?t.endPanning():s?t.endZooming():t.endSwiping(i,a)},i.prototype.endSwiping=function(e,t){var i=this,n=!1,s=i.instance.group.length,a=Math.abs(i.distanceX),r="x"==e&&1<s&&(130<i.dMs&&10<a||50<a);i.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(i.distanceY)?(v.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),n=i.instance.close(!0,250)):r&&0<i.distanceX?n=i.instance.previous(300):r&&i.distanceX<0&&(n=i.instance.next(300)),!1!==n||"x"!=e&&"y"!=e||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var e,t,i,n=this;n.contentLastPos&&(t=!1===n.opts.momentum||350<n.dMs?(e=n.contentLastPos.left,n.contentLastPos.top):(e=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(i=n.limitPosition(e,t,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,i.height=n.contentStartPos.height,v.fancybox.animate(n.$content,i,366))},i.prototype.endZooming=function(){var e,t,i,n,s=this,a=s.instance.current,r=s.newWidth,o=s.newHeight;s.contentLastPos&&(e=s.contentLastPos.left,n={top:t=s.contentLastPos.top,left:e,width:r,height:o,scaleX:1,scaleY:1},v.fancybox.setTranslate(s.$content,n),r<s.canvasWidth&&o<s.canvasHeight?s.instance.scaleToFit(150):r>a.width||o>a.height?s.instance.scaleToActual(s.centerPointStartX,s.centerPointStartY,150):(i=s.limitPosition(e,t,r,o),v.fancybox.animate(s.$content,i,150)))},i.prototype.onTap=function(i){function e(e){var t=r.opts[e];if(v.isFunction(t)&&(t=t.apply(a,[r,i])),t)switch(t){case"close":a.close(n.startEvent);break;case"toggleControls":a.toggleControls();break;case"next":a.next();break;case"nextOrClose":1<a.group.length?a.next():a.close(n.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(l,c):a.group.length<2&&a.close(n.startEvent))}}var t,n=this,s=v(i.target),a=n.instance,r=a.current,o=i&&d(i)||n.startPoints,l=o[0]?o[0].x-v(m).scrollLeft()-n.stagePos.left:0,c=o[0]?o[0].y-v(m).scrollTop()-n.stagePos.top:0;if((!i.originalEvent||2!=i.originalEvent.button)&&(s.is("img")||!(l>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(s.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.find(s).addBack().filter(s).length)return;t="Content"}if(n.tapped){if(clearTimeout(n.tapped),n.tapped=null,50<Math.abs(l-n.tapX)||50<Math.abs(c-n.tapY))return this;e("dblclick"+t)}else n.tapX=l,n.tapY=c,r.opts["dblclick"+t]&&r.opts["dblclick"+t]!==r.opts["click"+t]?n.tapped=setTimeout(function(){n.tapped=null,a.isAnimating||e("click"+t)},500):e("click"+t);return this}},v(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new i(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(r,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function i(e){this.instance=e,this.init()}o.extend(i.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,i=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!i?e.$button.hide():i.progress&&(e.$progress=o('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,i=t.instance,n=i.current;n&&(!0===e||n.opts.loop||i.currIndex<i.group.length-1)?t.isActive&&"video"!==n.contentType&&(t.$progress&&o.fancybox.animate(t.$progress.show(),{scaleX:1},n.opts.slideShow.speed),t.timer=setTimeout(function(){i.current.opts.loop||i.current.index!=i.group.length-1?i.next():i.jumpTo(0)},n.opts.slideShow.speed)):(t.stop(),i.idleSecondsCounter=0,i.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),o(r).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new i(t))},"beforeShow.fb":function(e,t,i,n){var s=t&&t.SlideShow;n?s&&i.opts.slideShow.autoStart&&s.start():s&&s.isActive&&s.clear()},"afterShow.fb":function(e,t,i){var n=t&&t.SlideShow;n&&n.isActive&&n.set()},"afterKeydown.fb":function(e,t,i,n,s){var a=t&&t.SlideShow;!a||!i.opts.slideShow||80!==s&&32!==s||o(r.activeElement).is("button,a,input")||(n.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var i=t&&t.SlideShow;i&&i.stop()}}),o(r).on("visibilitychange",function(){var e=o.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(r.hidden?t.clear():t.set())})}(document,jQuery),function(a,i){"use strict";var n,s=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},i=0;i<e.length;i++){var n=e[i];if(n&&n[1]in a){for(var s=0;s<n.length;s++)t[e[0][s]]=n[s];return t}}return!1}();s&&(n={request:function(e){(e=e||a.documentElement)[s.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){a[s.exitFullscreen]()},toggle:function(e){e=e||a.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(a[s.fullscreenElement])},enabled:function(){return Boolean(a[s.fullscreenEnabled])}},i.extend(!0,i.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),i(a).on(s.fullscreenchange,function(){var e=n.isFullscreen(),t=i.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),i(a).on({"onInit.fb":function(e,t){s?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),n.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&n.request(),t.FullScreen=n):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,i,n,s){t&&t.FullScreen&&70===s&&(n.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&n.exit()}})}(document,jQuery),function(e,a){"use strict";var r="fancybox-thumbs",o=r+"-active";a.fancybox.defaults=a.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},a.fancybox.defaults);function n(e){this.init(e)}a.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,i=e.group,n=0;t.instance=e,t.opts=i[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var s=0,a=i.length;s<a&&(i[s].thumb&&n++,!(1<n));s++);1<n&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var i,e=this,t=e.instance,n=e.opts.parentEl,s=[];e.$grid||(e.$grid=a('<div class="'+r+" "+r+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(n).addBack().filter(n)),e.$grid.on("click","a",function(){t.jumpTo(a(this).attr("data-index"))})),e.$list||(e.$list=a('<div class="'+r+'__list">').appendTo(e.$grid)),a.each(t.group,function(e,t){(i=t.thumb)||"image"!==t.type||(i=t.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(i&&i.length?' style="background-image:url('+i+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=s.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,i,n=this,s=n.$list,a=n.$grid;n.instance.current&&(i=(t=s.children().removeClass(o).filter('[data-index="'+n.instance.current.index+'"]').addClass(o)).position(),"y"===n.opts.axis&&(i.top<0||i.top>s.height()-t.outerHeight())?s.stop().animate({scrollTop:s.scrollTop()+i.top},e):"x"===n.opts.axis&&(i.left<a.scrollLeft()||i.left>a.scrollLeft()+(a.width()-t.outerWidth()))&&s.parent().stop().animate({scrollLeft:i.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),a(e).on({"onInit.fb":function(e,t){var i;t&&!t.Thumbs&&(i=new n(t)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(e,t,i,n){var s=t&&t.Thumbs;s&&s.isVisible&&s.focus(n?0:250)},"afterKeydown.fb":function(e,t,i,n,s){var a=t&&t.Thumbs;a&&a.isActive&&71===s&&(n.preventDefault(),a.toggle())},"beforeClose.fb":function(e,t){var i=t&&t.Thumbs;i&&i.isVisible&&!1!==i.opts.hideOnClose&&i.$grid.hide()}})}(document,jQuery),function(e,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),a(e).on("click","[data-fancybox-share]",function(){var e,t,i,n=a.fancybox.getInstance(),s=n.current||null;s&&("function"===a.type(s.opts.share.url)&&(e=s.opts.share.url.apply(s,[n,s])),t=s.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===s.type?encodeURIComponent(s.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return i[e]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),a.fancybox.open({src:n.translate(n,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){n.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(a,r,s){"use strict";function o(){var e=a.location.hash.substr(1),t=e.split("-"),i=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:i<1?1:i,gallery:t.join("-")}}function t(e){""!==e.gallery&&s("[data-fancybox='"+s.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,i;return!!e&&(""!==(i=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&i)}s.escapeSelector||(s.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),s(function(){!1!==s.fancybox.defaults.hash&&(s(r).on({"onInit.fb":function(e,t){var i,n;!1!==t.group[t.currIndex].opts.hash&&(i=o(),(n=l(t))&&i.gallery&&n==i.gallery&&(t.currIndex=i.index-1))},"beforeShow.fb":function(e,t,i,n){var s;i&&!1!==i.opts.hash&&(s=l(t))&&(t.currentHash=s+(1<t.group.length?"-"+(i.index+1):""),a.location.hash!=="#"+t.currentHash&&(n&&!t.origHash&&(t.origHash=a.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in a.history?(a.history[n?"pushState":"replaceState"]({},r.title,a.location.pathname+a.location.search+"#"+t.currentHash),n&&(t.hasCreatedHistory=!0)):a.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,i){i&&!1!==i.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?a.history.back():t.currentHash&&("replaceState"in a.history?a.history.replaceState({},r.title,a.location.pathname+a.location.search+(t.origHash||"")):a.location.hash=t.origHash),t.currentHash=null)}}),s(a).on("hashchange.fb",function(){var e=o(),n=null;s.each(s(".fancybox-container").get().reverse(),function(e,t){var i=s(t).data("FancyBox");if(i&&i.currentHash)return n=i,!1}),n?n.currentHash===e.gallery+"-"+e.index||1===e.index&&n.currentHash==e.gallery||(n.currentHash=null,n.close()):""!==e.gallery&&t(e)}),setTimeout(function(){s.fancybox.getInstance()||t(o())},50))})}(window,document,jQuery),function(e,t){"use strict";var s=(new Date).getTime();t(e).on({"onInit.fb":function(e,n,t){n.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=n.current,i=(new Date).getTime();n.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,i-s<250||(s=i,n[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";var m="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,se="undefined"==typeof window?{document:m,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function L(e,t){var i=[],n=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,a,r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var o="div";for(0===r.indexOf("<li")&&(o="ul"),0===r.indexOf("<tr")&&(o="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(o="tr"),0===r.indexOf("<tbody")&&(o="table"),0===r.indexOf("<option")&&(o="select"),(a=m.createElement(o)).innerHTML=r,n=0;n<a.childNodes.length;n+=1)i.push(a.childNodes[n])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||m).querySelectorAll(e.trim()):[m.getElementById(e.trim().split("#")[1])],n=0;n<s.length;n+=1)s[n]&&i.push(s[n])}else if(e.nodeType||e===se||e===m)i.push(e);else if(0<e.length&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new l(i)}function a(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}L.fn=l.prototype,L.Class=l,L.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===i.length)this[n].setAttribute(e,t);else for(var s in e)this[n][s]=e[s],this[n].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var n=0;n<this.length;n+=1)(i=this[n]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0])return i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage?i.dom7ElementDataStorage[e]:i.getAttribute("data-"+e)||void 0},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],a=e[1],r=e[2],n=e[3];function s(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),L(t).is(a))r.apply(t,i);else for(var n=L(t).parents(),s=0;s<n.length;s+=1)L(n[s]).is(a)&&r.apply(n[s],i)}}function o(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&(i=e[0],r=e[1],n=e[2],a=void 0),n=n||!1;for(var l,c=i.split(" "),d=0;d<this.length;d+=1){var u=this[d];if(a)for(l=0;l<c.length;l+=1){var h=c[l];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[h]||(u.dom7LiveListeners[h]=[]),u.dom7LiveListeners[h].push({listener:r,proxyListener:s}),u.addEventListener(h,s,n)}else for(l=0;l<c.length;l+=1){var p=c[l];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[p]||(u.dom7Listeners[p]=[]),u.dom7Listeners[p].push({listener:r,proxyListener:o}),u.addEventListener(p,o,n)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],n=e[1],s=e[2],a=e[3];"function"==typeof e[1]&&(i=e[0],s=e[1],a=e[2],n=void 0),a=a||!1;for(var r=i.split(" "),o=0;o<r.length;o+=1)for(var l=r[o],c=0;c<this.length;c+=1){var d=this[c],u=void 0;if(!n&&d.dom7Listeners?u=d.dom7Listeners[l]:n&&d.dom7LiveListeners&&(u=d.dom7LiveListeners[l]),u&&u.length)for(var h=u.length-1;0<=h;--h){var p=u[h];!(s&&p.listener===s||s&&p.listener&&p.listener.dom7proxy&&p.listener.dom7proxy===s)&&s||(d.removeEventListener(l,p.proxyListener,a),u.splice(h,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),n=e[1],s=0;s<i.length;s+=1)for(var a=i[s],r=0;r<this.length;r+=1){var o=this[r],l=void 0;try{l=new se.CustomEvent(a,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(l=m.createEvent("Event")).initEvent(a,!0,!0),l.detail=n}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var i,n=["webkitTransitionEnd","transitionend"],s=this;function a(e){if(e.target===this)for(t.call(this,e),i=0;i<n.length;i+=1)s.off(n[i],a)}if(t)for(i=0;i<n.length;i+=1)s.on(n[i],a);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=m.body,n=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,a=e===se?se.scrollY:e.scrollTop,r=e===se?se.scrollX:e.scrollLeft;return{top:t.top+a-n,left:t.left+r-s}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return se.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,n=this[0];if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=L(e),i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}if(e===m)return n===m;if(e===se)return n===se;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new l(i-1<e?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=0;n<t.length;n+=1){e=t[n];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var a=m.createElement("div");for(a.innerHTML=e;a.firstChild;)this[s].appendChild(a.firstChild)}else if(e instanceof l)for(var r=0;r<e.length;r+=1)this[s].appendChild(e[r]);else this[s].appendChild(e)}return this},prepend:function(e){for(var t,i=0;i<this.length;i+=1)if("string"==typeof e){var n=m.createElement("div");for(n.innerHTML=e,t=n.childNodes.length-1;0<=t;--t)this[i].insertBefore(n.childNodes[t],this[i].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[i].insertBefore(e[t],this[i].childNodes[0]);else this[i].insertBefore(e,this[i].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&L(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var n=i.nextElementSibling;e&&!L(n).is(e)||t.push(n),i=n}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&L(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var n=i.previousElementSibling;e&&!L(n).is(e)||t.push(n),i=n}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null===this[i].parentNode||e&&!L(this[i].parentNode).is(e)||t.push(this[i].parentNode);return L(a(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].parentNode;n;)e&&!L(n).is(e)||t.push(n),n=n.parentNode;return L(a(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].querySelectorAll(e),s=0;s<n.length;s+=1)t.push(n[s]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].childNodes,s=0;s<n.length;s+=1)e?1===n[s].nodeType&&L(n[s]).is(e)&&t.push(n[s]):1===n[s].nodeType&&t.push(n[s]);return new l(a(t))},filter:function(e){for(var t=[],i=0;i<this.length;i+=1)e.call(this[i],i,this[i])&&t.push(this[i]);return new l(t)},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=0;i<e.length;i+=1)for(var n=L(e[i]),s=0;s<n.length;s+=1)this[this.length]=n[s],this.length+=1;return this},styles:function(){return this[0]?se.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){L.fn[e]=L.fn[e]||t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var ae={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,n,s;void 0===t&&(t="x");var a=se.getComputedStyle(e,null);return se.WebKitCSSMatrix?(6<(n=a.transform||a.webkitTransform).split(",").length&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new se.WebKitCSSMatrix("none"===n?"":n)):i=(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=se.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=se.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,s,a={},r=e||se.location.href;if("string"==typeof r&&r.length)for(s=(i=(r=-1<r.indexOf("?")?r.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)n=i[t].replace(/#\S+/g,"").split("="),a[decodeURIComponent(n[0])]=void 0===n[1]?void 0:decodeURIComponent(n[1])||"";return a},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var s=e[n];if(null!=s)for(var a=Object.keys(Object(s)),r=0,o=a.length;r<o;r+=1){var l=a[r],c=Object.getOwnPropertyDescriptor(s,l);void 0!==c&&c.enumerable&&(ae.isObject(i[l])&&ae.isObject(s[l])?ae.extend(i[l],s[l]):!ae.isObject(i[l])&&ae.isObject(s[l])?(i[l]={},ae.extend(i[l],s[l])):i[l]=s[l])}}return i}},E={touch:se.Modernizr&&!0===se.Modernizr.touch||!!(0<se.navigator.maxTouchPoints||"ontouchstart"in se||se.DocumentTouch&&m instanceof se.DocumentTouch),pointerEvents:!!se.PointerEvent&&"maxTouchPoints"in se.navigator&&0<se.navigator.maxTouchPoints,observer:"MutationObserver"in se||"WebkitMutationObserver"in se,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});se.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in se},i={components:{configurable:!0}};e.prototype.on=function(e,t,i){var n=this;if("function"!=typeof t)return n;var s=i?"unshift":"push";return e.split(" ").forEach(function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][s](t)}),n},e.prototype.once=function(i,n,e){var s=this;if("function"!=typeof n)return s;function a(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];s.off(i,a),a.f7proxy&&delete a.f7proxy,n.apply(s,e)}return a.f7proxy=n,s.on(i,a,e)},e.prototype.off=function(e,n){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(i){void 0===n?s.eventsListeners[i]=[]:s.eventsListeners[i]&&s.eventsListeners[i].length&&s.eventsListeners[i].forEach(function(e,t){(e===n||e.f7proxy&&e.f7proxy===n)&&s.eventsListeners[i].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n,s,a=this;return a.eventsListeners&&(s="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],n=e.slice(1,e.length),a):(i=e[0].events,n=e[0].data,e[0].context||a),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){var t;a.eventsListeners&&a.eventsListeners[e]&&(t=[],a.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,n)}))})),a},e.prototype.useModulesParams=function(i){var n=this;n.modules&&Object.keys(n.modules).forEach(function(e){var t=n.modules[e];t.params&&ae.extend(i,t.params)})},e.prototype.useModules=function(n){void 0===n&&(n={});var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var i=s.modules[e],t=n[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];s[e]="function"==typeof t?t.bind(s):t}),i.on&&s.on&&Object.keys(i.on).forEach(function(e){s.on(e,i.on[e])}),i.create&&i.create.bind(s)(t)})},i.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var s=t.name||Object.keys(n.prototype.modules).length+"_"+ae.now();return(n.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install&&t.install.apply(n,e),n},e.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(e,i);var n,s,r,o,c,d,u,h,p,f,v,g,y,b,w,x={updateSize:function(){var e=this.$el,t=void 0!==this.params.width?this.params.width:e[0].clientWidth,i=void 0!==this.params.height?this.params.height:e[0].clientHeight;0===t&&this.isHorizontal()||0===i&&this.isVertical()||(t=t-parseInt(e.css("padding-left"),10)-parseInt(e.css("padding-right"),10),i=i-parseInt(e.css("padding-top"),10)-parseInt(e.css("padding-bottom"),10),ae.extend(this,{width:t,height:i,size:this.isHorizontal()?t:i}))},updateSlides:function(){var t=this.params,e=this.$wrapperEl,i=this.size,n=this.rtlTranslate,s=this.wrongRTL,a=this.virtual&&t.virtual.enabled,r=a?this.virtual.slides.length:this.slides.length,o=e.children("."+this.params.slideClass),l=a?this.virtual.slides.length:o.length,c=[],d=[],u=[];function h(e){return!t.cssMode||e!==o.length-1}var p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(this));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(this));var m,v=this.snapGrid.length,g=this.snapGrid.length,y=t.spaceBetween,b=-p,w=0,x=0;if(void 0!==i){"string"==typeof y&&0<=y.indexOf("%")&&(y=parseFloat(y.replace("%",""))/100*i),this.virtualSize=-y,n?o.css({marginLeft:"",marginTop:""}):o.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(m=Math.floor(l/t.slidesPerColumn)===l/this.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(m=Math.max(m,t.slidesPerView*t.slidesPerColumn)));for(var T,C,S,E,k,M=t.slidesPerColumn,$=m/M,P=Math.floor(l/t.slidesPerColumn),L=0;L<l;L+=1){_=0;var D,A,z,O,j,I,N,H,q,F,R,B,X,Y,V,_,W,G,U,K,Q,Z,J=o.eq(L);1<t.slidesPerColumn&&(A=D=I=void 0,"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?(z=Math.floor(L/(t.slidesPerGroup*t.slidesPerColumn)),O=L-t.slidesPerColumn*t.slidesPerGroup*z,j=0===z?t.slidesPerGroup:Math.min(Math.ceil((l-z*M*t.slidesPerGroup)/M),t.slidesPerGroup),I=(D=O-(A=Math.floor(O/j))*j+z*t.slidesPerGroup)+A*m/M,J.css({"-webkit-box-ordinal-group":I,"-moz-box-ordinal-group":I,"-ms-flex-order":I,"-webkit-order":I,order:I})):"column"===t.slidesPerColumnFill?(A=L-(D=Math.floor(L/M))*M,(P<D||D===P&&A===M-1)&&(A+=1)>=M&&(A=0,D+=1)):D=L-(A=Math.floor(L/$))*$,J.css("margin-"+(this.isHorizontal()?"top":"left"),0!==A&&t.spaceBetween&&t.spaceBetween+"px")),"none"!==J.css("display")&&("auto"===t.slidesPerView?(N=se.getComputedStyle(J[0],null),H=J[0].style.transform,q=J[0].style.webkitTransform,H&&(J[0].style.transform="none"),q&&(J[0].style.webkitTransform="none"),_=t.roundLengths?this.isHorizontal()?J.outerWidth(!0):J.outerHeight(!0):this.isHorizontal()?(F=parseFloat(N.getPropertyValue("width")),R=parseFloat(N.getPropertyValue("padding-left")),B=parseFloat(N.getPropertyValue("padding-right")),X=parseFloat(N.getPropertyValue("margin-left")),Y=parseFloat(N.getPropertyValue("margin-right")),(V=N.getPropertyValue("box-sizing"))&&"border-box"===V?F+X+Y:F+R+B+X+Y):(W=parseFloat(N.getPropertyValue("height")),G=parseFloat(N.getPropertyValue("padding-top")),U=parseFloat(N.getPropertyValue("padding-bottom")),K=parseFloat(N.getPropertyValue("margin-top")),Q=parseFloat(N.getPropertyValue("margin-bottom")),(Z=N.getPropertyValue("box-sizing"))&&"border-box"===Z?W+K+Q:W+G+U+K+Q),H&&(J[0].style.transform=H),q&&(J[0].style.webkitTransform=q),t.roundLengths&&(_=Math.floor(_))):(_=(i-(t.slidesPerView-1)*y)/t.slidesPerView,t.roundLengths&&(_=Math.floor(_)),o[L]&&(this.isHorizontal()?o[L].style.width=_+"px":o[L].style.height=_+"px")),o[L]&&(o[L].swiperSlideSize=_),u.push(_),t.centeredSlides?(b=b+_/2+w/2+y,0===w&&0!==L&&(b=b-i/2-y),0===L&&(b=b-i/2-y),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),x%t.slidesPerGroup==0&&c.push(b),d.push(b)):(t.roundLengths&&(b=Math.floor(b)),(x-Math.min(this.params.slidesPerGroupSkip,x))%this.params.slidesPerGroup==0&&c.push(b),d.push(b),b=b+_+y),this.virtualSize+=_+y,w=_,x+=1)}if(this.virtualSize=Math.max(this.virtualSize,i)+f,n&&s&&("slide"===t.effect||"coverflow"===t.effect)&&e.css({width:this.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(this.virtualSize=(_+t.spaceBetween)*m,this.virtualSize=Math.ceil(this.virtualSize/t.slidesPerColumn)-t.spaceBetween,this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){T=[];for(var ee=0;ee<c.length;ee+=1){var te=c[ee];t.roundLengths&&(te=Math.floor(te)),c[ee]<this.virtualSize+c[0]&&T.push(te)}c=T}if(!t.centeredSlides){T=[];for(var ie=0;ie<c.length;ie+=1){var ne=c[ie];t.roundLengths&&(ne=Math.floor(ne)),c[ie]<=this.virtualSize-i&&T.push(ne)}c=T,1<Math.floor(this.virtualSize-i)-Math.floor(c[c.length-1])&&c.push(this.virtualSize-i)}0===c.length&&(c=[0]),0!==t.spaceBetween&&(this.isHorizontal()?n?o.filter(h).css({marginLeft:y+"px"}):o.filter(h).css({marginRight:y+"px"}):o.filter(h).css({marginBottom:y+"px"})),t.centeredSlides&&t.centeredSlidesBounds&&(C=0,u.forEach(function(e){C+=e+(t.spaceBetween?t.spaceBetween:0)}),S=(C-=t.spaceBetween)-i,c=c.map(function(e){return e<0?-p:S<e?S+f:e})),t.centerInsufficientSlides&&(E=0,u.forEach(function(e){E+=e+(t.spaceBetween?t.spaceBetween:0)}),(E-=t.spaceBetween)<i&&(k=(i-E)/2,c.forEach(function(e,t){c[t]=e-k}),d.forEach(function(e,t){d[t]=e+k}))),ae.extend(this,{slides:o,snapGrid:c,slidesGrid:d,slidesSizesGrid:u}),l!==r&&this.emit("slidesLengthChange"),c.length!==v&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),d.length!==g&&this.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i,n=[],s=0;if("number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&1<this.params.slidesPerView)if(this.params.centeredSlides)this.visibleSlides.each(function(e,t){n.push(t)});else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var a=this.activeIndex+t;if(a>this.slides.length)break;n.push(this.slides.eq(a)[0])}else n.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<n.length;t+=1){void 0!==n[t]&&(s=s<(i=n[t].offsetHeight)?i:s)}s&&this.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,n=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var s=n?e:-e;i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var a=0;a<i.length;a+=1){var r,o,l=i[a],c=(s+(t.centeredSlides?this.minTranslate():0)-l.swiperSlideOffset)/(l.swiperSlideSize+t.spaceBetween);(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight)&&(o=(r=-(s-l.swiperSlideOffset))+this.slidesSizesGrid[a],(0<=r&&r<this.size-1||1<o&&o<=this.size||r<=0&&o>=this.size)&&(this.visibleSlides.push(l),this.visibleSlidesIndexes.push(a),i.eq(a).addClass(t.slideVisibleClass))),l.progress=n?-c:c}this.visibleSlides=L(this.visibleSlides)}},updateProgress:function(e){var t;void 0===e&&(t=this.rtlTranslate?-1:1,e=this&&this.translate&&this.translate*t||0);var i=this.params,n=this.maxTranslate()-this.minTranslate(),s=this.progress,a=this.isBeginning,r=a,o=l=this.isEnd,l=0==n?a=!(s=0):(a=(s=(e-this.minTranslate())/n)<=0,1<=s);ae.extend(this,{progress:s,isBeginning:a,isEnd:l}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e),a&&!r&&this.emit("reachBeginning toEdge"),l&&!o&&this.emit("reachEnd toEdge"),(r&&!a||o&&!l)&&this.emit("fromEdge"),this.emit("progress",s)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,n=this.$wrapperEl,s=this.activeIndex,a=this.realIndex,r=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=r?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+s+'"]'):t.eq(s)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass));var o=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===o.length&&(o=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(o.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+o.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i,n,s=this.rtlTranslate?this.translate:-this.translate,a=this.slidesGrid,r=this.snapGrid,o=this.params,l=this.activeIndex,c=this.realIndex,d=this.snapIndex,u=e;if(void 0===u){for(var h=0;h<a.length;h+=1)void 0!==a[h+1]?s>=a[h]&&s<a[h+1]-(a[h+1]-a[h])/2?u=h:s>=a[h]&&s<a[h+1]&&(u=h+1):s>=a[h]&&(u=h);o.normalizeSlideIndex&&(u<0||void 0===u)&&(u=0)}(i=0<=r.indexOf(s)?r.indexOf(s):(t=Math.min(o.slidesPerGroupSkip,u))+Math.floor((u-t)/o.slidesPerGroup))>=r.length&&(i=r.length-1),u!==l?(n=parseInt(this.slides.eq(u).attr("data-swiper-slide-index")||u,10),ae.extend(this,{snapIndex:i,realIndex:n,previousIndex:l,activeIndex:u}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),c!==n&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")):i!==d&&(this.snapIndex=i,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=L(e.target).closest("."+t.slideClass)[0],n=!1;if(i)for(var s=0;s<this.slides.length;s+=1)this.slides[s]===i&&(n=!0);if(!i||!n)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(L(i).attr("data-swiper-slide-index"),10):this.clickedIndex=L(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},T={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,n=this.translate,s=this.$wrapperEl;if(t.virtualTranslate)return i?-n:n;if(t.cssMode)return n;var a=ae.getTranslate(s[0],e);return i&&(a=-a),a||0},setTranslate:function(e,t){var i=this.rtlTranslate,n=this.params,s=this.$wrapperEl,a=this.wrapperEl,r=this.progress,o=0,l=0;this.isHorizontal()?o=i?-e:e:l=e,n.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),n.cssMode?a[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-o:-l:n.virtualTranslate||s.transform("translate3d("+o+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?o:l;var c=this.maxTranslate()-this.minTranslate();(0==c?0:(e-this.minTranslate())/c)!==r&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,n,s){var a;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);var r=this,o=r.params,l=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var c=r.minTranslate(),d=r.maxTranslate(),u=n&&c<e?c:n&&e<d?d:e;if(r.updateProgress(u),o.cssMode){var h=r.isHorizontal();return 0!==t&&l.scrollTo?l.scrollTo(((a={})[h?"left":"top"]=-u,a.behavior="smooth",a)):l[h?"scrollLeft":"scrollTop"]=-u,!0}return 0===t?(r.setTransition(0),r.setTranslate(u),i&&(r.emit("beforeTransitionStart",t,s),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(u),i&&(r.emit("beforeTransitionStart",t,s),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}},C={slideTo:function(e,t,i,n){var s;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=this,r=e;r<0&&(r=0);var o=a.params,l=a.snapGrid,c=a.slidesGrid,d=a.previousIndex,u=a.activeIndex,h=a.rtlTranslate,p=a.wrapperEl;if(a.animating&&o.preventInteractionOnTransition)return!1;var f=Math.min(a.params.slidesPerGroupSkip,r),m=f+Math.floor((r-f)/a.params.slidesPerGroup);m>=l.length&&(m=l.length-1),(u||o.initialSlide||0)===(d||0)&&i&&a.emit("beforeSlideChangeStart");var v,g=-l[m];if(a.updateProgress(g),o.normalizeSlideIndex)for(var y=0;y<c.length;y+=1)-Math.floor(100*g)>=Math.floor(100*c[y])&&(r=y);if(a.initialized&&r!==u){if(!a.allowSlideNext&&g<a.translate&&g<a.minTranslate())return!1;if(!a.allowSlidePrev&&g>a.translate&&g>a.maxTranslate()&&(u||0)!==r)return!1}if(v=u<r?"next":r<u?"prev":"reset",h&&-g===a.translate||!h&&g===a.translate)return a.updateActiveIndex(r),o.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==o.effect&&a.setTranslate(g),"reset"!=v&&(a.transitionStart(i,v),a.transitionEnd(i,v)),!1;if(o.cssMode){var b=a.isHorizontal(),w=-g;return h&&(w=p.scrollWidth-p.offsetWidth-w),0!==t&&p.scrollTo?p.scrollTo(((s={})[b?"left":"top"]=w,s.behavior="smooth",s)):p[b?"scrollLeft":"scrollTop"]=w,!0}return 0===t?(a.setTransition(0),a.setTranslate(g),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,v),a.transitionEnd(i,v)):(a.setTransition(t),a.setTranslate(g),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,v),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,v))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=e;return this.params.loop&&(s+=this.loopedSlides),this.slideTo(s,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this.params,s=this.animating,a=this.activeIndex<n.slidesPerGroupSkip?1:n.slidesPerGroup;if(n.loop){if(s)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+a,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this.params,s=this.animating,a=this.snapGrid,r=this.slidesGrid,o=this.rtlTranslate;if(n.loop){if(s)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,d=l(o?this.translate:-this.translate),u=a.map(l),h=(r.map(l),a[u.indexOf(d)],a[u.indexOf(d)-1]);return void 0===h&&n.cssMode&&a.forEach(function(e){!h&&e<=d&&(h=e)}),void 0!==h&&(c=r.indexOf(h))<0&&(c=this.activeIndex-1),this.slideTo(c,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);var s,a,r=this.activeIndex,o=Math.min(this.params.slidesPerGroupSkip,r),l=o+Math.floor((r-o)/this.params.slidesPerGroup),c=this.rtlTranslate?this.translate:-this.translate;return c>=this.snapGrid[l]?c-(s=this.snapGrid[l])>(this.snapGrid[l+1]-s)*n&&(r+=this.params.slidesPerGroup):c-(a=this.snapGrid[l-1])<=(this.snapGrid[l]-a)*n&&(r-=this.params.slidesPerGroup),r=Math.max(r,0),r=Math.min(r,this.slidesGrid.length-1),this.slideTo(r,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,n=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,a=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(L(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?a<t.loopedSlides-s/2||a>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ae.nextTick(function(){t.slideTo(a)})):t.slideTo(a):a>t.slides.length-s?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ae.nextTick(function(){t.slideTo(a)})):t.slideTo(a)}else t.slideTo(a)}},S={loopCreate:function(){var n=this,e=n.params,t=n.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-s.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var a=0;a<i;a+=1){var r=L(m.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(r)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),n.loopedSlides=Math.ceil(parseFloat(e.loopedSlides||e.slidesPerView,10)),n.loopedSlides+=e.loopAdditionalSlides,n.loopedSlides>s.length&&(n.loopedSlides=s.length);var o=[],l=[];s.each(function(e,t){var i=L(t);e<n.loopedSlides&&l.push(t),e<s.length&&e>=s.length-n.loopedSlides&&o.push(t),i.attr("data-swiper-slide-index",e)});for(var c=0;c<l.length;c+=1)t.append(L(l[c].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var d=o.length-1;0<=d;--d)t.prepend(L(o[d].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,n=this.loopedSlides,s=this.allowSlidePrev,a=this.allowSlideNext,r=this.snapGrid,o=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-r[t]-this.getTranslate();t<n?(e=i.length-3*n+t,e+=n,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((o?-this.translate:this.translate)-l)):t>=i.length-n&&(e=-i.length+t+n,e+=n,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((o?-this.translate:this.translate)-l)),this.allowSlidePrev=s,this.allowSlideNext=a,this.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},k={setGrabCursor:function(e){var t;E.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){E.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},M={appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var n=0;n<e.length;n+=1)e[n]&&t.append(e[n]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&E.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,n=this.activeIndex;t.loop&&this.loopDestroy();var s=n+1;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)e[a]&&i.prepend(e[a]);s=n+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&E.observer||this.update(),this.slideTo(s,0,!1)},addSlide:function(e,t){var i=this.$wrapperEl,n=this.params,s=this.activeIndex;n.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+n.slideClass));var a=this.slides.length;if(e<=0)this.prependSlide(t);else if(a<=e)this.appendSlide(t);else{for(var r=e<s?s+1:s,o=[],l=a-1;e<=l;--l){var c=this.slides.eq(l);c.remove(),o.unshift(c)}if("object"==typeof t&&"length"in t){for(var d=0;d<t.length;d+=1)t[d]&&i.append(t[d]);r=e<s?s+t.length:s}else i.append(t);for(var u=0;u<o.length;u+=1)i.append(o[u]);n.loop&&this.loopCreate(),n.observer&&E.observer||this.update(),n.loop?this.slideTo(r+this.loopedSlides,0,!1):this.slideTo(r,0,!1)}},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,n=this.activeIndex;t.loop&&(n-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var s,a=n;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)s=e[r],this.slides[s]&&this.slides.eq(s).remove(),s<a&&--a;a=Math.max(a,0)}else s=e,this.slides[s]&&this.slides.eq(s).remove(),s<a&&--a,a=Math.max(a,0);t.loop&&this.loopCreate(),t.observer&&E.observer||this.update(),t.loop?this.slideTo(a+this.loopedSlides,0,!1):this.slideTo(a,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},$=(n=se.navigator.platform,s=se.navigator.userAgent,r={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!se.cordova&&!se.phonegap),phonegap:!(!se.cordova&&!se.phonegap),electron:!1},o=se.screen.width,c=se.screen.height,d=s.match(/(Android);?[\s\/]+([\d.]+)?/),u=s.match(/(iPad).*OS\s([\d_]+)/),h=s.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f=0<=s.indexOf("MSIE ")||0<=s.indexOf("Trident/"),v=0<=s.indexOf("Edge/"),g=0<=s.indexOf("Gecko/")&&0<=s.indexOf("Firefox/"),y="Win32"===n,b=0<=s.toLowerCase().indexOf("electron"),w="MacIntel"===n,!u&&w&&E.touch&&(1024===o&&1366===c||834===o&&1194===c||834===o&&1112===c||768===o&&1024===c)&&(u=s.match(/(Version)\/([\d.]+)/),w=!1),r.ie=f,r.edge=v,r.firefox=g,d&&!y&&(r.os="android",r.osVersion=d[2],r.android=!0,r.androidChrome=0<=s.toLowerCase().indexOf("chrome")),(u||p||h)&&(r.os="ios",r.ios=!0),p&&!h&&(r.osVersion=p[2].replace(/_/g,"."),r.iphone=!0),u&&(r.osVersion=u[2].replace(/_/g,"."),r.ipad=!0),h&&(r.osVersion=h[3]?h[3].replace(/_/g,"."):null,r.ipod=!0),r.ios&&r.osVersion&&0<=s.indexOf("Version/")&&"10"===r.osVersion.split(".")[0]&&(r.osVersion=s.toLowerCase().split("version/")[1].split(" ")[0]),r.webView=!(!(p||u||h)||!s.match(/.*AppleWebKit(?!.*Safari)/i)&&!se.navigator.standalone)||se.matchMedia&&se.matchMedia("(display-mode: standalone)").matches,r.webview=r.webView,r.standalone=r.webView,r.desktop=!(r.ios||r.android)||b,r.desktop&&(r.electron=b,r.macos=w,r.windows=y,r.macos&&(r.os="macos"),r.windows&&(r.os="windows")),r.pixelRatio=se.devicePixelRatio||1,r);function P(){var e,t,i,n=this.params,s=this.el;s&&0===s.offsetWidth||(n.breakpoints&&this.setBreakpoint(),e=this.allowSlideNext,t=this.allowSlidePrev,i=this.snapGrid,this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===n.slidesPerView||1<n.slidesPerView)&&this.isEnd&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=t,this.allowSlideNext=e,this.params.watchOverflow&&i!==this.snapGrid&&this.checkOverflow())}var D=!1;function A(){}var z,O={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},j={update:x,translate:T,transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,n=this.params,s=this.previousIndex;if(!n.cssMode){n.autoHeight&&this.updateAutoHeight();var a=(a=t)||(s<i?"next":i<s?"prev":"reset");if(this.emit("transitionStart"),e&&i!==s){if("reset"===a)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===a?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,n=this.previousIndex,s=this.params;if(this.animating=!1,!s.cssMode){this.setTransition(0);var a=(a=t)||(n<i?"next":i<n?"prev":"reset");if(this.emit("transitionEnd"),e&&i!==n){if("reset"===a)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===a?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}},slide:C,loop:S,grabCursor:k,manipulation:M,events:{attachEvents:function(){var e=this.params,t=this.touchEvents,i=this.el,n=this.wrapperEl;this.onTouchStart=function(e){var t,i,n,s,a,r,o,l,c=this.touchEventsData,d=this.params,u=this.touches;this.animating&&d.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),i=L(t.target),"wrapper"===d.touchEventsTarget&&!i.closest(this.wrapperEl).length||(c.isTouchEvent="touchstart"===t.type,!c.isTouchEvent&&"which"in t&&3===t.which||!c.isTouchEvent&&"button"in t&&0<t.button||c.isTouched&&c.isMoved)||(d.noSwiping&&i.closest(d.noSwipingSelector?d.noSwipingSelector:"."+d.noSwipingClass)[0]?this.allowClick=!0:d.swipeHandler&&!i.closest(d.swipeHandler)[0]||(u.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,u.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY,n=u.currentX,s=u.currentY,a=d.edgeSwipeDetection||d.iOSEdgeSwipeDetection,r=d.edgeSwipeThreshold||d.iOSEdgeSwipeThreshold,a&&(n<=r||n>=se.screen.width-r)||(ae.extend(c,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),u.startX=n,u.startY=s,c.touchStartTime=ae.now(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,0<d.threshold&&(c.allowThresholdMove=!1),"touchstart"!==t.type&&(o=!0,i.is(c.formElements)&&(o=!1),m.activeElement&&L(m.activeElement).is(c.formElements)&&m.activeElement!==i[0]&&m.activeElement.blur(),l=o&&this.allowTouchMove&&d.touchStartPreventDefault,(d.touchStartForcePreventDefault||l)&&t.preventDefault()),this.emit("touchStart",t)))))}.bind(this),this.onTouchMove=function(e){var t=this.touchEventsData,i=this.params,n=this.touches,s=this.rtlTranslate,a=e;if(a.originalEvent&&(a=a.originalEvent),t.isTouched){if(!t.isTouchEvent||"mousemove"!==a.type){var r="touchmove"===a.type&&a.targetTouches&&(a.targetTouches[0]||a.changedTouches[0]),o="touchmove"===a.type?r.pageX:a.pageX,l="touchmove"===a.type?r.pageY:a.pageY;if(a.preventedByNestedSwiper)return n.startX=o,void(n.startY=l);if(!this.allowTouchMove)return this.allowClick=!1,void(t.isTouched&&(ae.extend(n,{startX:o,startY:l,currentX:o,currentY:l}),t.touchStartTime=ae.now()));if(t.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(this.isVertical()){if(l<n.startY&&this.translate<=this.maxTranslate()||l>n.startY&&this.translate>=this.minTranslate())return t.isTouched=!1,void(t.isMoved=!1)}else if(o<n.startX&&this.translate<=this.maxTranslate()||o>n.startX&&this.translate>=this.minTranslate())return;if(t.isTouchEvent&&m.activeElement&&a.target===m.activeElement&&L(a.target).is(t.formElements))return t.isMoved=!0,void(this.allowClick=!1);if(t.allowTouchCallbacks&&this.emit("touchMove",a),!(a.targetTouches&&1<a.targetTouches.length)){n.currentX=o,n.currentY=l;var c,d=n.currentX-n.startX,u=n.currentY-n.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(d,2)+Math.pow(u,2))<this.params.threshold))if(void 0===t.isScrolling&&(this.isHorizontal()&&n.currentY===n.startY||this.isVertical()&&n.currentX===n.startX?t.isScrolling=!1:25<=d*d+u*u&&(c=180*Math.atan2(Math.abs(u),Math.abs(d))/Math.PI,t.isScrolling=this.isHorizontal()?c>i.touchAngle:90-c>i.touchAngle)),t.isScrolling&&this.emit("touchMoveOpposite",a),void 0===t.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(t.startMoving=!0)),t.isScrolling)t.isTouched=!1;else if(t.startMoving){this.allowClick=!1,i.cssMode||a.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&a.stopPropagation(),t.isMoved||(i.loop&&this.loopFix(),t.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),t.allowMomentumBounce=!1,!i.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",a)),this.emit("sliderMove",a),t.isMoved=!0;var h=this.isHorizontal()?d:u;n.diff=h,h*=i.touchRatio,s&&(h=-h),this.swipeDirection=0<h?"prev":"next",t.currentTranslate=h+t.startTranslate;var p=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),0<h&&t.currentTranslate>this.minTranslate()?(p=!1,i.resistance&&(t.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+t.startTranslate+h,f))):h<0&&t.currentTranslate<this.maxTranslate()&&(p=!1,i.resistance&&(t.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-t.startTranslate-h,f))),p&&(a.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&t.currentTranslate<t.startTranslate&&(t.currentTranslate=t.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&t.currentTranslate>t.startTranslate&&(t.currentTranslate=t.startTranslate),0<i.threshold){if(!(Math.abs(h)>i.threshold||t.allowThresholdMove))return void(t.currentTranslate=t.startTranslate);if(!t.allowThresholdMove)return t.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,t.currentTranslate=t.startTranslate,void(n.diff=this.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}i.followFinger&&!i.cssMode&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),i.freeMode&&(0===t.velocities.length&&t.velocities.push({position:n[this.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:n[this.isHorizontal()?"currentX":"currentY"],time:ae.now()})),this.updateProgress(t.currentTranslate),this.setTranslate(t.currentTranslate))}}}}else t.startMoving&&t.isScrolling&&this.emit("touchMoveOpposite",a)}.bind(this),this.onTouchEnd=function(e){var t=this,i=t.touchEventsData,n=t.params,s=t.touches,a=t.rtlTranslate,r=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",c),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var d,u,h,p,f,m=ae.now(),v=m-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap click",c),v<300&&m-i.lastClickTime<300&&t.emit("doubleTap doubleClick",c)),i.lastClickTime=ae.now(),ae.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,d=n.followFinger?a?t.translate:-t.translate:-i.currentTranslate,!n.cssMode)if(n.freeMode){if(d<-t.minTranslate())return void t.slideTo(t.activeIndex);if(d>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){1<i.velocities.length?(u=i.velocities.pop(),h=i.velocities.pop(),p=u.position-h.position,f=u.time-h.time,t.velocity=p/f,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(150<f||300<ae.now()-u.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*n.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;a&&(b=-b);var w,x,T,C,S=!1,E=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-E&&(b=t.maxTranslate()-E),w=t.maxTranslate(),S=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>E&&(b=t.minTranslate()+E),w=t.minTranslate(),S=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(n.freeModeSticky){for(var k,M=0;M<l.length;M+=1)if(l[M]>-b){k=M;break}b=-(Math.abs(l[k]-b)<Math.abs(l[k-1]-b)||"next"===t.swipeDirection?l[k]:l[k-1])}if(x&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)g=a?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),n.freeModeSticky&&(g=(T=Math.abs((a?-b:b)-t.translate))<(C=t.slidesSizesGrid[t.activeIndex])?n.speed:T<2*C?1.5*n.speed:2.5*n.speed);else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&S?(t.updateProgress(w),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),setTimeout(function(){t.setTranslate(w),r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||v>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var $=0,P=t.slidesSizesGrid[0],L=0;L<o.length;L+=L<n.slidesPerGroupSkip?1:n.slidesPerGroup){var D=L<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[L+D]?d>=o[L]&&d<o[L+D]&&(P=o[($=L)+D]-o[L]):d>=o[L]&&($=L,P=o[o.length-1]-o[o.length-2])}var A=(d-o[$])/P,z=$<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(v>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(A>=n.longSwipesRatio?t.slideTo($+z):t.slideTo($)),"prev"===t.swipeDirection&&(A>1-n.longSwipesRatio?t.slideTo($+z):t.slideTo($))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||c.target!==t.navigation.nextEl&&c.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo($+z),"prev"===t.swipeDirection&&t.slideTo($)):c.target===t.navigation.nextEl?t.slideTo($+z):t.slideTo($)}}}.bind(this),e.cssMode&&(this.onScroll=function(){var e=this.wrapperEl,t=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=t?e.scrollWidth-e.offsetWidth-e.scrollLeft:-e.scrollLeft:this.translate=-e.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0==i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(t?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}.bind(this)),this.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(this);var s,a=!!e.nested;!E.touch&&E.pointerEvents?(i.addEventListener(t.start,this.onTouchStart,!1),m.addEventListener(t.move,this.onTouchMove,a),m.addEventListener(t.end,this.onTouchEnd,!1)):(E.touch&&(s=!("touchstart"!==t.start||!E.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1},i.addEventListener(t.start,this.onTouchStart,s),i.addEventListener(t.move,this.onTouchMove,E.passiveListener?{passive:!1,capture:a}:a),i.addEventListener(t.end,this.onTouchEnd,s),t.cancel&&i.addEventListener(t.cancel,this.onTouchEnd,s),D||(m.addEventListener("touchstart",A),D=!0)),(e.simulateTouch&&!$.ios&&!$.android||e.simulateTouch&&!E.touch&&$.ios)&&(i.addEventListener("mousedown",this.onTouchStart,!1),m.addEventListener("mousemove",this.onTouchMove,a),m.addEventListener("mouseup",this.onTouchEnd,!1))),(e.preventClicks||e.preventClicksPropagation)&&i.addEventListener("click",this.onClick,!0),e.cssMode&&n.addEventListener("scroll",this.onScroll),e.updateOnWindowResize?this.on($.ios||$.android?"resize orientationchange observerUpdate":"resize observerUpdate",P,!0):this.on("observerUpdate",P,!0)},detachEvents:function(){var e,t=this.params,i=this.touchEvents,n=this.el,s=this.wrapperEl,a=!!t.nested;!E.touch&&E.pointerEvents?(n.removeEventListener(i.start,this.onTouchStart,!1),m.removeEventListener(i.move,this.onTouchMove,a),m.removeEventListener(i.end,this.onTouchEnd,!1)):(E.touch&&(e=!("onTouchStart"!==i.start||!E.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.removeEventListener(i.start,this.onTouchStart,e),n.removeEventListener(i.move,this.onTouchMove,a),n.removeEventListener(i.end,this.onTouchEnd,e),i.cancel&&n.removeEventListener(i.cancel,this.onTouchEnd,e)),(t.simulateTouch&&!$.ios&&!$.android||t.simulateTouch&&!E.touch&&$.ios)&&(n.removeEventListener("mousedown",this.onTouchStart,!1),m.removeEventListener("mousemove",this.onTouchMove,a),m.removeEventListener("mouseup",this.onTouchEnd,!1))),(t.preventClicks||t.preventClicksPropagation)&&n.removeEventListener("click",this.onClick,!0),t.cssMode&&s.removeEventListener("scroll",this.onScroll),this.off($.ios||$.android?"resize orientationchange observerUpdate":"resize observerUpdate",P)}},breakpoints:{setBreakpoint:function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides;void 0===i&&(i=0);var n,s,a,r,o,l,c,d=this.params,u=this.$el,h=d.breakpoints;!h||h&&0===Object.keys(h).length||(n=this.getBreakpoint(h))&&this.currentBreakpoint!==n&&((s=n in h?h[n]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(e){var t=s[e];void 0!==t&&(s[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),a=s||this.originalParams,r=1<d.slidesPerColumn,o=1<a.slidesPerColumn,r&&!o?u.removeClass(d.containerModifierClass+"multirow "+d.containerModifierClass+"multirow-column"):!r&&o&&(u.addClass(d.containerModifierClass+"multirow"),"column"===a.slidesPerColumnFill&&u.addClass(d.containerModifierClass+"multirow-column")),l=a.direction&&a.direction!==d.direction,c=d.loop&&(a.slidesPerView!==d.slidesPerView||l),l&&t&&this.changeDirection(),ae.extend(this.params,a),ae.extend(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=n,c&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-i+this.loopedSlides,0,!1)),this.emit("breakpoint",a))},getBreakpoint:function(e){if(e){var t=!1,i=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:se.innerHeight*t,point:e}});i.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var n=0;n<i.length;n+=1){var s=i[n],a=s.point;s.value<=se.innerWidth&&(t=a)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this.params,t=this.isLocked,i=0<this.slides.length&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,n=this.$el,s=[];s.push("initialized"),s.push(i.direction),i.freeMode&&s.push("free-mode"),i.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<i.slidesPerColumn&&(s.push("multirow"),"column"===i.slidesPerColumnFill&&s.push("multirow-column")),$.android&&s.push("android"),$.ios&&s.push("ios"),i.cssMode&&s.push("css-mode"),s.forEach(function(e){t.push(i.containerModifierClass+e)}),n.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,n,s,a){var r;function o(){a&&a()}(!e.complete||!s)&&t?((r=new se.Image).onload=o,r.onerror=o,n&&(r.sizes=n),i&&(r.srcset=i),t&&(r.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},I={},N=function(u){function h(){for(var e,s,t=[],i=arguments.length;i--;)t[i]=arguments[i];s=(s=1===t.length&&t[0].constructor&&t[0].constructor===Object?t[0]:(e=t[0],t[1]))||{},s=ae.extend({},s),e&&!s.el&&(s.el=e),u.call(this,s),Object.keys(j).forEach(function(t){Object.keys(j[t]).forEach(function(e){h.prototype[e]||(h.prototype[e]=j[t][e])})});var a=this;void 0===a.modules&&(a.modules={}),Object.keys(a.modules).forEach(function(e){var t=a.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=typeof n||null===n)return;if(!(i in s&&"enabled"in n))return;!0===s[i]&&(s[i]={enabled:!0}),"object"!=typeof s[i]||"enabled"in s[i]||(s[i].enabled=!0),s[i]||(s[i]={enabled:!1})}});var n=ae.extend({},O);a.useModulesParams(n),a.params=ae.extend({},n,I,s),a.originalParams=ae.extend({},a.params),a.passedParams=ae.extend({},s);var r,o,l,c=(a.$=L)(a.params.el);if(e=c[0]){if(1<c.length){var d=[];return c.each(function(e,t){var i=ae.extend({},s,{el:t});d.push(new h(i))}),d}return e.swiper=a,c.data("swiper",a),e&&e.shadowRoot&&e.shadowRoot.querySelector?(r=L(e.shadowRoot.querySelector("."+a.params.wrapperClass))).children=function(e){return c.children(e)}:r=c.children("."+a.params.wrapperClass),ae.extend(a,{$el:c,el:e,$wrapperEl:r,wrapperEl:r[0],classNames:[],slides:L(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===a.params.direction},isVertical:function(){return"vertical"===a.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===c.css("direction"),rtlTranslate:"horizontal"===a.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===r.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEvents:(o=["touchstart","touchmove","touchend","touchcancel"],l=E.pointerEvents?["pointerdown","pointermove","pointerup"]:["mousedown","mousemove","mouseup"],a.touchEventsTouch={start:o[0],move:o[1],end:o[2],cancel:o[3]},a.touchEventsDesktop={start:l[0],move:l[1],end:l[2]},E.touch||!a.params.simulateTouch?a.touchEventsTouch:a.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:ae.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.useModules(),a.params.init&&a.init(),a}}u&&(h.__proto__=u),h.prototype=Object.create(u&&u.prototype);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return(h.prototype.constructor=h).prototype.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,n=this.size,s=this.activeIndex,a=1;if(e.centeredSlides){for(var r,o=t[s].swiperSlideSize,l=s+1;l<t.length;l+=1)t[l]&&!r&&(a+=1,(o+=t[l].swiperSlideSize)>n&&(r=!0));for(var c=s-1;0<=c;--c)t[c]&&!r&&(a+=1,(o+=t[c].swiperSlideSize)>n&&(r=!0))}else for(var d=s+1;d<t.length;d+=1)i[d]-i[s]<n&&(a+=1);return a},h.prototype.update=function(){var e,t,i=this;function n(){var e=i.rtlTranslate?-1*i.translate:i.translate,t=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(t),i.updateActiveIndex(),i.updateSlidesClasses()}i&&!i.destroyed&&(e=i.snapGrid,(t=i.params).breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(n(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||n(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update"))},h.prototype.changeDirection=function(i,e){void 0===e&&(e=!0);var t=this.params.direction;return(i=i||("horizontal"===t?"vertical":"horizontal"))===t||"horizontal"!==i&&"vertical"!==i||(this.$el.removeClass(""+this.params.containerModifierClass+t).addClass(""+this.params.containerModifierClass+i),this.params.direction=i,this.slides.each(function(e,t){"vertical"===i?t.style.width="":t.style.height=""}),this.emit("changeDirection"),e&&this.update()),this},h.prototype.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},h.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,s=i.$el,a=i.$wrapperEl,r=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),a.removeAttr("style"),r&&r.length&&r.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),ae.deleteProps(i)),i.destroyed=!0),null},h.extendDefaults=function(e){ae.extend(I,e)},e.extendedDefaults.get=function(){return I},e.defaults.get=function(){return O},e.Class.get=function(){return u},e.$.get=function(){return L},Object.defineProperties(h,e),h}(e),H={name:"device",proto:{device:$},static:{device:$}},q={name:"support",proto:{support:E},static:{support:E}},F={isEdge:!!se.navigator.userAgent.match(/Edge/g),isSafari:0<=(z=se.navigator.userAgent.toLowerCase()).indexOf("safari")&&z.indexOf("chrome")<0&&z.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(se.navigator.userAgent)},R={name:"browser",proto:{browser:F},static:{browser:F}},B={name:"resize",create:function(){var e=this;ae.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){se.addEventListener("resize",this.resize.resizeHandler),se.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){se.removeEventListener("resize",this.resize.resizeHandler),se.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},X={func:se.MutationObserver||se.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=new X.func(function(e){var t;1!==e.length?(t=function(){i.emit("observerUpdate",e[0])},se.requestAnimationFrame?se.requestAnimationFrame(t):se.setTimeout(t,0)):i.emit("observerUpdate",e[0])});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(n)},init:function(){if(E.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},Y={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){ae.extend(this,{observer:{init:X.init.bind(this),attach:X.attach.bind(this),destroy:X.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},V={update:function(e){var t=this,i=t.params,n=i.slidesPerView,s=i.slidesPerGroup,a=i.centeredSlides,r=t.params.virtual,o=r.addSlidesBefore,l=r.addSlidesAfter,c=t.virtual,d=c.from,u=c.to,h=c.slides,p=c.slidesGrid,f=c.renderSlide,m=c.offset;t.updateActiveIndex();var v,g=t.activeIndex||0,y=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",b=a?(v=Math.floor(n/2)+s+o,Math.floor(n/2)+s+l):(v=n+(s-1)+o,s+l),w=Math.max((g||0)-b,0),x=Math.min((g||0)+v,h.length-1),T=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function C(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(ae.extend(t.virtual,{from:w,to:x,offset:T,slidesGrid:t.slidesGrid}),d===w&&u===x&&!e)return t.slidesGrid!==p&&T!==m&&t.slides.css(y,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:w,to:x,slides:function(){for(var e=[],t=w;t<=x;t+=1)e.push(h[t]);return e}()}),void C();var S=[],E=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var k=d;k<=u;k+=1)(k<w||x<k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+k+'"]').remove();for(var M=0;M<h.length;M+=1)w<=M&&M<=x&&(void 0===u||e?E.push(M):(u<M&&E.push(M),M<d&&S.push(M)));E.forEach(function(e){t.$wrapperEl.append(f(h[e],e))}),S.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(h[e],e))}),t.$wrapperEl.children(".swiper-slide").css(y,T+"px"),C()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var n=i.renderSlide?L(i.renderSlide.call(this,e,t)):L('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return n.attr("data-swiper-slide-index")||n.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=n),n},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var n,s,t=this.activeIndex,i=t+1,a=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&this.virtual.slides.unshift(e[r]);i=t+e.length,a=e.length}else this.virtual.slides.unshift(e);this.params.virtual.cache&&(n=this.virtual.cache,s={},Object.keys(n).forEach(function(e){var t=n[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),s[parseInt(e,10)+a]=t}),this.virtual.cache=s),this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)this.virtual.slides.splice(e[i],1),this.params.virtual.cache&&delete this.virtual.cache[e[i]],e[i]<t&&--t,t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&--t,t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},_={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){ae.extend(this,{virtual:{update:V.update.bind(this),appendSlide:V.appendSlide.bind(this),prependSlide:V.prependSlide.bind(this),removeSlide:V.removeSlide.bind(this),removeAllSlides:V.removeAllSlides.bind(this),renderSlide:V.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e;this.params.virtual.enabled&&(this.classNames.push(this.params.containerModifierClass+"virtual"),e={watchSlidesProgress:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e),this.params.initialSlide||this.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},W={handle:function(e){var t=this.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var n=i.keyCode||i.charCode;if(!this.allowSlideNext&&(this.isHorizontal()&&39===n||this.isVertical()&&40===n||34===n))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&37===n||this.isVertical()&&38===n||33===n))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||m.activeElement&&m.activeElement.nodeName&&("input"===m.activeElement.nodeName.toLowerCase()||"textarea"===m.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(33===n||34===n||37===n||39===n||38===n||40===n)){var s=!1;if(0<this.$el.parents("."+this.params.slideClass).length&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var a=se.innerWidth,r=se.innerHeight,o=this.$el.offset();t&&(o.left-=this.$el[0].scrollLeft);for(var l=[[o.left,o.top],[o.left+this.width,o.top],[o.left,o.top+this.height],[o.left+this.width,o.top+this.height]],c=0;c<l.length;c+=1){var d=l[c];0<=d[0]&&d[0]<=a&&0<=d[1]&&d[1]<=r&&(s=!0)}if(!s)return}this.isHorizontal()?(33!==n&&34!==n&&37!==n&&39!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==n&&39!==n||t)&&(33!==n&&37!==n||!t)||this.slideNext(),(33!==n&&37!==n||t)&&(34!==n&&39!==n||!t)||this.slidePrev()):(33!==n&&34!==n&&38!==n&&40!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==n&&40!==n||this.slideNext(),33!==n&&38!==n||this.slidePrev()),this.emit("keyPress",n)}},enable:function(){this.keyboard.enabled||(L(m).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(L(m).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},G={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){ae.extend(this,{keyboard:{enabled:!1,enable:W.enable.bind(this),disable:W.disable.bind(this),handle:W.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}},U={lastScrollTime:ae.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return-1<se.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((t="onwheel"in m)||((e=m.createElement("div")).setAttribute("onwheel","return;"),t="function"==typeof e.onwheel),!t&&m.implementation&&m.implementation.hasFeature&&!0!==m.implementation.hasFeature("","")&&(t=m.implementation.hasFeature("Events.wheel","3.0")),t?"wheel":"mousewheel");var e,t},normalize:function(e){var t=0,i=0,n=0,s=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,s=10*i,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=s,s=0),(n||s)&&e.deltaMode&&(1===e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!i&&(i=s<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,n=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var s=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(s=L(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!s[0].contains(t.target)&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,r=i.rtlTranslate?-1:1,o=U.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=o.pixelX*r}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*r:-o.pixelY;if(0===a)return!0;if(n.invert&&(a=-a),i.params.freeMode){var l={time:ae.now(),delta:Math.abs(a),direction:Math.sign(a)},c=i.mousewheel.lastEventBeforeSnap,d=c&&l.time<c.time+500&&l.delta<=c.delta&&l.direction===c.direction;if(!d){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var u,h,p,f,m=i.getTranslate()+a*n.sensitivity,v=i.isBeginning,g=i.isEnd;if(m>=i.minTranslate()&&(m=i.minTranslate()),m<=i.maxTranslate()&&(m=i.maxTranslate()),i.setTransition(0),i.setTranslate(m),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!v&&i.isBeginning||!g&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0,15<=(u=i.mousewheel.recentWheelEvents).length&&u.shift(),h=u.length?u[u.length-1]:void 0,p=u[0],u.push(l),h&&(l.delta>h.delta||l.direction!==h.direction)?u.splice(0):15<=u.length&&l.time-p.time<500&&1<=p.delta-l.delta&&l.delta<=6&&(f=0<a?.8:.2,i.mousewheel.lastEventBeforeSnap=l,u.splice(0),i.mousewheel.timeout=ae.nextTick(function(){i.slideToClosest(i.params.speed,!0,void 0,f)},0)),i.mousewheel.timeout||(i.mousewheel.timeout=ae.nextTick(function(){i.mousewheel.lastEventBeforeSnap=l,u.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))),d||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),m===i.minTranslate()||m===i.maxTranslate())return!0}}else{var y={time:ae.now(),delta:Math.abs(a),direction:Math.sign(a),raw:e},b=i.mousewheel.recentWheelEvents;2<=b.length&&b.shift();var w=b.length?b[b.length-1]:void 0;if(b.push(y),(!w||y.direction!==w.direction||y.delta>w.delta)&&i.mousewheel.animateSlider(y),i.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){return 6<=e.delta&&ae.now()-this.mousewheel.lastScrollTime<60||(e.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",e.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",e.raw)),this.mousewheel.lastScrollTime=(new se.Date).getTime(),!1)},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=U.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=L(this.params.mousewheel.eventsTarged)),t.on("mouseenter",this.mousewheel.handleMouseEnter),t.on("mouseleave",this.mousewheel.handleMouseLeave),t.on(e,this.mousewheel.handle),this.mousewheel.enabled=!0},disable:function(){var e=U.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=L(this.params.mousewheel.eventsTarged)),t.off(e,this.mousewheel.handle),!(this.mousewheel.enabled=!1)}},K={update:function(){var e,t,i,n=this.params.navigation;this.params.loop||(t=(e=this.navigation).$nextEl,(i=e.$prevEl)&&0<i.length&&(this.isBeginning?i.addClass(n.disabledClass):i.removeClass(n.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)),t&&0<t.length&&(this.isEnd?t.addClass(n.disabledClass):t.removeClass(n.disabledClass),t[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=L(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===this.$el.find(i.nextEl).length&&(e=this.$el.find(i.nextEl))),i.prevEl&&(t=L(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===this.$el.find(i.prevEl).length&&(t=this.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",this.navigation.onNextClick),t&&0<t.length&&t.on("click",this.navigation.onPrevClick),ae.extend(this.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},Q={update:function(){var e=this.rtl,s=this.params.pagination;if(s.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var a,t,i,n,r,o=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,l=this.pagination.$el,c=this.params.loop?Math.ceil((o-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((a=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>o-1-2*this.loopedSlides&&(a-=o-2*this.loopedSlides),c-1<a&&(a-=c),a<0&&"bullets"!==this.params.paginationType&&(a=c+a)):a=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===s.type&&this.pagination.bullets&&0<this.pagination.bullets.length){var d,u,h,p,f,m,v=this.pagination.bullets;if(s.dynamicBullets&&(this.pagination.bulletSize=v.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),l.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(s.dynamicMainBullets+4)+"px"),1<s.dynamicMainBullets&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=a-this.previousIndex,this.pagination.dynamicBulletIndex>s.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=s.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),d=a-this.pagination.dynamicBulletIndex,h=((u=d+(Math.min(v.length,s.dynamicMainBullets)-1))+d)/2),v.removeClass(s.bulletActiveClass+" "+s.bulletActiveClass+"-next "+s.bulletActiveClass+"-next-next "+s.bulletActiveClass+"-prev "+s.bulletActiveClass+"-prev-prev "+s.bulletActiveClass+"-main"),1<l.length)v.each(function(e,t){var i=L(t),n=i.index();n===a&&i.addClass(s.bulletActiveClass),s.dynamicBullets&&(d<=n&&n<=u&&i.addClass(s.bulletActiveClass+"-main"),n===d&&i.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),n===u&&i.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next"))});else{var g=v.eq(a),y=g.index();if(g.addClass(s.bulletActiveClass),s.dynamicBullets){for(var b=v.eq(d),w=v.eq(u),x=d;x<=u;x+=1)v.eq(x).addClass(s.bulletActiveClass+"-main");if(this.params.loop)if(y>=v.length-s.dynamicMainBullets){for(var T=s.dynamicMainBullets;0<=T;--T)v.eq(v.length-T).addClass(s.bulletActiveClass+"-main");v.eq(v.length-s.dynamicMainBullets-1).addClass(s.bulletActiveClass+"-prev")}else b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next");else b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next")}}s.dynamicBullets&&(p=Math.min(v.length,s.dynamicMainBullets+4),f=(this.pagination.bulletSize*p-this.pagination.bulletSize)/2-h*this.pagination.bulletSize,m=e?"right":"left",v.css(this.isHorizontal()?m:"top",f+"px"))}"fraction"===s.type&&(l.find("."+s.currentClass).text(s.formatFractionCurrent(a+1)),l.find("."+s.totalClass).text(s.formatFractionTotal(c))),"progressbar"===s.type&&(t=s.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical",i=(a+1)/c,r=n=1,"horizontal"==t?n=i:r=i,l.find("."+s.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+n+") scaleY("+r+")").transition(this.params.speed)),"custom"===s.type&&s.renderCustom?(l.html(s.renderCustom(this,a+1,c)),this.emit("paginationRender",this,l[0])):this.emit("paginationUpdate",this,l[0]),l[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](s.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,n="";if("bullets"===e.type){for(var s=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,a=0;a<s;a+=1)e.renderBullet?n+=e.renderBullet.call(this,a,e.bulletClass):n+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(n),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(n)),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(n)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e,i=this,t=i.params.pagination;!t.el||0!==(e=L(t.el)).length&&(i.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1===i.$el.find(t.el).length&&(e=i.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(e){e.preventDefault();var t=L(this).index()*i.params.slidesPerGroup;i.params.loop&&(t+=i.loopedSlides),i.slideTo(t)}),ae.extend(i.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this.params.pagination;t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length&&((e=this.pagination.$el).removeClass(t.hiddenClass),e.removeClass(t.modifierClass+t.type),this.pagination.bullets&&this.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&e.off("click","."+t.bulletClass))}},Z={setTranslate:function(){var e,t,i,n,s,a,r,o,l,c;this.params.scrollbar.el&&this.scrollbar.el&&(e=this.scrollbar,t=this.rtlTranslate,i=this.progress,n=e.dragSize,s=e.trackSize,a=e.$dragEl,r=e.$el,o=this.params.scrollbar,c=(s-(l=n))*i,t?0<(c=-c)?(l=n-c,c=0):s<-c+n&&(l=s+c):c<0?(l=n+c,c=0):s<c+n&&(l=s-c),this.isHorizontal()?(a.transform("translate3d("+c+"px, 0, 0)"),a[0].style.width=l+"px"):(a.transform("translate3d(0px, "+c+"px, 0)"),a[0].style.height=l+"px"),o.hide&&(clearTimeout(this.scrollbar.timeout),r[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){r[0].style.opacity=0,r.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,i,n,s,a,r;this.params.scrollbar.el&&this.scrollbar.el&&(t=(e=this.scrollbar).$dragEl,i=e.$el,t[0].style.width="",t[0].style.height="",n=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,a=(s=this.size/this.virtualSize)*(n/this.size),r="auto"===this.params.scrollbar.dragSize?n*s:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=r+"px":t[0].style.height=r+"px",i[0].style.display=1<=s?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),ae.extend(e,{trackSize:n,divider:s,moveDivider:a,dragSize:r}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t=this.scrollbar,i=this.rtlTranslate,n=t.$el,s=t.dragSize,a=t.trackSize,r=t.dragStartPos,o=(t.getPointerPosition(e)-n.offset()[this.isHorizontal()?"left":"top"]-(null!==r?r:s/2))/(a-s);o=Math.max(Math.min(o,1),0),i&&(o=1-o);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*o;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,s=i.$el,a=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=e.target===a[0]||e.target===a?i.getPointerPosition(e)-e.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),n.transition(100),a.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),s.transition(0),t.hide&&s.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,n=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),n.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,s=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),n.transition("")),t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=ae.nextTick(function(){s.css("opacity",0),s.transition(400)},1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){var e,t,i,n,s,a,r;this.params.scrollbar.el&&(e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,n=this.params,s=e.$el[0],a=!(!E.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},r=!(!E.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},E.touch?(s.addEventListener(t.start,this.scrollbar.onDragStart,a),s.addEventListener(t.move,this.scrollbar.onDragMove,a),s.addEventListener(t.end,this.scrollbar.onDragEnd,r)):(s.addEventListener(i.start,this.scrollbar.onDragStart,a),m.addEventListener(i.move,this.scrollbar.onDragMove,a),m.addEventListener(i.end,this.scrollbar.onDragEnd,r)))},disableDraggable:function(){var e,t,i,n,s,a,r;this.params.scrollbar.el&&(e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,n=this.params,s=e.$el[0],a=!(!E.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},r=!(!E.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},E.touch?(s.removeEventListener(t.start,this.scrollbar.onDragStart,a),s.removeEventListener(t.move,this.scrollbar.onDragMove,a),s.removeEventListener(t.end,this.scrollbar.onDragEnd,r)):(s.removeEventListener(i.start,this.scrollbar.onDragStart,a),m.removeEventListener(i.move,this.scrollbar.onDragMove,a),m.removeEventListener(i.end,this.scrollbar.onDragEnd,r)))},init:function(){var e,t,i,n,s;this.params.scrollbar.el&&(e=this.scrollbar,t=this.$el,n=L((i=this.params.scrollbar).el),this.params.uniqueNavElements&&"string"==typeof i.el&&1<n.length&&1===t.find(i.el).length&&(n=t.find(i.el)),0===(s=n.find("."+this.params.scrollbar.dragClass)).length&&(s=L('<div class="'+this.params.scrollbar.dragClass+'"></div>'),n.append(s)),ae.extend(e,{$el:n,el:n[0],$dragEl:s,dragEl:s[0]}),i.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},J={setTransform:function(e,t){var i,n,s=this.rtl,a=L(e),r=s?-1:1,o=a.attr("data-swiper-parallax")||"0",l=a.attr("data-swiper-parallax-x"),c=a.attr("data-swiper-parallax-y"),d=a.attr("data-swiper-parallax-scale"),u=a.attr("data-swiper-parallax-opacity");l||c?(l=l||"0",c=c||"0"):this.isHorizontal()?(l=o,c="0"):(c=o,l="0"),l=0<=l.indexOf("%")?parseInt(l,10)*t*r+"%":l*t*r+"px",c=0<=c.indexOf("%")?parseInt(c,10)*t+"%":c*t+"px",null!=u&&(i=u-(u-1)*(1-Math.abs(t)),a[0].style.opacity=i),null==d?a.transform("translate3d("+l+", "+c+", 0px)"):(n=d-(d-1)*(1-Math.abs(t)),a.transform("translate3d("+l+", "+c+", 0px) scale("+n+")"))},setTranslate:function(){var n=this,e=n.$el,t=n.slides,s=n.progress,a=n.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){n.parallax.setTransform(t,s)}),t.each(function(e,t){var i=t.progress;1<n.params.slidesPerGroup&&"auto"!==n.params.slidesPerView&&(i+=Math.ceil(e/2)-s*(a.length-1)),i=Math.min(Math.max(i,-1),1),L(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){n.parallax.setTransform(t,i)})})},setTransition:function(s){void 0===s&&(s=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var i=L(t),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||s;0===s&&(n=0),i.transition(n)})}},ee={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(s-i,2))},onGestureStart:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!E.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,n.scaleStart=ee.getDistanceBetweenTouches(e)}n.$slideEl&&n.$slideEl.length||(n.$slideEl=L(e.target).closest("."+this.params.slideClass),0===n.$slideEl.length&&(n.$slideEl=this.slides.eq(this.activeIndex)),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+t.containerClass),n.maxRatio=n.$imageWrapEl.attr("data-swiper-zoom")||t.maxRatio,0!==n.$imageWrapEl.length)?(n.$imageEl&&n.$imageEl.transition(0),this.zoom.isScaling=!0):n.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!E.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=ee.getDistanceBetweenTouches(e)}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=E.gestures?e.scale*i.currentScale:n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+Math.pow(i.scale-n.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!E.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!$.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),t.minRatio),n.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,n=t.image;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||($.android&&e.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,n=t.image,s=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,n.isTouched&&i.$slideEl)){n.isMoved||(n.width=i.$imageEl[0].offsetWidth,n.height=i.$imageEl[0].offsetHeight,n.startX=ae.getTranslate(i.$imageWrapEl[0],"x")||0,n.startY=ae.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(n.startX=-n.startX,n.startY=-n.startY));var a=n.width*t.scale,r=n.height*t.scale;if(!(a<i.slideWidth&&r<i.slideHeight)){if(n.minX=Math.min(i.slideWidth/2-a/2,0),n.maxX=-n.minX,n.minY=Math.min(i.slideHeight/2-r/2,0),n.maxY=-n.minY,n.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!n.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(n.minX)===Math.floor(n.startX)&&n.touchesCurrent.x<n.touchesStart.x||Math.floor(n.maxX)===Math.floor(n.startX)&&n.touchesCurrent.x>n.touchesStart.x))return void(n.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(n.minY)===Math.floor(n.startY)&&n.touchesCurrent.y<n.touchesStart.y||Math.floor(n.maxY)===Math.floor(n.startY)&&n.touchesCurrent.y>n.touchesStart.y))return void(n.isTouched=!1)}e.preventDefault(),e.stopPropagation(),n.isMoved=!0,n.currentX=n.touchesCurrent.x-n.touchesStart.x+n.startX,n.currentY=n.touchesCurrent.y-n.touchesStart.y+n.startY,n.currentX<n.minX&&(n.currentX=n.minX+1-Math.pow(n.minX-n.currentX+1,.8)),n.currentX>n.maxX&&(n.currentX=n.maxX-1+Math.pow(n.currentX-n.maxX+1,.8)),n.currentY<n.minY&&(n.currentY=n.minY+1-Math.pow(n.minY-n.currentY+1,.8)),n.currentY>n.maxY&&(n.currentY=n.maxY-1+Math.pow(n.currentY-n.maxY+1,.8)),s.prevPositionX||(s.prevPositionX=n.touchesCurrent.x),s.prevPositionY||(s.prevPositionY=n.touchesCurrent.y),s.prevTime||(s.prevTime=Date.now()),s.x=(n.touchesCurrent.x-s.prevPositionX)/(Date.now()-s.prevTime)/2,s.y=(n.touchesCurrent.y-s.prevPositionY)/(Date.now()-s.prevTime)/2,Math.abs(n.touchesCurrent.x-s.prevPositionX)<2&&(s.x=0),Math.abs(n.touchesCurrent.y-s.prevPositionY)<2&&(s.y=0),s.prevPositionX=n.touchesCurrent.x,s.prevPositionY=n.touchesCurrent.y,s.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var s=300,a=300,r=n.x*s,o=i.currentX+r,l=n.y*a,c=i.currentY+l;0!==n.x&&(s=Math.abs((o-i.currentX)/n.x)),0!==n.y&&(a=Math.abs((c-i.currentY)/n.y));var d=Math.max(s,a);i.currentX=o,i.currentY=c;var u=i.width*e.scale,h=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-u/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(d).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,n,s,a,r,o,l,c,d,u,h,p,f,m,v,g=this.zoom,y=this.params.zoom,b=g.gesture,w=g.image;b.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?b.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):b.$slideEl=this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),b.$imageWrapEl=b.$imageEl.parent("."+y.containerClass)),b.$imageEl&&0!==b.$imageEl.length&&(b.$slideEl.addClass(""+y.zoomedSlideClass),i=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),g.scale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,g.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(m=b.$slideEl[0].offsetWidth,v=b.$slideEl[0].offsetHeight,n=b.$slideEl.offset().left+m/2-t,s=b.$slideEl.offset().top+v/2-i,o=b.$imageEl[0].offsetWidth,l=b.$imageEl[0].offsetHeight,c=o*g.scale,d=l*g.scale,p=-(u=Math.min(m/2-c/2,0)),f=-(h=Math.min(v/2-d/2,0)),(a=n*g.scale)<u&&(a=u),p<a&&(a=p),(r=s*g.scale)<h&&(r=h),f<r&&(r=f)):r=a=0,b.$imageWrapEl.transition(300).transform("translate3d("+a+"px, "+r+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+g.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e,t,i,n=this.zoom;n.enabled||(n.enabled=!0,e=!("touchstart"!==this.touchEvents.start||!E.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},t=!E.passiveListener||{passive:!1,capture:!0},i="."+this.params.slideClass,E.gestures?(this.$wrapperEl.on("gesturestart",i,n.onGestureStart,e),this.$wrapperEl.on("gesturechange",i,n.onGestureChange,e),this.$wrapperEl.on("gestureend",i,n.onGestureEnd,e)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,i,n.onGestureStart,e),this.$wrapperEl.on(this.touchEvents.move,i,n.onGestureChange,t),this.$wrapperEl.on(this.touchEvents.end,i,n.onGestureEnd,e),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,i,n.onGestureEnd,e)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,n.onTouchMove,t))},disable:function(){var e,t,i,n=this.zoom;n.enabled&&(this.zoom.enabled=!1,e=!("touchstart"!==this.touchEvents.start||!E.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},t=!E.passiveListener||{passive:!1,capture:!0},i="."+this.params.slideClass,E.gestures?(this.$wrapperEl.off("gesturestart",i,n.onGestureStart,e),this.$wrapperEl.off("gesturechange",i,n.onGestureChange,e),this.$wrapperEl.off("gestureend",i,n.onGestureEnd,e)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,i,n.onGestureStart,e),this.$wrapperEl.off(this.touchEvents.move,i,n.onGestureChange,t),this.$wrapperEl.off(this.touchEvents.end,i,n.onGestureEnd,e),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,i,n.onGestureEnd,e)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,n.onTouchMove,t))}},te={loadInSlide:function(e,l){void 0===l&&(l=!0);var c,t,d=this,u=d.params.lazy;void 0!==e&&0!==d.slides.length&&(t=(c=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e)).find("."+u.elementClass+":not(."+u.loadedClass+"):not(."+u.loadingClass+")"),!c.hasClass(u.elementClass)||c.hasClass(u.loadedClass)||c.hasClass(u.loadingClass)||(t=t.add(c[0])),0!==t.length&&t.each(function(e,t){var n=L(t);n.addClass(u.loadingClass);var s=n.attr("data-background"),a=n.attr("data-src"),r=n.attr("data-srcset"),o=n.attr("data-sizes");d.loadImage(n[0],a||s,r,o,!1,function(){var e,t,i;null==d||!d||d&&!d.params||d.destroyed||(s?(n.css("background-image",'url("'+s+'")'),n.removeAttr("data-background")):(r&&(n.attr("srcset",r),n.removeAttr("data-srcset")),o&&(n.attr("sizes",o),n.removeAttr("data-sizes")),a&&(n.attr("src",a),n.removeAttr("data-src"))),n.addClass(u.loadedClass).removeClass(u.loadingClass),c.find("."+u.preloaderClass).remove(),d.params.loop&&l&&(e=c.attr("data-swiper-slide-index"),c.hasClass(d.params.slideDuplicateClass)?(t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")"),d.lazy.loadInSlide(t.index(),!1)):(i=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]'),d.lazy.loadInSlide(i.index(),!1))),d.emit("lazyImageReady",c[0],n[0]),d.params.autoHeight&&d.updateAutoHeight())}),d.emit("lazyImageLoad",c[0],n[0])}))},load:function(){var n=this,t=n.$wrapperEl,i=n.params,s=n.slides,e=n.activeIndex,a=n.virtual&&i.virtual.enabled,r=i.lazy,o=i.slidesPerView;function l(e){if(a){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function c(e){return a?L(e).attr("data-swiper-slide-index"):L(e).index()}if("auto"===o&&(o=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){var i=a?L(t).attr("data-swiper-slide-index"):L(t).index();n.lazy.loadInSlide(i)});else if(1<o)for(var d=e;d<e+o;d+=1)l(d)&&n.lazy.loadInSlide(d);else n.lazy.loadInSlide(e);if(r.loadPrevNext)if(1<o||r.loadPrevNextAmount&&1<r.loadPrevNextAmount){for(var u=r.loadPrevNextAmount,h=o,p=Math.min(e+h+Math.max(u,h),s.length),f=Math.max(e-Math.max(h,u),0),m=e+o;m<p;m+=1)l(m)&&n.lazy.loadInSlide(m);for(var v=f;v<e;v+=1)l(v)&&n.lazy.loadInSlide(v)}else{var g=t.children("."+i.slideNextClass);0<g.length&&n.lazy.loadInSlide(c(g));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(c(y))}}},ie={LinearSpline:function(e,t){var i,n,s,a,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=function(e,t){for(n=-1,i=e.length;1<i-n;)e[s=i+n>>1]<=t?n=s:i=s;return i}(this.x,e),a=r-1,(e-this.x[a])*(this.y[r]-this.y[a])/(this.x[r]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new ie.LinearSpline(this.slidesGrid,e.slidesGrid):new ie.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,n,s=this,a=s.controller.control;function r(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),n=-s.controller.spline.interpolate(-t)),n&&"container"!==s.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),n=(t-s.minTranslate())*i+e.minTranslate()),s.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var o=0;o<a.length;o+=1)a[o]!==t&&a[o]instanceof N&&r(a[o]);else a instanceof N&&t!==a&&r(a)},setTransition:function(t,e){var i,n=this,s=n.controller.control;function a(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.params.autoHeight&&ae.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof N&&a(s[i]);else s instanceof N&&e!==s&&a(s)}},ne={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t,i=this.params.a11y;13===e.keyCode&&(t=L(e.target),this.navigation&&this.navigation.$nextEl&&t.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(i.lastSlideMessage):this.a11y.notify(i.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&t.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(i.firstSlideMessage):this.a11y.notify(i.prevSlideMessage)),this.pagination&&t.is("."+this.params.pagination.bulletClass)&&t[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,i;!this.params.loop&&this.navigation&&(t=(e=this.navigation).$nextEl,(i=e.$prevEl)&&0<i.length&&(this.isBeginning?this.a11y.disableEl(i):this.a11y.enableEl(i)),t&&0<t.length&&(this.isEnd?this.a11y.disableEl(t):this.a11y.enableEl(t)))},updatePagination:function(){var n=this,s=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e,t){var i=L(t);n.a11y.makeElFocusable(i),n.a11y.addElRole(i,"button"),n.a11y.addElLabel(i,s.paginationBulletMessage.replace(/\{\{index\}\}/,i.index()+1))})},init:function(){this.$el.append(this.a11y.liveRegion);var e,t,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.nextSlideMessage),e.on("keydown",this.a11y.onEnterKey)),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.prevSlideMessage),t.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&0<this.a11y.liveRegion.length&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},re={init:function(){if(this.params.history){if(!se.history||!se.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=re.getPathValues(),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||se.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||se.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=re.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=se.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){var i,n,s;this.history.initialized&&this.params.history.enabled&&(i=this.slides.eq(t),n=re.slugify(i.attr("data-history")),se.location.pathname.includes(e)||(n=e+"/"+n),(s=se.history.state)&&s.value===n||(this.params.history.replaceState?se.history.replaceState({value:n},null,n):se.history.pushState({value:n},null,n)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var n=0,s=this.slides.length;n<s;n+=1){var a,r=this.slides.eq(n);re.slugify(r.attr("data-history"))!==t||r.hasClass(this.params.slideDuplicateClass)||(a=r.index(),this.slideTo(a,e,i))}else this.slideTo(0,e,i)}},oe={onHashCange:function(){var e=m.location.hash.replace("#","");if(e!==this.slides.eq(this.activeIndex).attr("data-hash")){var t=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index();if(void 0===t)return;this.slideTo(t)}},setHash:function(){var e,t;this.hashNavigation.initialized&&this.params.hashNavigation.enabled&&(this.params.hashNavigation.replaceState&&se.history&&se.history.replaceState?se.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""):(t=(e=this.slides.eq(this.activeIndex)).attr("data-hash")||e.attr("data-history"),m.location.hash=t||""))},init:function(){if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var e=m.location.hash.replace("#","");if(e)for(var t=0,i=this.slides.length;t<i;t+=1){var n,s=this.slides.eq(t);(s.attr("data-hash")||s.attr("data-history"))!==e||s.hasClass(this.params.slideDuplicateClass)||(n=s.index(),this.slideTo(n,0,this.params.runCallbacksOnInit,!0))}this.params.hashNavigation.watchState&&L(se).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&L(se).off("hashchange",this.hashNavigation.onHashCange)}},le={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=ae.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start:function(){return void 0===this.autoplay.timeout&&!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0)},stop:function(){return!!this.autoplay.running&&void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0)},pause:function(e){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==e&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))}},ce={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),n=-i[0].swiperSlideOffset;this.params.virtualTranslate||(n-=this.translate);var s=0;this.isHorizontal()||(s=n,n=0);var a=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:a}).transform("translate3d("+n+"px, "+s+"px, 0px)")}},setTransition:function(e){var i,n=this,t=n.slides,s=n.$wrapperEl;t.transition(e),n.params.virtualTranslate&&0!==e&&(i=!1,t.transitionEnd(function(){if(!i&&n&&!n.destroyed){i=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},de={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,n=this.slides,s=this.width,a=this.height,r=this.rtlTranslate,o=this.size,l=this.params.cubeEffect,c=this.isHorizontal(),d=this.virtual&&this.params.virtual.enabled,u=0;l.shadow&&(c?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=L('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:s+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=L('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var h,p,f,m,v,g=0;g<n.length;g+=1){var y=n.eq(g),b=g;d&&(b=parseInt(y.attr("data-swiper-slide-index"),10));var w=90*b,x=Math.floor(w/360);r&&(w=-w,x=Math.floor(-w/360));var T=Math.max(Math.min(y[0].progress,1),-1),C=0,S=0,E=0;b%4==0?(C=4*-x*o,E=0):(b-1)%4==0?(C=0,E=4*-x*o):(b-2)%4==0?(C=o+4*x*o,E=o):(b-3)%4==0&&(C=-o,E=3*o+4*o*x),r&&(C=-C),c||(S=C,C=0);var k,M,$="rotateX("+(c?0:-w)+"deg) rotateY("+(c?w:0)+"deg) translate3d("+C+"px, "+S+"px, "+E+"px)";T<=1&&-1<T&&(u=r?90*-b-90*T:90*b+90*T),y.transform($),l.slideShadows&&(k=c?y.find(".swiper-slide-shadow-left"):y.find(".swiper-slide-shadow-top"),M=c?y.find(".swiper-slide-shadow-right"):y.find(".swiper-slide-shadow-bottom"),0===k.length&&(k=L('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),y.append(k)),0===M.length&&(M=L('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),y.append(M)),k.length&&(k[0].style.opacity=Math.max(-T,0)),M.length&&(M[0].style.opacity=Math.max(T,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+o/2+"px","-moz-transform-origin":"50% 50% -"+o/2+"px","-ms-transform-origin":"50% 50% -"+o/2+"px","transform-origin":"50% 50% -"+o/2+"px"}),l.shadow&&(c?e.transform("translate3d(0px, "+(s/2+l.shadowOffset)+"px, "+-s/2+"px) rotateX(90deg) rotateZ(0deg) scale("+l.shadowScale+")"):(h=Math.abs(u)-90*Math.floor(Math.abs(u)/90),p=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),f=l.shadowScale,m=l.shadowScale/p,v=l.shadowOffset,e.transform("scale3d("+f+", 1, "+m+") translate3d(0px, "+(a/2+v)+"px, "+-a/2/m+"px) rotateX(-90deg)")));var P=F.isSafari||F.isUiWebView?-o/2:0;i.transform("translate3d(0px,0,"+P+"px) rotateX("+(this.isHorizontal()?0:u)+"deg) rotateY("+(this.isHorizontal()?-u:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},ue={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,i=0;i<e.length;i+=1){var n=e.eq(i),s=n[0].progress;this.params.flipEffect.limitRotation&&(s=Math.max(Math.min(n[0].progress,1),-1));var a,r,o=-180*s,l=0,c=-n[0].swiperSlideOffset,d=0;this.isHorizontal()?t&&(o=-o):(d=c,l=-o,o=c=0),n[0].style.zIndex=-Math.abs(Math.round(s))+e.length,this.params.flipEffect.slideShadows&&(a=this.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),r=this.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom"),0===a.length&&(a=L('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),n.append(a)),0===r.length&&(r=L('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),n.append(r)),a.length&&(a[0].style.opacity=Math.max(-s,0)),r.length&&(r[0].style.opacity=Math.max(s,0))),n.transform("translate3d("+c+"px, "+d+"px, 0px) rotateX("+l+"deg) rotateY("+o+"deg)")}},setTransition:function(e){var i,n=this,t=n.slides,s=n.activeIndex,a=n.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),n.params.virtualTranslate&&0!==e&&(i=!1,t.eq(s).transitionEnd(function(){if(!i&&n&&!n.destroyed){i=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}}))}},he={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,n=this.$wrapperEl,s=this.slidesSizesGrid,a=this.params.coverflowEffect,r=this.isHorizontal(),o=this.translate,l=r?e/2-o:t/2-o,c=r?a.rotate:-a.rotate,d=a.depth,u=0,h=i.length;u<h;u+=1){var p=i.eq(u),f=s[u],m=(l-p[0].swiperSlideOffset-f/2)/f*a.modifier,v=r?c*m:0,g=r?0:c*m,y=-d*Math.abs(m),b=a.stretch;"string"==typeof b&&-1!==b.indexOf("%")&&(b=parseFloat(a.stretch)/100*f);var w=r?0:b*m,x=r?b*m:0;Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(y)<.001&&(y=0),Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0);var T,C,S="translate3d("+x+"px,"+w+"px,"+y+"px)  rotateX("+g+"deg) rotateY("+v+"deg)";p.transform(S),p[0].style.zIndex=1-Math.abs(Math.round(m)),a.slideShadows&&(T=r?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),C=r?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom"),0===T.length&&(T=L('<div class="swiper-slide-shadow-'+(r?"left":"top")+'"></div>'),p.append(T)),0===C.length&&(C=L('<div class="swiper-slide-shadow-'+(r?"right":"bottom")+'"></div>'),p.append(C)),T.length&&(T[0].style.opacity=0<m?m:0),C.length&&(C[0].style.opacity=0<-m?-m:0))}(E.pointerEvents||E.prefixedPointerEvents)&&(n[0].style.perspectiveOrigin=l+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},pe={init:function(){var e=this.params.thumbs,t=this.constructor;e.swiper instanceof t?(this.thumbs.swiper=e.swiper,ae.extend(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),ae.extend(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):ae.isObject(e.swiper)&&(this.thumbs.swiper=new t(ae.extend({},e.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick)},onThumbClick:function(){var e,t,i,n,s,a,r=this.thumbs.swiper;r&&(e=r.clickedIndex,(t=r.clickedSlide)&&L(t).hasClass(this.params.thumbs.slideThumbActiveClass)||null==e||(a=r.params.loop?parseInt(L(r.clickedSlide).attr("data-swiper-slide-index"),10):e,this.params.loop&&(i=this.activeIndex,this.slides.eq(i).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,i=this.activeIndex),n=this.slides.eq(i).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),s=this.slides.eq(i).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),a=void 0===n||void 0!==s&&s-i<i-n?s:n),this.slideTo(a)))},update:function(e){var t=this.thumbs.swiper;if(t){var i,n,s,a,r,o="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,l=this.params.thumbs.autoScrollOffset,c=l&&!t.params.loop;this.realIndex===t.realIndex&&!c||(i=t.activeIndex,r=t.params.loop?(t.slides.eq(i).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,i=t.activeIndex),n=t.slides.eq(i).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),s=t.slides.eq(i).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),a=void 0===n?s:void 0===s?n:s-i==i-n?i:s-i<i-n?s:n,this.activeIndex>this.previousIndex?"next":"prev"):(a=this.realIndex)>this.previousIndex?"next":"prev",c&&(a+="next"===r?l:-1*l),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(a)<0&&(t.params.centeredSlides?a=i<a?a-Math.floor(o/2)+1:a+Math.floor(o/2)-1:i<a&&(a=a-o+1),t.slideTo(a,e?0:void 0)));var d=1,u=this.params.thumbs.slideThumbActiveClass;if(1<this.params.slidesPerView&&!this.params.centeredSlides&&(d=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(d=1),d=Math.floor(d),t.slides.removeClass(u),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var h=0;h<d;h+=1)t.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+h)+'"]').addClass(u);else for(var p=0;p<d;p+=1)t.slides.eq(this.realIndex+p).addClass(u)}}},fe=[H,q,R,B,Y,_,G,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){ae.extend(this,{mousewheel:{enabled:!1,enable:U.enable.bind(this),disable:U.disable.bind(this),handle:U.handle.bind(this),handleMouseEnter:U.handleMouseEnter.bind(this),handleMouseLeave:U.handleMouseLeave.bind(this),animateSlider:U.animateSlider.bind(this),releaseScroll:U.releaseScroll.bind(this),lastScrollTime:ae.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init:function(){!this.params.mousewheel.enabled&&this.params.cssMode&&this.mousewheel.disable(),this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.params.cssMode&&this.mousewheel.enable(),this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){ae.extend(this,{navigation:{init:K.init.bind(this),update:K.update.bind(this),destroy:K.destroy.bind(this),onNextClick:K.onNextClick.bind(this),onPrevClick:K.onPrevClick.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this.navigation,n=i.$nextEl,s=i.$prevEl;!this.params.navigation.hideOnClick||L(e.target).is(s)||L(e.target).is(n)||(n?t=n.hasClass(this.params.navigation.hiddenClass):s&&(t=s.hasClass(this.params.navigation.hiddenClass)),!0===t?this.emit("navigationShow",this):this.emit("navigationHide",this),n&&n.toggleClass(this.params.navigation.hiddenClass),s&&s.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){ae.extend(this,{pagination:{init:Q.init.bind(this),render:Q.render.bind(this),update:Q.update.bind(this),destroy:Q.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){this.params.pagination.el&&this.params.pagination.hideOnClick&&0<this.pagination.$el.length&&!L(e.target).hasClass(this.params.pagination.bulletClass)&&(!0===this.pagination.$el.hasClass(this.params.pagination.hiddenClass)?this.emit("paginationShow",this):this.emit("paginationHide",this),this.pagination.$el.toggleClass(this.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){ae.extend(this,{scrollbar:{init:Z.init.bind(this),destroy:Z.destroy.bind(this),updateSize:Z.updateSize.bind(this),setTranslate:Z.setTranslate.bind(this),setTransition:Z.setTransition.bind(this),enableDraggable:Z.enableDraggable.bind(this),disableDraggable:Z.disableDraggable.bind(this),setDragPosition:Z.setDragPosition.bind(this),getPointerPosition:Z.getPointerPosition.bind(this),onDragStart:Z.onDragStart.bind(this),onDragMove:Z.onDragMove.bind(this),onDragEnd:Z.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){ae.extend(this,{parallax:{setTransform:J.setTransform.bind(this),setTranslate:J.setTranslate.bind(this),setTransition:J.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var n=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=ee[e].bind(n)}),ae.extend(n,{zoom:t});var s=1;Object.defineProperty(n.zoom,"scale",{get:function(){return s},set:function(e){var t,i;s!==e&&(t=n.zoom.gesture.$imageEl?n.zoom.gesture.$imageEl[0]:void 0,i=n.zoom.gesture.$slideEl?n.zoom.gesture.$slideEl[0]:void 0,n.emit("zoomChange",e,t,i)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()},slideChange:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.params.cssMode&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){ae.extend(this,{lazy:{initialImageLoaded:!1,load:te.load.bind(this),loadInSlide:te.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()},slideChange:function(){this.params.lazy.enabled&&this.params.cssMode&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){ae.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:ie.getInterpolateFunction.bind(this),setTranslate:ie.setTranslate.bind(this),setTransition:ie.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;ae.extend(t,{a11y:{liveRegion:L('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(ne).forEach(function(e){t.a11y[e]=ne[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){ae.extend(this,{history:{init:re.init.bind(this),setHistory:re.setHistory.bind(this),setHistoryPopState:re.setHistoryPopState.bind(this),scrollToSlide:re.scrollToSlide.bind(this),destroy:re.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)},slideChange:function(){this.history.initialized&&this.params.cssMode&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){ae.extend(this,{hashNavigation:{initialized:!1,init:oe.init.bind(this),destroy:oe.destroy.bind(this),setHash:oe.setHash.bind(this),onHashCange:oe.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()},slideChange:function(){this.hashNavigation.initialized&&this.params.cssMode&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;ae.extend(t,{autoplay:{running:!1,paused:!1,run:le.run.bind(t),start:le.start.bind(t),stop:le.stop.bind(t),pause:le.pause.bind(t),onVisibilityChange:function(){"hidden"===document.visibilityState&&t.autoplay.running&&t.autoplay.pause(),"visible"===document.visibilityState&&t.autoplay.paused&&(t.autoplay.run(),t.autoplay.paused=!1)},onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&(this.autoplay.start(),document.addEventListener("visibilitychange",this.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},touchEnd:function(){this.params.cssMode&&this.autoplay.paused&&!this.params.autoplay.disableOnInteraction&&this.autoplay.run()},destroy:function(){this.autoplay.running&&this.autoplay.stop(),document.removeEventListener("visibilitychange",this.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){ae.extend(this,{fadeEffect:{setTranslate:ce.setTranslate.bind(this),setTransition:ce.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"fade"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"fade"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){ae.extend(this,{cubeEffect:{setTranslate:de.setTranslate.bind(this),setTransition:de.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"cube"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){ae.extend(this,{flipEffect:{setTranslate:ue.setTranslate.bind(this),setTransition:ue.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"flip"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){ae.extend(this,{coverflowEffect:{setTranslate:he.setTranslate.bind(this),setTransition:he.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){ae.extend(this,{thumbs:{swiper:null,init:pe.init.bind(this),update:pe.update.bind(this),onThumbClick:pe.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===N.use&&(N.use=N.Class.use,N.installModule=N.Class.installModule),N.use(fe),N}),function(B){"use strict";var X='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',n={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},Y={startColor:"#c0392b",endColor:"#f1c40f"};function V(e,t,i){return e===t?e=t:e===i&&(e=i),e}function _(e){return void 0!==e}var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,W=function(e){if(!i.test(e))return null;var t=i.exec(e);return{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}};function G(e,t,i){var n=i/100*(t-e);return 1===(n=Math.round(e+n).toString(16)).length&&(n="0"+n),n}function U(a,p){this.node=a.get(0);var i=this;a.empty().addClass("jq-ry-container");var f,n,m,v,g,e,t=B("<div/>").addClass("jq-ry-group-wrapper").appendTo(a),y=B("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(t),s=B("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(t),b=0,r=p.rating,o=!1;function l(e){_(e)||(e=p.rating);var t=(r=e)/f,i=t*m;1<t&&(i+=(Math.ceil(t)-1)*g),x(p.ratedFill),(i=p.rtl?100-i:i)<0?i=0:100<i&&(i=100),s.css("width",i+"%")}function c(){e=n*p.numStars+v*(p.numStars-1),m=n/e*100,g=v/e*100,a.width(e),l()}function d(e){var t=p.starWidth=e;return n=window.parseFloat(p.starWidth.replace("px","")),y.find("svg").attr({width:p.starWidth,height:t}),s.find("svg").attr({width:p.starWidth,height:t}),c(),a}function u(e){return p.spacing=e,v=parseFloat(p.spacing.replace("px","")),y.find("svg:not(:first-child)").css({"margin-left":e}),s.find("svg:not(:first-child)").css({"margin-left":e}),c(),a}function h(e){return p.normalFill=e,(p.rtl?s:y).find("svg").attr({fill:p.normalFill}),a}var w=p.ratedFill;function x(e){var t,i;return p.multiColor?(t=(r-b)/p.maxValue*100,e=function(e,t,i){if(!e||!t)return null;i=_(i)?i:0,e=W(e),t=W(t);var n=G(e.r,t.r,i),s=G(e.b,t.b,i);return"#"+n+G(e.g,t.g,i)+s}((i=p.multiColor||{}).startColor||Y.startColor,i.endColor||Y.endColor,t)):w=e,p.ratedFill=e,(p.rtl?y:s).find("svg").attr({fill:p.ratedFill}),a}function T(e){e=!!e,p.rtl=e,h(p.normalFill),l()}function C(e){x((p.multiColor=e)||w)}function S(e){p.numStars=e,f=p.maxValue/p.numStars,y.empty(),s.empty();for(var t=0;t<p.numStars;t++)y.append(B(p.starSvg||X)),s.append(B(p.starSvg||X));return d(p.starWidth),h(p.normalFill),u(p.spacing),l(),a}function E(e){return p.maxValue=e,f=p.maxValue/p.numStars,p.rating>e&&D(e),l(),a}function k(e){return p.precision=e,D(p.rating),a}function M(e){return p.halfStar=e,a}function $(e){return p.fullStar=e,a}function P(e){var t,i,n,s,a,r=y.offset().left,o=r+y.width(),l=p.maxValue,c=e.pageX,d=0;if(c<r)d=b;else if(o<c)d=l;else{var u=(c-r)/(o-r);if(0<v)for(var h=u*=100;0<h;)m<h?(d+=f,h-=m+g):(d+=h/m*f,h=0);else d=u*p.maxValue;i=(t=d)%f,n=f/2,s=p.halfStar,((a=p.fullStar)||s)&&(a||s&&n<i?t+=f-i:(t-=i,0<i&&(t+=n))),d=t}return p.rtl&&(d=l-d),parseFloat(d)}function L(e){return p.readOnly=e,a.attr("readonly",!0),R(),e||(a.removeAttr("readonly"),a.on("mousemove",j).on("mouseenter",j).on("mouseleave",I).on("click",N).on("rateyo.init",H).on("rateyo.change",q).on("rateyo.set",F)),a}function D(e){var t=e,i=p.maxValue;return"string"==typeof t&&("%"===t[t.length-1]&&(t=t.substr(0,t.length-1),E(i=100)),t=parseFloat(t)),function(e,t,i){if(!(t<=e&&e<=i))throw Error("Invalid Rating, expected value between "+t+" and "+i)}(t,b,i),t=parseFloat(t.toFixed(p.precision)),V(parseFloat(t),b,i),p.rating=t,l(),o&&a.trigger("rateyo.set",{rating:t}),a}function A(e){return p.onInit=e,a}function z(e){return p.onSet=e,a}function O(e){return p.onChange=e,a}function j(e){var t=P(e).toFixed(p.precision),i=p.maxValue;l(t=V(parseFloat(t),b,i)),a.trigger("rateyo.change",{rating:t})}function I(){var e,t;t=!1,e=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(t=!0),t||(l(),a.trigger("rateyo.change",{rating:p.rating}))}function N(e){var t=P(e).toFixed(p.precision),t=parseFloat(t);i.rating(t)}function H(e,t){p.onInit&&"function"==typeof p.onInit&&p.onInit.apply(this,[t.rating,i])}function q(e,t){p.onChange&&"function"==typeof p.onChange&&p.onChange.apply(this,[t.rating,i])}function F(e,t){p.onSet&&"function"==typeof p.onSet&&p.onSet.apply(this,[t.rating,i])}function R(){a.off("mousemove",j).off("mouseenter",j).off("mouseleave",I).off("click",N).off("rateyo.init",H).off("rateyo.change",q).off("rateyo.set",F)}this.rating=function(e){return _(e)?(D(e),a):p.rating},this.destroy=function(){var n,s;return p.readOnly||R(),U.prototype.collection=(n=a.get(0),s=this.collection,B.each(s,function(e){if(n===this.node){var t=s.slice(0,e),i=s.slice(e+1,s.length);return s=t.concat(i),!1}}),s),a.removeClass("jq-ry-container").children().remove(),a},this.method=function(e){if(!e)throw Error("Method name not specified!");if(!_(this[e]))throw Error("Method "+e+" doesn't exist!");var t=Array.prototype.slice.apply(arguments,[]).slice(1);return this[e].apply(this,t)},this.option=function(e,t){if(!_(e))return p;var i;switch(e){case"starWidth":i=d;break;case"numStars":i=S;break;case"normalFill":i=h;break;case"ratedFill":i=x;break;case"multiColor":i=C;break;case"maxValue":i=E;break;case"precision":i=k;break;case"rating":i=D;break;case"halfStar":i=M;break;case"fullStar":i=$;break;case"readOnly":i=L;break;case"spacing":i=u;break;case"rtl":i=T;break;case"onInit":i=A;break;case"onSet":i=z;break;case"onChange":i=O;break;default:throw Error("No such option as "+e)}return _(t)?i(t):p[e]},S(p.numStars),L(p.readOnly),p.rtl&&T(p.rtl),this.collection.push(this),this.rating(p.rating,!0),o=!0,a.trigger("rateyo.init",{rating:p.rating})}function c(e,t){var i;return B.each(t,function(){if(e===this.node)return i=this,!1}),i}U.prototype.collection=[],window.RateYo=U,B.fn.rateYo=function(){return function(i){var a=U.prototype.collection,e=B(this);if(0===e.length)return e;var t=Array.prototype.slice.apply(arguments,[]);if(0===t.length)i=t[0]={};else{if(1!==t.length||"object"!=typeof t[0]){if(1<=t.length&&"string"==typeof t[0]){var r=t[0],o=t.slice(1),l=[];return B.each(e,function(e,t){var i=c(t,a);if(!i)throw Error("Trying to set options before even initialization");var n=i[r];if(!n)throw Error("Method "+r+" does not exist!");var s=n.apply(i,o);l.push(s)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}i=t[0]}return i=B.extend({},n,i),B.each(e,function(){var e=c(this,a);if(e)return e;var t=B(this),n={},s=B.extend({},i);return B.each(t.data(),function(e,t){var i;0===e.indexOf("rateyo")&&(i=(i=e.replace(/^rateyo/,""))[0].toLowerCase()+i.slice(1),n[i]=t,delete s[i])}),new U(B(this),B.extend({},n,s))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery),function(e){"function"==typeof define&&define.amd?define([],e):"undefined"!=typeof module&&null!==module&&module.exports?module.exports=e:e()}(function(){var s=Object.assign||window.jQuery&&jQuery.extend,m=8,a=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){return window.setTimeout(function(){e()},25)};function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}"function"!=typeof window.CustomEvent&&(e.prototype=window.Event.prototype,window.CustomEvent=e);var r,n={textarea:!0,input:!0,select:!0,button:!0},o={move:"mousemove",cancel:"mouseup dragstart",end:"mouseup"},l={move:"touchmove",cancel:"touchend",end:"touchend"},c=/\s+/,d={bubbles:!0,cancelable:!0},t="function"==typeof Symbol?Symbol("events"):{};function u(e){return e[t]||(e[t]={})}function h(e,t,i,n){t=t.split(c);var s,a=u(e),r=t.length;function o(e){i(e,n)}for(;r--;)(a[s=t[r]]||(a[s]=[])).push([i,o]),e.addEventListener(s,o)}function p(e,t,i){t=t.split(c);var n,s,a,r=u(e),o=t.length;if(r)for(;o--;)if(s=r[n=t[o]])for(a=s.length;a--;)s[a][0]===i&&(e.removeEventListener(n,s[a][1]),s.splice(a,1))}function v(e,t,i){var n=new CustomEvent(t,d);i&&s(n,i),e.dispatchEvent(n)}function f(e){var i=e,n=!1,s=!1;function t(e){n?(i(),a(t),n=!(s=!0)):s=!1}this.kick=function(e){n=!0,s||t()},this.end=function(e){var t=i;e&&(s?(i=n?function(){t(),e()}:e,n=!0):e())}}function g(){}function y(e){e.preventDefault()}function b(e,t){var i,n;if(e.identifiedTouch)return e.identifiedTouch(t);for(i=-1,n=e.length;++i<n;)if(e[i].identifier===t)return e[i]}function w(e,t){var i=b(e.changedTouches,t.identifier);if(i&&(i.pageX!==t.pageX||i.pageY!==t.pageY))return i}function i(e,t){S(e,t,e,T)}function x(e,t){T()}function T(){p(document,o.move,i),p(document,o.cancel,x)}function C(e){p(document,l.move,e.touchmove),p(document,l.cancel,e.touchend)}function S(e,t,i,n){var s,a,r,o,l,c,d,u,h,p=i.pageX-t.pageX,f=i.pageY-t.pageY;p*p+f*f<m*m||(a=t,r=i,o=p,l=f,c=n,d=(s=e).targetTouches,u=s.timeStamp-a.timeStamp,h={altKey:s.altKey,ctrlKey:s.ctrlKey,shiftKey:s.shiftKey,startX:a.pageX,startY:a.pageY,distX:o,distY:l,deltaX:o,deltaY:l,pageX:r.pageX,pageY:r.pageY,velocityX:o/u,velocityY:l/u,identifier:a.identifier,targetTouches:d,finger:d?d.length:1,enableMove:function(){this.moveEnabled=!0,this.enableMove=g,s.preventDefault()}},v(a.target,"movestart",h),c(a))}function E(e,t){var i=t.timer;t.touch=e,t.timeStamp=e.timeStamp,i.kick()}function k(e,t){var i=t.target,n=t.event,s=t.timer;p(document,o.move,E),p(document,o.end,k),$(i,n,s,function(){setTimeout(function(){p(i,"click",y)},0)})}function M(e,t){var i,n=t.target,s=t.event,a=t.timer;b(e.changedTouches,s.identifier)&&(i=t,p(document,l.move,i.activeTouchmove),p(document,l.end,i.activeTouchend),$(n,s,a))}function $(e,t,i,n){i.end(function(){return v(e,"moveend",t),n&&n()})}function P(e){e.enableMove()}function L(e){e.enableMove()}function D(e){e.enableMove()}function A(e){var n=e.handler;e.handler=function(e){for(var t,i=r.length;i--;)e[t=r[i]]=e.originalEvent[t];n.apply(this,arguments)}}h(document,"mousedown",function(e){var t;1!==(t=e).which||t.ctrlKey||t.altKey||n[e.target.tagName.toLowerCase()]||(h(document,o.move,i,e),h(document,o.cancel,x,e))}),h(document,"touchstart",function(e){var t,i;n[e.target.tagName.toLowerCase()]||(i={target:(t=e.changedTouches[0]).target,pageX:t.pageX,pageY:t.pageY,identifier:t.identifier,touchmove:function(e,t){!function(e,t){var i=w(e,t);if(!i)return;S(e,t,i,C)}(e,t)},touchend:function(e,t){!function(e,t){if(!b(e.changedTouches,t.identifier))return;C(t)}(e,t)}},h(document,l.move,i.touchmove,i),h(document,l.cancel,i.touchend,i))}),h(document,"movestart",function(e){var t,i;e.defaultPrevented||e.moveEnabled&&(t={startX:e.startX,startY:e.startY,pageX:e.pageX,pageY:e.pageY,distX:e.distX,distY:e.distY,deltaX:e.deltaX,deltaY:e.deltaY,velocityX:e.velocityX,velocityY:e.velocityY,identifier:e.identifier,targetTouches:e.targetTouches,finger:e.finger},i={target:e.target,event:t,timer:new f(function(e){(function(e,t,i){var n=i-e.timeStamp;e.distX=t.pageX-e.startX,e.distY=t.pageY-e.startY,e.deltaX=t.pageX-e.pageX,e.deltaY=t.pageY-e.pageY,e.velocityX=.3*e.velocityX+.7*e.deltaX/n,e.velocityY=.3*e.velocityY+.7*e.deltaY/n,e.pageX=t.pageX,e.pageY=t.pageY})(t,i.touch,i.timeStamp),v(i.target,"move",t)}),touch:void 0,timeStamp:e.timeStamp},void 0===e.identifier?(h(e.target,"click",y),h(document,o.move,E,i),h(document,o.end,k,i)):(i.activeTouchmove=function(e,t){var i,n,s,a,r;i=e,s=(n=t).event,a=n.timer,(r=w(i,s))&&(i.preventDefault(),s.targetTouches=i.targetTouches,n.touch=r,n.timeStamp=i.timeStamp,a.kick())},i.activeTouchend=function(e,t){M(e,t)},h(document,l.move,i.activeTouchmove,i),h(document,l.end,i.activeTouchend,i)))}),window.jQuery&&(r="startX startY pageX pageY distX distY deltaX deltaY velocityX velocityY".split(" "),jQuery.event.special.movestart={setup:function(){return h(this,"movestart",P),!1},teardown:function(){return p(this,"movestart",P),!1},add:A},jQuery.event.special.move={setup:function(){return h(this,"movestart",L),!1},teardown:function(){return p(this,"movestart",L),!1},add:A},jQuery.event.special.moveend={setup:function(){return h(this,"movestart",D),!1},teardown:function(){return p(this,"movestart",D),!1},add:A})}),function(w){w.fn.twentytwenty=function(b){b=w.extend({default_offset_pct:.5,orientation:"horizontal",before_label:"Before",after_label:"After",no_overlay:!1,move_slider_on_hover:!1,move_with_handle_only:!0,click_to_move:!1},b);return this.each(function(){var e,t=b.default_offset_pct,r=w(this),o=b.orientation,i="vertical"===o?"down":"left",n="vertical"===o?"up":"right";r.wrap("<div class='twentytwenty-wrapper twentytwenty-"+o+"'></div>"),b.no_overlay||(r.append("<div class='twentytwenty-overlay'></div>"),(e=r.find(".twentytwenty-overlay")).append("<div class='twentytwenty-before-label' data-content='"+b.before_label+"'></div>"),e.append("<div class='twentytwenty-after-label' data-content='"+b.after_label+"'></div>"));var l=r.find("img:first"),c=r.find("img:last");r.append("<div class='twentytwenty-handle'></div>");var d=r.find(".twentytwenty-handle");d.append("<span class='twentytwenty-"+i+"-arrow'></span>"),d.append("<span class='twentytwenty-"+n+"-arrow'></span>"),r.addClass("twentytwenty-container"),l.addClass("twentytwenty-before"),c.addClass("twentytwenty-after");function s(e){var t,i,n,s,a=(t=e,i=l.width(),n=l.height(),{w:i+"px",h:n+"px",cw:t*i+"px",ch:t*n+"px"});d.css("vertical"===o?"top":"left","vertical"===o?a.ch:a.cw),s=a,"vertical"===o?(l.css("clip","rect(0,"+s.w+","+s.ch+",0)"),c.css("clip","rect("+s.ch+","+s.w+","+s.h+",0)")):(l.css("clip","rect(0,"+s.cw+","+s.h+",0)"),c.css("clip","rect(0,"+s.w+","+s.h+","+s.cw+")")),r.css("height",s.h)}function a(e,t){var i,n,s;return i="vertical"===o?(t-m)/g:(e-f)/v,n=0,s=1,Math.max(n,Math.min(s,i))}w(window).on("resize.twentytwenty",function(e){s(t)});function u(e){((e.distX>e.distY&&e.distX<-e.distY||e.distX<e.distY&&e.distX>-e.distY)&&"vertical"!==o||(e.distX<e.distY&&e.distX<-e.distY||e.distX>e.distY&&e.distX>-e.distY)&&"vertical"===o)&&e.preventDefault(),r.addClass("active"),f=r.offset().left,m=r.offset().top,v=l.width(),g=l.height()}function h(e){r.hasClass("active")&&(t=a(e.pageX,e.pageY),s(t))}function p(){r.removeClass("active")}var f=0,m=0,v=0,g=0,y=b.move_with_handle_only?d:r;y.on("movestart",u),y.on("move",h),y.on("moveend",p),b.move_slider_on_hover&&(r.on("mouseenter",u),r.on("mousemove",h),r.on("mouseleave",p)),d.on("touchmove",function(e){e.preventDefault()}),r.find("img").on("mousedown",function(e){e.preventDefault()}),b.click_to_move&&r.on("click",function(e){f=r.offset().left,m=r.offset().top,v=l.width(),g=l.height(),t=a(e.pageX,e.pageY),s(t)}),w(window).trigger("resize.twentytwenty")})}}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e($||require("jquery")):e(jQuery)}(function(I){"use strict";var s="styler",n={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function a(e,t){this.element=e,this.options=I.extend({},n,t);var i=this.options.locale;void 0!==this.options.locales[i]&&I.extend(this.options,this.options.locales[i]),this.init()}function N(e){var t,i,n;I(e.target).parents().hasClass("jq-selectbox")||"OPTION"==e.target.nodeName||I("div.jq-selectbox.opened").length&&(t=I("div.jq-selectbox.opened"),i=I("div.jq-selectbox__search input",t),n=I("div.jq-selectbox__dropdown",t),t.find("select").data("_"+s).options.onSelectClosed.call(t),i.length&&i.val("").keyup(),n.hide().find("li.sel").addClass("selected"),t.removeClass("focused opened dropup dropdown"))}a.prototype={init:function(){var e,t,i,n,s,A=I(this.element),z=this.options,O=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),a=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function j(){void 0!==A.attr("id")&&""!==A.attr("id")&&(this.id=A.attr("id")+z.idSuffix),this.title=A.attr("title"),this.classes=A.attr("class"),this.data=A.data()}A.is(":checkbox")?((e=function(){var e=new j,t=I('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);A.after(t).prependTo(t),A.is(":checked")&&t.addClass("checked"),A.is(":disabled")&&t.addClass("disabled"),t.click(function(e){e.preventDefault(),A.triggerHandler("click"),t.is(".disabled")||(A.is(":checked")?(A.prop("checked",!1),t.removeClass("checked")):(A.prop("checked",!0),t.addClass("checked")),A.focus().change())}),A.closest("label").add('label[for="'+A.attr("id")+'"]').on("click.styler",function(e){I(e.target).is("a")||I(e.target).closest(t).length||(t.triggerHandler("click"),e.preventDefault())}),A.on("change.styler",function(){A.is(":checked")?t.addClass("checked"):t.removeClass("checked")}).on("keydown.styler",function(e){32==e.which&&t.click()}).on("focus.styler",function(){t.is(".disabled")||t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")})})(),A.on("refresh",function(){A.closest("label").add('label[for="'+A.attr("id")+'"]').off(".styler"),A.off(".styler").parent().before(A).remove(),e()})):A.is(":radio")?((t=function(){var e=new j,i=I('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);A.after(i).prependTo(i),A.is(":checked")&&i.addClass("checked"),A.is(":disabled")&&i.addClass("disabled"),I.fn.commonParents=function(){var e=this;return e.first().parents().filter(function(){return I(this).find(e).length===e.length})},I.fn.commonParent=function(){return I(this).commonParents().first()},i.click(function(e){var t;e.preventDefault(),A.triggerHandler("click"),i.is(".disabled")||((t=I('input[name="'+A.attr("name")+'"]')).commonParent().find(t).prop("checked",!1).parent().removeClass("checked"),A.prop("checked",!0).parent().addClass("checked"),A.focus().change())}),A.closest("label").add('label[for="'+A.attr("id")+'"]').on("click.styler",function(e){I(e.target).is("a")||I(e.target).closest(i).length||(i.triggerHandler("click"),e.preventDefault())}),A.on("change.styler",function(){A.parent().addClass("checked")}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})})(),A.on("refresh",function(){A.closest("label").add('label[for="'+A.attr("id")+'"]').off(".styler"),A.off(".styler").parent().before(A).remove(),t()})):A.is(":file")?((i=function(){var e=new j,n=A.data("placeholder");void 0===n&&(n=z.filePlaceholder);var t=A.data("browse");void 0!==t&&""!==t||(t=z.fileBrowse);var s=I('<div class="jq-file"><div class="jq-file__name">'+n+'</div><div class="jq-file__browse">'+t+"</div></div>").attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);A.after(s).appendTo(s),A.is(":disabled")&&s.addClass("disabled");var i=A.val(),a=I("div.jq-file__name",s);i&&a.text(i.replace(/.+[\\\/]/,"")),A.on("change.styler",function(){var e,t,i=A.val();A.is("[multiple]")&&(i="",0<(e=A[0].files.length)&&(void 0===(t=A.data("number"))&&(t=z.fileNumber),i=t=t.replace("%s",e))),a.text(i.replace(/.+[\\\/]/,"")),""===i?(a.text(n),s.removeClass("changed")):s.addClass("changed")}).on("focus.styler",function(){s.addClass("focused")}).on("blur.styler",function(){s.removeClass("focused")}).on("click.styler",function(){s.removeClass("focused")})})(),A.on("refresh",function(){A.off(".styler").parent().before(A).remove(),i()})):A.is('input[type="number"]')?((n=function(){var e=new j,t=I('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);A.after(t).prependTo(t).wrap('<div class="jq-number__field"></div>'),A.is(":disabled")&&t.addClass("disabled");var a,r,o,i=null,n=null;void 0!==A.attr("min")&&(a=A.attr("min")),void 0!==A.attr("max")&&(r=A.attr("max")),o=void 0!==A.attr("step")&&I.isNumeric(A.attr("step"))?Number(A.attr("step")):Number(1);function s(e){var t,i=A.val();I.isNumeric(i)||(i=0,A.val("0")),e.is(".minus")?t=Number(i)-o:e.is(".plus")&&(t=Number(i)+o);var n=(o.toString().split(".")[1]||[]).length;if(0<n){for(var s="1";s.length<=n;)s+="0";t=Math.round(t*s)/s}I.isNumeric(a)&&I.isNumeric(r)?a<=t&&t<=r&&A.val(t):I.isNumeric(a)&&!I.isNumeric(r)?a<=t&&A.val(t):(I.isNumeric(a)||!I.isNumeric(r)||t<=r)&&A.val(t)}t.is(".disabled")||(t.on("mousedown","div.jq-number__spin",function(){var e=I(this);s(e),i=setTimeout(function(){n=setInterval(function(){s(e)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(i),clearInterval(n)}).on("mouseup","div.jq-number__spin",function(){A.change().trigger("input")}),A.on("focus.styler",function(){t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")}))})(),A.on("refresh",function(){A.off(".styler").closest(".jq-number").before(A).remove(),n()})):A.is("select")?((s=function(){function $(t){var i=t.prop("scrollHeight")-t.outerHeight(),n=null,s=null;t.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(e){n=e.originalEvent.detail<0||0<e.originalEvent.wheelDelta?1:-1,s=t.scrollTop(),(i<=s&&n<0||s<=0&&0<n)&&(e.stopPropagation(),e.preventDefault())})}var P=I("option",A),L="";function D(){for(var e=0;e<P.length;e++){var t=P.eq(e),i="",n="",s="",a="",r="",o="",l="",c="",d="";t.prop("selected")&&(n="selected sel"),t.is(":disabled")&&(n="disabled"),t.is(":selected:disabled")&&(n="selected sel disabled"),void 0!==t.attr("id")&&""!==t.attr("id")&&(a=' id="'+t.attr("id")+z.idSuffix+'"'),void 0!==t.attr("title")&&""!==P.attr("title")&&(r=' title="'+t.attr("title")+'"'),void 0!==t.attr("class")&&(l=" "+t.attr("class"),d=' data-jqfs-class="'+t.attr("class")+'"');var u=t.data();for(var h in u)""!==u[h]&&(o+=" data-"+h+'="'+u[h]+'"');n+l!==""&&(s=' class="'+n+l+'"'),i="<li"+d+o+s+r+a+">"+t.html()+"</li>",t.parent().is("optgroup")&&(void 0!==t.parent().attr("class")&&(c=" "+t.parent().attr("class")),i="<li"+d+o+' class="'+n+l+" option"+c+'"'+r+a+">"+t.html()+"</li>",t.is(":first-child")&&(i='<li class="optgroup'+c+'">'+t.parent().attr("label")+"</li>"+i)),L+=i}}if(A.is("[multiple]")){if(a||O)return;!function(){var e=new j,t=I('<div class="jq-select-multiple jqselect"></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);A.after(t),D(),t.append("<ul>"+L+"</ul>");var i=I("ul",t),s=I("li",t),n=A.attr("size"),a=i.outerHeight(),r=s.outerHeight();void 0!==n&&0<n?i.css({height:r*n}):i.css({height:4*r}),a>t.height()&&(i.css("overflowY","scroll"),$(i),s.filter(".selected").length&&i.scrollTop(i.scrollTop()+s.filter(".selected").position().top)),A.prependTo(t),A.is(":disabled")?(t.addClass("disabled"),P.each(function(){I(this).is(":selected")&&s.eq(I(this).index()).addClass("selected")})):(s.filter(":not(.disabled):not(.optgroup)").click(function(e){A.focus();var t,i,n=I(this);e.ctrlKey||e.metaKey||n.addClass("selected"),e.shiftKey||n.addClass("first"),e.ctrlKey||e.metaKey||e.shiftKey||n.siblings().removeClass("selected first"),(e.ctrlKey||e.metaKey)&&(n.is(".selected")?n.removeClass("selected first"):n.addClass("selected first"),n.siblings().removeClass("first")),e.shiftKey&&(i=t=!1,n.siblings().removeClass("selected").siblings(".first").addClass("selected"),n.prevAll().each(function(){I(this).is(".first")&&(t=!0)}),n.nextAll().each(function(){I(this).is(".first")&&(i=!0)}),t&&n.prevAll().each(function(){if(I(this).is(".selected"))return!1;I(this).not(".disabled, .optgroup").addClass("selected")}),i&&n.nextAll().each(function(){if(I(this).is(".selected"))return!1;I(this).not(".disabled, .optgroup").addClass("selected")}),1==s.filter(".selected").length&&n.addClass("first")),P.prop("selected",!1),s.filter(".selected").each(function(){var e=I(this),t=e.index();e.is(".option")&&(t-=e.prevAll(".optgroup").length),P.eq(t).prop("selected",!0)}),A.change()}),P.each(function(e){I(this).data("optionIndex",e)}),A.on("change.styler",function(){s.removeClass("selected");var t=[];P.filter(":selected").each(function(){t.push(I(this).data("optionIndex"))}),s.not(".optgroup").filter(function(e){return-1<I.inArray(e,t)}).addClass("selected")}).on("focus.styler",function(){t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")}),a>t.height()&&A.on("keydown.styler",function(e){38!=e.which&&37!=e.which&&33!=e.which||i.scrollTop(i.scrollTop()+s.filter(".selected").position().top-r),40!=e.which&&39!=e.which&&34!=e.which||i.scrollTop(i.scrollTop()+s.filter(".selected:last").position().top-i.innerHeight()+2*r)}))}()}else!function(){var e=new j,t="",i=A.data("placeholder"),n=A.data("search"),s=A.data("search-limit"),a=A.data("search-not-found"),r=A.data("search-placeholder"),l=A.data("smart-positioning");void 0===i&&(i=z.selectPlaceholder),void 0!==n&&""!==n||(n=z.selectSearch),void 0!==s&&""!==s||(s=z.selectSearchLimit),void 0!==a&&""!==a||(a=z.selectSearchNotFound),void 0===r&&(r=z.selectSearchPlaceholder),void 0!==l&&""!==l||(l=z.selectSmartPositioning);var c=I('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);A.after(c).prependTo(c);var d=0<(d=c.css("z-index"))?d:1,o=I("div.jq-selectbox__select",c),u=I("div.jq-selectbox__select-text",c),h=P.filter(":selected");D(),n&&(t='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+a+"</div>");var p=I('<div class="jq-selectbox__dropdown">'+t+"<ul>"+L+"</ul></div>");c.append(p);var f=I("ul",p),m=I("li",p),v=I("input",p),g=I("div.jq-selectbox__not-found",p).hide();m.length<s&&v.parent().hide(),""===P.first().text()&&P.first().is(":selected")&&!1!==i?u.text(i).addClass("placeholder"):u.text(h.text());var y,b,w=0,x=0;m.css({display:"inline-block"}),m.each(function(){var e=I(this);e.innerWidth()>w&&(w=e.innerWidth(),x=e.width())}),m.css({display:""}),u.is(".placeholder")&&u.width()>w?u.width(u.width()):(b=(y=c.clone().appendTo("body").width("auto")).outerWidth(),y.remove(),b==c.outerWidth()&&u.width(x)),w>c.width()&&p.width(w),""===P.first().text()&&""!==A.data("placeholder")&&m.first().hide();var T,C=c.outerHeight(!0),S=v.parent().outerHeight(!0)||0,E=f.css("max-height"),k=m.filter(".selected");k.length<1&&m.first().addClass("selected sel"),void 0===m.data("li-height")&&(T=m.outerHeight(),!1!==i&&(T=m.eq(1).outerHeight()),m.data("li-height",T));var M=p.css("top");"auto"==p.css("left")&&p.css({left:0}),"auto"==p.css("top")&&(p.css({top:C}),M=C),p.hide(),k.length&&(P.first().text()!=h.text()&&c.addClass("changed"),c.data("jqfs-class",k.data("jqfs-class")),c.addClass(k.data("jqfs-class"))),A.is(":disabled")?c.addClass("disabled"):(o.click(function(){var t,i,n,s,e,a,r,o;I("div.jq-selectbox").filter(".opened").length&&z.onSelectClosed.call(I("div.jq-selectbox").filter(".opened")),A.focus(),O||(t=I(window),i=m.data("li-height"),n=c.offset().top,s=t.height()-C-(n-t.scrollTop()),void 0!==(e=A.data("visible-options"))&&""!==e||(e=z.selectVisibleOptions),a=5*i,r=i*e,0<e&&e<6&&(a=r),0===e&&(r="auto"),o=function(){p.height("auto").css({bottom:"auto",top:M});function e(){f.css("max-height",Math.floor((s-20-S)/i)*i)}e(),f.css("max-height",r),"none"!=E&&f.css("max-height",E),s<p.outerHeight()+20&&e()},!0===l||1===l?a+S+20<s?(o(),c.removeClass("dropup").addClass("dropdown")):(function(){p.height("auto").css({top:"auto",bottom:M});function e(){f.css("max-height",Math.floor((n-t.scrollTop()-20-S)/i)*i)}e(),f.css("max-height",r),"none"!=E&&f.css("max-height",E),n-t.scrollTop()-20<p.outerHeight()+20&&e()}(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?a+S+20<s&&(o(),c.removeClass("dropup").addClass("dropdown")):(p.height("auto").css({bottom:"auto",top:M}),f.css("max-height",r),"none"!=E&&f.css("max-height",E)),c.offset().left+p.outerWidth()>t.width()&&p.css({left:"auto",right:0}),I("div.jqselect").css({zIndex:d-1}).removeClass("opened"),c.css({zIndex:d}),p.is(":hidden")?(I("div.jq-selectbox__dropdown:visible").hide(),p.show(),c.addClass("opened focused"),z.onSelectOpened.call(c)):(p.hide(),c.removeClass("opened dropup dropdown"),I("div.jq-selectbox").filter(".opened").length&&z.onSelectClosed.call(c)),v.length&&(v.val("").keyup(),g.hide(),v.keyup(function(){var e=I(this).val();m.each(function(){I(this).html().match(new RegExp(".*?"+e+".*?","i"))?I(this).show():I(this).hide()}),""===P.first().text()&&""!==A.data("placeholder")&&m.first().hide(),m.filter(":visible").length<1?g.show():g.hide()})),m.filter(".selected").length&&(""===A.val()?f.scrollTop(0):(f.innerHeight()/i%2!=0&&(i/=2),f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()/2+i))),$(f))}),m.hover(function(){I(this).siblings().removeClass("selected")}),m.filter(".selected").text(),m.filter(":not(.disabled):not(.optgroup)").click(function(){A.focus();var e,t=I(this),i=t.text();t.is(".selected")||(e=t.index(),e-=t.prevAll(".optgroup").length,t.addClass("selected sel").siblings().removeClass("selected sel"),P.prop("selected",!1).eq(e).prop("selected",!0),u.text(i),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",t.data("jqfs-class")),c.addClass(t.data("jqfs-class")),A.change()),p.hide(),c.removeClass("opened dropup dropdown"),z.onSelectClosed.call(c)}),p.mouseout(function(){I("li.sel",p).addClass("selected")}),A.on("change.styler",function(){u.text(P.filter(":selected").text()).removeClass("placeholder"),m.removeClass("selected sel").not(".optgroup").eq(A[0].selectedIndex).addClass("selected sel"),P.first().text()!=m.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),I("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(e){var t=m.data("li-height");""===A.val()?u.text(i).addClass("placeholder"):u.text(P.filter(":selected").text()),m.removeClass("selected sel").not(".optgroup").eq(A[0].selectedIndex).addClass("selected sel"),38!=e.which&&37!=e.which&&33!=e.which&&36!=e.which||(""===A.val()?f.scrollTop(0):f.scrollTop(f.scrollTop()+m.filter(".selected").position().top)),40!=e.which&&39!=e.which&&34!=e.which&&35!=e.which||f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()+t),13==e.which&&(e.preventDefault(),p.hide(),c.removeClass("opened dropup dropdown"),z.onSelectClosed.call(c))}).on("keydown.styler",function(e){32==e.which&&(e.preventDefault(),o.click())}),N.registered||(I(document).on("click",N),N.registered=!0))}()})(),A.on("refresh",function(){A.off(".styler").parent().before(A).remove(),s()})):A.is(":reset")&&A.on("click",function(){setTimeout(function(){A.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var e=I(this.element);e.is(":checkbox")||e.is(":radio")?(e.removeData("_"+s).off(".styler refresh").removeAttr("style").parent().before(e).remove(),e.closest("label").add('label[for="'+e.attr("id")+'"]').off(".styler")):e.is('input[type="number"]')?e.removeData("_"+s).off(".styler refresh").closest(".jq-number").before(e).remove():(e.is(":file")||e.is("select"))&&e.removeData("_"+s).off(".styler refresh").removeAttr("style").parent().before(e).remove()}},I.fn[s]=function(t){var i,n=arguments;return void 0===t||"object"==typeof t?(this.each(function(){I.data(this,"_"+s)||I.data(this,"_"+s,new a(this,t))}).promise().done(function(){var e=I(this[0]).data("_"+s);e&&e.options.onFormStyled.call()}),this):"string"==typeof t&&"_"!==t[0]&&"init"!==t?(this.each(function(){var e=I.data(this,"_"+s);e instanceof a&&"function"==typeof e[t]&&(i=e[t].apply(e,Array.prototype.slice.call(n,1)))}),void 0!==i?i:this):void 0},N.registered=!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(S,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,r=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,s=t.indexOf,i={},a=i.toString,v=i.hasOwnProperty,o=v.toString,c=o.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},T=S.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,i){var n,s,a=(i=i||T).createElement("script");if(a.text=e,t)for(n in u)(s=t[n]||t.getAttribute&&t.getAttribute(n))&&a.setAttribute(n,s);i.head.appendChild(a).parentNode.removeChild(a)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?i[a.call(e)]||"object":typeof e}var d="3.5.1",E=function(e,t){return new E.fn.init(e,t)};function h(e){var t=!!e&&"length"in e&&e.length,i=x(e);return!b(e)&&!m(e)&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:d,constructor:E,length:0,toArray:function(){return r.call(this)},get:function(e){return null==e?r.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(i){return this.pushStack(E.map(this,function(e,t){return i.call(e,t,e)}))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,i,n,s,a,o=arguments[0]||{},r=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[r]||{},r++),"object"==typeof o||b(o)||(o={}),r===l&&(o=this,r--);r<l;r++)if(null!=(e=arguments[r]))for(t in e)n=e[t],"__proto__"!==t&&o!==n&&(c&&n&&(E.isPlainObject(n)||(s=Array.isArray(n)))?(i=o[t],a=s&&!Array.isArray(i)?[]:s||E.isPlainObject(i)?i:{},s=!1,o[t]=E.extend(c,a,n)):void 0!==n&&(o[t]=n));return o},E.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==a.call(e))&&(!(t=n(e))||"function"==typeof(i=v.call(t,"constructor")&&t.constructor)&&o.call(i)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,i){w(e,{nonce:t&&t.nonce},i)},each:function(e,t){var i,n=0;if(h(e))for(i=e.length;n<i&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var i=t||[];return null!=e&&(h(Object(e))?E.merge(i,"string"==typeof e?[e]:e):l.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:s.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,s=e.length;n<i;n++)e[s++]=t[n];return e.length=s,e},grep:function(e,t,i){for(var n=[],s=0,a=e.length,o=!i;s<a;s++)!t(e[s],s)!=o&&n.push(e[s]);return n},map:function(e,t,i){var n,s,a=0,o=[];if(h(e))for(n=e.length;a<n;a++)null!=(s=t(e[a],a,i))&&o.push(s);else for(a in e)null!=(s=t(e[a],a,i))&&o.push(s);return g(o)},guid:1,support:y}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var p=function(i){function d(e,t){var i="0x"+e.slice(1)-65536;return t||(i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320))}function s(){C()}var e,p,w,a,o,f,h,m,x,l,c,C,S,r,T,g,u,v,y,E="sizzle"+ +new Date,b=i.document,k=0,n=0,A=le(),M=le(),P=le(),D=le(),O=function(e,t){return e===t&&(c=!0),0},I={}.hasOwnProperty,t=[],L=t.pop,$=t.push,N=t.push,z=t.slice,j=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+R+"*("+B+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+R+"*\\]",q=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",_=new RegExp(R+"+","g"),X=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),Y=new RegExp("^"+R+"*,"+R+"*"),W=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),V=new RegExp(R+"|>"),G=new RegExp(q),U=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ie=/[+~]/,ne=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),se=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=we(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{N.apply(t=z.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){N={apply:t.length?function(e,t){$.apply(e,z.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}function re(t,e,i,n){var s,a,o,r,l,c,u,d=e&&e.ownerDocument,h=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return i;if(!n&&(C(e),e=e||S,T)){if(11!==h&&(l=te.exec(t)))if(s=l[1]){if(9===h){if(!(o=e.getElementById(s)))return i;if(o.id===s)return i.push(o),i}else if(d&&(o=d.getElementById(s))&&y(e,o)&&o.id===s)return i.push(o),i}else{if(l[2])return N.apply(i,e.getElementsByTagName(t)),i;if((s=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return N.apply(i,e.getElementsByClassName(s)),i}if(p.qsa&&!D[t+" "]&&(!g||!g.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===h&&(V.test(t)||W.test(t))){for((d=ie.test(t)&&ve(e.parentNode)||e)===e&&p.scope||((r=e.getAttribute("id"))?r=r.replace(se,ae):e.setAttribute("id",r=E)),a=(c=f(t)).length;a--;)c[a]=(r?"#"+r:":scope")+" "+be(c[a]);u=c.join(",")}try{return N.apply(i,d.querySelectorAll(u)),i}catch(e){D(t,!0)}finally{r===E&&e.removeAttribute("id")}}}return m(t.replace(X,"$1"),e,i,n)}function le(){var i=[];function n(e,t){return i.push(e+" ")>w.cacheLength&&delete n[i.shift()],n[e+" "]=t}return n}function ce(e){return e[E]=!0,e}function ue(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var i=e.split("|"),n=i.length;n--;)w.attrHandle[i[n]]=t}function he(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(i){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===i}}function me(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&oe(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(o){return ce(function(a){return a=+a,ce(function(e,t){for(var i,n=o([],e.length,a),s=n.length;s--;)e[i=n[s]]&&(e[i]=!(t[i]=e[i]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=re.support={},o=re.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!Q.test(t||i&&i.nodeName||"HTML")},C=re.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:b;return n!=S&&9===n.nodeType&&n.documentElement&&(r=(S=n).documentElement,T=!o(S),b!=S&&(i=S.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",s,!1):i.attachEvent&&i.attachEvent("onunload",s)),p.scope=ue(function(e){return r.appendChild(e).appendChild(S.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ue(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(S.getElementsByClassName),p.getById=ue(function(e){return r.appendChild(e).id=E,!S.getElementsByName||!S.getElementsByName(E).length}),p.getById?(w.filter.ID=function(e){var t=e.replace(ne,d);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var i=t.getElementById(e);return i?[i]:[]}}):(w.filter.ID=function(e){var i=e.replace(ne,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===i}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&T){var i,n,s,a=t.getElementById(e);if(a){if((i=a.getAttributeNode("id"))&&i.value===e)return[a];for(s=t.getElementsByName(e),n=0;a=s[n++];)if((i=a.getAttributeNode("id"))&&i.value===e)return[a]}return[]}}),w.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],s=0,a=t.getElementsByTagName(e);if("*"!==e)return a;for(;i=a[s++];)1===i.nodeType&&n.push(i);return n},w.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&T)return t.getElementsByClassName(e)},u=[],g=[],(p.qsa=ee.test(S.querySelectorAll))&&(ue(function(e){var t;r.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+F+")"),e.querySelectorAll("[id~="+E+"-]").length||g.push("~="),(t=S.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),r.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(p.matchesSelector=ee.test(v=r.matches||r.webkitMatchesSelector||r.mozMatchesSelector||r.oMatchesSelector||r.msMatchesSelector))&&ue(function(e){p.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),u.push("!=",q)}),g=g.length&&new RegExp(g.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(r.compareDocumentPosition),y=t||ee.test(r.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return c=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===i?e==S||e.ownerDocument==b&&y(b,e)?-1:t==S||t.ownerDocument==b&&y(b,t)?1:l?j(l,e)-j(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return c=!0,0;var i,n=0,s=e.parentNode,a=t.parentNode,o=[e],r=[t];if(!s||!a)return e==S?-1:t==S?1:s?-1:a?1:l?j(l,e)-j(l,t):0;if(s===a)return he(e,t);for(i=e;i=i.parentNode;)o.unshift(i);for(i=t;i=i.parentNode;)r.unshift(i);for(;o[n]===r[n];)n++;return n?he(o[n],r[n]):o[n]==b?-1:r[n]==b?1:0}),S},re.matches=function(e,t){return re(e,null,null,t)},re.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&T&&!D[t+" "]&&(!u||!u.test(t))&&(!g||!g.test(t)))try{var i=v.call(e,t);if(i||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){D(t,!0)}return 0<re(t,S,null,[e]).length},re.contains=function(e,t){return(e.ownerDocument||e)!=S&&C(e),y(e,t)},re.attr=function(e,t){(e.ownerDocument||e)!=S&&C(e);var i=w.attrHandle[t.toLowerCase()],n=i&&I.call(w.attrHandle,t.toLowerCase())?i(e,t,!T):void 0;return void 0!==n?n:p.attributes||!T?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},re.escape=function(e){return(e+"").replace(se,ae)},re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},re.uniqueSort=function(e){var t,i=[],n=0,s=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(O),c){for(;t=e[s++];)t===e[s]&&(n=i.push(s));for(;n--;)e.splice(i[n],1)}return l=null,e},a=re.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=a(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=a(t);return i},(w=re.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||re.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&re.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&G.test(i)&&(t=f(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ne,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(i,n,s){return function(e){var t=re.attr(e,i);return null==t?"!="===n:!n||(t+="","="===n?t===s:"!="===n?t!==s:"^="===n?s&&0===t.indexOf(s):"*="===n?s&&-1<t.indexOf(s):"$="===n?s&&t.slice(-s.length)===s:"~="===n?-1<(" "+t.replace(_," ")+" ").indexOf(s):"|="===n&&(t===s||t.slice(0,s.length+1)===s+"-"))}},CHILD:function(f,e,t,m,g){var v="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===m&&0===g?function(e){return!!e.parentNode}:function(e,t,i){var n,s,a,o,r,l,c=v!=y?"nextSibling":"previousSibling",u=e.parentNode,d=b&&e.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(u){if(v){for(;c;){for(o=e;o=o[c];)if(b?o.nodeName.toLowerCase()===d:1===o.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&h){for(p=(r=(n=(s=(a=(o=u)[E]||(o[E]={}))[o.uniqueID]||(a[o.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],o=r&&u.childNodes[r];o=++r&&o&&o[c]||(p=r=0)||l.pop();)if(1===o.nodeType&&++p&&o===e){s[f]=[k,r,p];break}}else if(h&&(p=r=(n=(s=(a=(o=e)[E]||(o[E]={}))[o.uniqueID]||(a[o.uniqueID]={}))[f]||[])[0]===k&&n[1]),!1===p)for(;(o=++r&&o&&o[c]||(p=r=0)||l.pop())&&((b?o.nodeName.toLowerCase()!==d:1!==o.nodeType)||!++p||(h&&((s=(a=o[E]||(o[E]={}))[o.uniqueID]||(a[o.uniqueID]={}))[f]=[k,p]),o!==e)););return(p-=g)===m||p%m==0&&0<=p/m}}},PSEUDO:function(e,a){var t,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);return o[E]?o(a):1<o.length?(t=[e,e,"",a],w.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var i,n=o(e,a),s=n.length;s--;)e[i=j(e,n[s])]=!(t[i]=n[s])}):function(e){return o(e,0,t)}):o}},pseudos:{not:ce(function(e){var n=[],s=[],r=h(e.replace(X,"$1"));return r[E]?ce(function(e,t,i,n){for(var s,a=r(e,null,n,[]),o=e.length;o--;)(s=a[o])&&(e[o]=!(t[o]=s))}):function(e,t,i){return n[0]=e,r(n,null,i,s),n[0]=null,!s.pop()}}),has:ce(function(t){return function(e){return 0<re(t,e).length}}),contains:ce(function(t){return t=t.replace(ne,d),function(e){return-1<(e.textContent||a(e)).indexOf(t)}}),lang:ce(function(i){return U.test(i||"")||re.error("unsupported lang: "+i),i=i.replace(ne,d).toLowerCase(),function(e){var t;do{if(t=T?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===i||0===t.indexOf(i+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===r},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,i){return[i<0?i+t:i]}),even:ge(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:ge(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:ge(function(e,t,i){for(var n=i<0?i+t:t<i?t:i;0<=--n;)e.push(n);return e}),gt:ge(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})w.pseudos[e]=fe(e);function ye(){}function be(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function we(r,e,t){var l=e.dir,c=e.next,u=c||l,d=t&&"parentNode"===u,h=n++;return e.first?function(e,t,i){for(;e=e[l];)if(1===e.nodeType||d)return r(e,t,i);return!1}:function(e,t,i){var n,s,a,o=[k,h];if(i){for(;e=e[l];)if((1===e.nodeType||d)&&r(e,t,i))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(s=(a=e[E]||(e[E]={}))[e.uniqueID]||(a[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((n=s[u])&&n[0]===k&&n[1]===h)return o[2]=n[2];if((s[u]=o)[2]=r(e,t,i))return!0}return!1}}function xe(s){return 1<s.length?function(e,t,i){for(var n=s.length;n--;)if(!s[n](e,t,i))return!1;return!0}:s[0]}function Ce(e,t,i,n,s){for(var a,o=[],r=0,l=e.length,c=null!=t;r<l;r++)(a=e[r])&&(i&&!i(a,n,s)||(o.push(a),c&&t.push(r)));return o}function Se(p,f,m,g,v,e){return g&&!g[E]&&(g=Se(g)),v&&!v[E]&&(v=Se(v,e)),ce(function(e,t,i,n){var s,a,o,r=[],l=[],c=t.length,u=e||function(e,t,i){for(var n=0,s=t.length;n<s;n++)re(e,t[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),d=!p||!e&&f?u:Ce(u,r,p,i,n),h=m?v||(e?p:c||g)?[]:t:d;if(m&&m(d,h,i,n),g)for(s=Ce(h,l),g(s,[],i,n),a=s.length;a--;)(o=s[a])&&(h[l[a]]=!(d[l[a]]=o));if(e){if(v||p){if(v){for(s=[],a=h.length;a--;)(o=h[a])&&s.push(d[a]=o);v(null,h=[],s,n)}for(a=h.length;a--;)(o=h[a])&&-1<(s=v?j(e,o):r[a])&&(e[s]=!(t[s]=o))}}else h=Ce(h===t?h.splice(c,h.length):h),v?v(null,t,h,n):N.apply(t,h)})}function Te(e){for(var s,t,i,n=e.length,a=w.relative[e[0].type],o=a||w.relative[" "],r=a?1:0,l=we(function(e){return e===s},o,!0),c=we(function(e){return-1<j(s,e)},o,!0),u=[function(e,t,i){var n=!a&&(i||t!==x)||((s=t).nodeType?l:c)(e,t,i);return s=null,n}];r<n;r++)if(t=w.relative[e[r].type])u=[we(xe(u),t)];else{if((t=w.filter[e[r].type].apply(null,e[r].matches))[E]){for(i=++r;i<n&&!w.relative[e[i].type];i++);return Se(1<r&&xe(u),1<r&&be(e.slice(0,r-1).concat({value:" "===e[r-2].type?"*":""})).replace(X,"$1"),t,r<i&&Te(e.slice(r,i)),i<n&&Te(e=e.slice(i)),i<n&&be(e))}u.push(t)}return xe(u)}function Ee(g,v){function e(e,t,i,n,s){var a,o,r,l=0,c="0",u=e&&[],d=[],h=x,p=e||b&&w.find.TAG("*",s),f=k+=null==h?1:Math.random()||.1,m=p.length;for(s&&(x=t==S||t||s);c!==m&&null!=(a=p[c]);c++){if(b&&a){for(o=0,t||a.ownerDocument==S||(C(a),i=!T);r=g[o++];)if(r(a,t||S,i)){n.push(a);break}s&&(k=f)}y&&((a=!r&&a)&&l--,e&&u.push(a))}if(l+=c,y&&c!==l){for(o=0;r=v[o++];)r(u,d,t,i);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=L.call(n));d=Ce(d)}N.apply(n,d),s&&!e&&0<d.length&&1<l+v.length&&re.uniqueSort(n)}return s&&(k=f,x=h),u}var y=0<v.length,b=0<g.length;return y?ce(e):e}return ye.prototype=w.filters=w.pseudos,w.setFilters=new ye,f=re.tokenize=function(e,t){var i,n,s,a,o,r,l,c=M[e+" "];if(c)return t?0:c.slice(0);for(o=e,r=[],l=w.preFilter;o;){for(a in i&&!(n=Y.exec(o))||(n&&(o=o.slice(n[0].length)||o),r.push(s=[])),i=!1,(n=W.exec(o))&&(i=n.shift(),s.push({value:i,type:n[0].replace(X," ")}),o=o.slice(i.length)),w.filter)!(n=K[a].exec(o))||l[a]&&!(n=l[a](n))||(i=n.shift(),s.push({value:i,type:a,matches:n}),o=o.slice(i.length));if(!i)break}return t?o.length:o?re.error(e):M(e,r).slice(0)},h=re.compile=function(e,t){var i,n=[],s=[],a=P[e+" "];if(!a){for(i=(t=t||f(e)).length;i--;)(a=Te(t[i]))[E]?n.push(a):s.push(a);(a=P(e,Ee(s,n))).selector=e}return a},m=re.select=function(e,t,i,n){var s,a,o,r,l,c="function"==typeof e&&e,u=!n&&f(e=c.selector||e);if(i=i||[],1===u.length){if(2<(a=u[0]=u[0].slice(0)).length&&"ID"===(o=a[0]).type&&9===t.nodeType&&T&&w.relative[a[1].type]){if(!(t=(w.find.ID(o.matches[0].replace(ne,d),t)||[])[0]))return i;c&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(s=K.needsContext.test(e)?0:a.length;s--&&(o=a[s],!w.relative[r=o.type]);)if((l=w.find[r])&&(n=l(o.matches[0].replace(ne,d),ie.test(a[0].type)&&ve(t.parentNode)||t))){if(a.splice(s,1),!(e=n.length&&be(a)))return N.apply(i,n),i;break}}return(c||h(e,u))(n,t,!T,i,!t||ie.test(e)&&ve(t.parentNode)||t),i},p.sortStable=E.split("").sort(O).join("")===E,p.detectDuplicates=!!c,C(),p.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(F,function(e,t,i){var n;if(!i)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),re}(S);E.find=p,E.expr=p.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;function f(e,t,i){for(var n=[],s=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(s&&E(e).is(i))break;n.push(e)}return n}function C(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i}var k=E.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,i,n){return b(i)?E.grep(e,function(e,t){return!!i.call(e,t,e)!==n}):i.nodeType?E.grep(e,function(e){return e===i!==n}):"string"!=typeof i?E.grep(e,function(e){return-1<s.call(i,e)!==n}):E.filter(i,e,n)}E.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?E.find.matchesSelector(n,e)?[n]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,i,n=this.length,s=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<n;t++)if(E.contains(s[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)E.find(e,s[t],i);return 1<n?E.uniqueSort(i):i},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var D,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,i){var n,s;if(!e)return this;if(i=i||D,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==i.ready?i.ready(e):e(E):E.makeArray(e,this);if(!(n="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:O.exec(e))||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),M.test(n[1])&&E.isPlainObject(t))for(n in t)b(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(s=T.getElementById(n[2]))&&(this[0]=s,this.length=1),this}).prototype=E.fn,D=E(T);var I=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function $(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,s=this.length,a=[],o="string"!=typeof e&&E(e);if(!k.test(e))for(;n<s;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(o?-1<o.index(i):1===i.nodeType&&E.find.matchesSelector(i,e))){a.push(i);break}return this.pushStack(1<a.length?E.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?s.call(E(e),this[0]):s.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,i){return f(e,"parentNode",i)},next:function(e){return $(e,"nextSibling")},prev:function(e){return $(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,i){return f(e,"nextSibling",i)},prevUntil:function(e,t,i){return f(e,"previousSibling",i)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(n,s){E.fn[n]=function(e,t){var i=E.map(this,s,e);return"Until"!==n.slice(-5)&&(t=e),t&&"string"==typeof t&&(i=E.filter(t,i)),1<this.length&&(L[n]||E.uniqueSort(i),I.test(n)&&i.reverse()),this.pushStack(i)}});var N=/[^\x20\t\r\n\f]+/g;function z(e){return e}function j(e){throw e}function F(e,t,i,n){var s;try{e&&b(s=e.promise)?s.call(e).done(t).fail(i):e&&b(s=e.then)?s.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}E.Callbacks=function(n){var e,i;n="string"==typeof n?(e=n,i={},E.each(e.match(N)||[],function(e,t){i[t]=!0}),i):E.extend({},n);function s(){for(r=r||n.once,o=a=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&n.stopOnFalse&&(u=l.length,t=!1);n.memory||(t=!1),a=!1,r&&(l=t?[]:"")}var a,t,o,r,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!a&&(u=l.length-1,c.push(t)),function i(e){E.each(e,function(e,t){b(t)?n.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==x(t)&&i(t)})}(arguments),t&&!a&&s()),this},remove:function(){return E.each(arguments,function(e,t){for(var i;-1<(i=E.inArray(t,l,i));)l.splice(i,1),i<=u&&u--}),this},has:function(e){return e?-1<E.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return r=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return r=c=[],t||a||(l=t=""),this},locked:function(){return!!r},fireWith:function(e,t){return r||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),a||s()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!o}};return d},E.extend({Deferred:function(e){var a=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],s="pending",o={state:function(){return s},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var s=arguments;return E.Deferred(function(n){E.each(a,function(e,t){var i=b(s[t[4]])&&s[t[4]];r[t[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[t[0]+"With"](this,i?[e]:arguments)})}),s=null}).promise()},then:function(t,i,n){var l=0;function c(s,a,o,r){return function(){function e(){var e,t;if(!(s<l)){if((e=o.apply(i,n))===a.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?r?t.call(e,c(l,a,z,r),c(l,a,j,r)):(l++,t.call(e,c(l,a,z,r),c(l,a,j,r),c(l,a,z,a.notifyWith))):(o!==z&&(i=void 0,n=[e]),(r||a.resolveWith)(i,n))}}var i=this,n=arguments,t=r?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),l<=s+1&&(o!==j&&(i=void 0,n=[e]),a.rejectWith(i,n))}};s?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),S.setTimeout(t))}}return E.Deferred(function(e){a[0][3].add(c(0,e,b(n)?n:z,e.notifyWith)),a[1][3].add(c(0,e,b(t)?t:z)),a[2][3].add(c(0,e,b(i)?i:j))}).promise()},promise:function(e){return null!=e?E.extend(e,o):o}},r={};return E.each(a,function(e,t){var i=t[2],n=t[5];o[t[1]]=i.add,n&&i.add(function(){s=n},a[3-e][2].disable,a[3-e][3].disable,a[0][2].lock,a[0][3].lock),i.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=i.fireWith}),o.promise(r),e&&e.call(r,r),r},when:function(e){function t(t){return function(e){s[t]=this,a[t]=1<arguments.length?r.call(arguments):e,--i||o.resolveWith(s,a)}}var i=arguments.length,n=i,s=Array(n),a=r.call(arguments),o=E.Deferred();if(i<=1&&(F(e,o.done(t(n)).resolve,o.reject,!i),"pending"===o.state()||b(a[n]&&a[n].then)))return o.then();for(;n--;)F(a[n],t(n),o.reject);return o.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){S.console&&S.console.warn&&e&&R.test(e.name)&&S.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){S.setTimeout(function(){throw e})};var B=E.Deferred();function H(){T.removeEventListener("DOMContentLoaded",H),S.removeEventListener("load",H),E.ready()}E.fn.ready=function(e){return B.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||B.resolveWith(T,[E])}}),E.ready.then=B.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?S.setTimeout(E.ready):(T.addEventListener("DOMContentLoaded",H),S.addEventListener("load",H));var q=function(e,t,i,n,s,a,o){var r=0,l=e.length,c=null==i;if("object"===x(i))for(r in s=!0,i)q(e,t,r,i[r],!0,a,o);else if(void 0!==n&&(s=!0,b(n)||(o=!0),c&&(t=o?(t.call(e,n),null):(c=t,function(e,t,i){return c.call(E(e),i)})),t))for(;r<l;r++)t(e[r],i,o?n:n.call(e[r],r,t(e[r],i)));return s?e:c?t.call(e):l?t(e[0],i):a},_=/^-ms-/,X=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function W(e){return e.replace(_,"ms-").replace(X,Y)}function V(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,s=this.cache(e);if("string"==typeof t)s[W(t)]=i;else for(n in t)s[W(n)]=t[n];return s},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][W(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){i=(t=Array.isArray(t)?t.map(W):(t=W(t))in n?[t]:t.match(N)||[]).length;for(;i--;)delete n[t[i]]}void 0!==t&&!E.isEmptyObject(n)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var U=new G,K=new G,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,i){var n,s;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(i=e.getAttribute(n))){try{i="true"===(s=i)||"false"!==s&&("null"===s?null:s===+s+""?+s:Q.test(s)?JSON.parse(s):s)}catch(e){}K.set(e,t,i)}else i=void 0;return i}E.extend({hasData:function(e){return K.hasData(e)||U.hasData(e)},data:function(e,t,i){return K.access(e,t,i)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,i){return U.access(e,t,i)},_removeData:function(e,t){U.remove(e,t)}}),E.fn.extend({data:function(i,e){var t,n,s,a=this[0],o=a&&a.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){K.set(this,i)}):q(this,function(e){var t;if(a&&void 0===e)return void 0!==(t=K.get(a,i))||void 0!==(t=J(a,i))?t:void 0;this.each(function(){K.set(this,i,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(s=K.get(a),1===a.nodeType&&!U.get(a,"hasDataAttrs"))){for(t=o.length;t--;)o[t]&&0===(n=o[t].name).indexOf("data-")&&(n=W(n.slice(5)),J(a,n,s[n]));U.set(a,"hasDataAttrs",!0)}return s},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),E.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=U.get(e,t),i&&(!n||Array.isArray(i)?n=U.access(e,t,E.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=E.queue(e,t),n=i.length,s=i.shift(),a=E._queueHooks(e,t);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===t&&i.unshift("inprogress"),delete a.stop,s.call(e,function(){E.dequeue(e,t)},a)),!n&&a&&a.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return U.get(e,i)||U.access(e,i,{empty:E.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",i])})})}}),E.fn.extend({queue:function(t,i){var e=2;return"string"!=typeof t&&(i=t,t="fx",e--),arguments.length<e?E.queue(this[0],t):void 0===i?this:this.each(function(){var e=E.queue(this,t,i);E._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function i(){--s||a.resolveWith(o,[o])}var n,s=1,a=E.Deferred(),o=this,r=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";r--;)(n=U.get(o[r],e+"queueHooks"))&&n.empty&&(s++,n.empty.add(i));return i(),a.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ne=T.documentElement,se=function(e){return E.contains(e.ownerDocument,e)},ae={composed:!0};ne.getRootNode&&(se=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var oe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===E.css(e,"display")};function re(e,t,i,n){var s,a,o=20,r=n?function(){return n.cur()}:function(){return E.css(e,t,"")},l=r(),c=i&&i[3]||(E.cssNumber[t]?"":"px"),u=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&te.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;o--;)E.style(e,t,u+c),(1-a)*(1-(a=r()/l||.5))<=0&&(o=0),u/=a;u*=2,E.style(e,t,u+c),i=i||[]}return i&&(u=+u||+l||0,s=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=u,n.end=s)),s}var le={};function ce(e,t){for(var i,n,s,a,o,r,l,c=[],u=0,d=e.length;u<d;u++)(n=e[u]).style&&(i=n.style.display,t?("none"===i&&(c[u]=U.get(n,"display")||null,c[u]||(n.style.display="")),""===n.style.display&&oe(n)&&(c[u]=(l=o=a=void 0,o=(s=n).ownerDocument,r=s.nodeName,(l=le[r])||(a=o.body.appendChild(o.createElement(r)),l=E.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),le[r]=l)))):"none"!==i&&(c[u]="none",U.set(n,"display",i)));for(u=0;u<d;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}E.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){oe(this)?E(this).show():E(this).hide()})}});var ue,de,he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;ue=T.createDocumentFragment().appendChild(T.createElement("div")),(de=T.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ue.appendChild(de),y.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",y.option=!!ue.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var i=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&A(e,t)?E.merge([e],i):i}function ve(e,t){for(var i=0,n=e.length;i<n;i++)U.set(e[i],"globalEval",!t||U.get(t[i],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,y.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,i,n,s){for(var a,o,r,l,c,u,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((a=e[p])||0===a)if("object"===x(a))E.merge(h,a.nodeType?[a]:a);else if(ye.test(a)){for(o=o||d.appendChild(t.createElement("div")),r=(pe.exec(a)||["",""])[1].toLowerCase(),l=me[r]||me._default,o.innerHTML=l[1]+E.htmlPrefilter(a)+l[2],u=l[0];u--;)o=o.lastChild;E.merge(h,o.childNodes),(o=d.firstChild).textContent=""}else h.push(t.createTextNode(a));for(d.textContent="",p=0;a=h[p++];)if(n&&-1<E.inArray(a,n))s&&s.push(a);else if(c=se(a),o=ge(d.appendChild(a),"script"),c&&ve(o),i)for(u=0;a=o[u++];)fe.test(a.type||"")&&i.push(a);return d}var we=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Te(){return!1}function Ee(e,t){return e===function(){try{return T.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,i,n,s,a){var o,r;if("object"==typeof t){for(r in"string"!=typeof i&&(n=n||i,i=void 0),t)ke(e,r,i,n,t[r],a);return e}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Te;else if(!s)return e;return 1===a&&(o=s,(s=function(e){return E().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=E.guid++)),e.each(function(){E.event.add(this,t,s,n,i)})}function Ae(e,s,a){a?(U.set(e,s,!1),E.event.add(e,s,{namespace:!1,handler:function(e){var t,i,n=U.get(this,s);if(1&e.isTrigger&&this[s]){if(n.length)(E.event.special[s]||{}).delegateType&&e.stopPropagation();else if(n=r.call(arguments),U.set(this,s,n),t=a(this,s),this[s](),n!==(i=U.get(this,s))||t?U.set(this,s,!1):i={},n!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else n.length&&(U.set(this,s,{value:E.event.trigger(E.extend(n[0],E.Event.prototype),n.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,s)&&E.event.add(e,s,Se)}E.event={global:{},add:function(t,e,i,n,s){var a,o,r,l,c,u,d,h,p,f,m,g=U.get(t);if(V(t))for(i.handler&&(i=(a=i).handler,s=a.selector),s&&E.find.matchesSelector(ne,s),i.guid||(i.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(o=g.handle)||(o=g.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(N)||[""]).length;c--;)p=m=(r=Ce.exec(e[c])||[])[1],f=(r[2]||"").split(".").sort(),p&&(d=E.event.special[p]||{},p=(s?d.delegateType:d.bindType)||p,d=E.event.special[p]||{},u=E.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&E.expr.match.needsContext.test(s),namespace:f.join(".")},a),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,f,o)||t.addEventListener&&t.addEventListener(p,o)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,u):h.push(u),E.event.global[p]=!0)},remove:function(e,t,i,n,s){var a,o,r,l,c,u,d,h,p,f,m,g=U.hasData(e)&&U.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(N)||[""]).length;c--;)if(p=m=(r=Ce.exec(t[c])||[])[1],f=(r[2]||"").split(".").sort(),p){for(d=E.event.special[p]||{},h=l[p=(n?d.delegateType:d.bindType)||p]||[],r=r[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=a=h.length;a--;)u=h[a],!s&&m!==u.origType||i&&i.guid!==u.guid||r&&!r.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(h.splice(a,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(e,u));o&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||E.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[c],i,n,!0);E.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,i,n,s,a,o,r=new Array(arguments.length),l=E.event.fix(e),c=(U.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(r[0]=l,t=1;t<arguments.length;t++)r[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(o=E.event.handlers.call(this,l,c),t=0;(s=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(a=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(n=((E.event.special[a.origType]||{}).handle||a.handler).apply(s.elem,r))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var i,n,s,a,o,r=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(a=[],o={},i=0;i<l;i++)void 0===o[s=(n=t[i]).selector+" "]&&(o[s]=n.needsContext?-1<E(s,this).index(c):E.find(s,this,null,[c]).length),o[s]&&a.push(n);a.length&&r.push({elem:c,handlers:a})}return c=this,l<t.length&&r.push({elem:c,handlers:t.slice(l)}),r},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Se),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&A(t,"input")&&U.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},function(e,t){E.event.special[e]={setup:function(){return Ae(this,e,Ee),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,s){E.event.special[e]={delegateType:s,bindType:s,handle:function(e){var t,i=e.relatedTarget,n=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=n.origType,t=n.handler.apply(this,arguments),e.type=s),t}}}),E.fn.extend({on:function(e,t,i,n){return ke(this,e,t,i,n)},one:function(e,t,i,n){return ke(this,e,t,i,n,1)},off:function(e,t,i){var n,s;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,E(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(i=t,t=void 0),!1===i&&(i=Te),this.each(function(){E.event.remove(this,e,i,t)});for(s in e)this.off(s,t,e[s]);return this}});var Me=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,De=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function $e(e,t){var i,n,s,a,o,r;if(1===t.nodeType){if(U.hasData(e)&&(r=U.get(e).events))for(s in U.remove(t,"handle events"),r)for(i=0,n=r[s].length;i<n;i++)E.event.add(t,s,r[s][i]);K.hasData(e)&&(a=K.access(e),o=E.extend({},a),K.set(t,o))}}function Ne(i,n,s,a){n=g(n);var e,t,o,r,l,c,u=0,d=i.length,h=d-1,p=n[0],f=b(p);if(f||1<d&&"string"==typeof p&&!y.checkClone&&Pe.test(p))return i.each(function(e){var t=i.eq(e);f&&(n[0]=p.call(this,e,t.html())),Ne(t,n,s,a)});if(d&&(t=(e=be(n,i[0].ownerDocument,!1,i,a)).firstChild,1===e.childNodes.length&&(e=t),t||a)){for(r=(o=E.map(ge(e,"script"),Ie)).length;u<d;u++)l=e,u!==h&&(l=E.clone(l,!0,!0),r&&E.merge(o,ge(l,"script"))),s.call(i[u],l,u);if(r)for(c=o[o.length-1].ownerDocument,E.map(o,Le),u=0;u<r;u++)l=o[u],fe.test(l.type||"")&&!U.access(l,"globalEval")&&E.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):w(l.textContent.replace(De,""),l,c))}return i}function ze(e,t,i){for(var n,s=t?E.filter(t,e):e,a=0;null!=(n=s[a]);a++)i||1!==n.nodeType||E.cleanData(ge(n)),n.parentNode&&(i&&se(n)&&ve(ge(n,"script")),n.parentNode.removeChild(n));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,i){var n,s,a,o,r,l,c,u=e.cloneNode(!0),d=se(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(o=ge(u),n=0,s=(a=ge(e)).length;n<s;n++)r=a[n],l=o[n],"input"===(c=l.nodeName.toLowerCase())&&he.test(r.type)?l.checked=r.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=r.defaultValue);if(t)if(i)for(a=a||ge(e),o=o||ge(u),n=0,s=a.length;n<s;n++)$e(a[n],o[n]);else $e(e,u);return 0<(o=ge(u,"script")).length&&ve(o,!d&&ge(e,"script")),u},cleanData:function(e){for(var t,i,n,s=E.event.special,a=0;void 0!==(i=e[a]);a++)if(V(i)){if(t=i[U.expando]){if(t.events)for(n in t.events)s[n]?E.event.remove(i,n):E.removeEvent(i,n,t.handle);i[U.expando]=void 0}i[K.expando]&&(i[K.expando]=void 0)}}}),E.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return q(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ne(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ne(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Oe(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ne(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!me[(pe.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;i<n;i++)1===(t=this[i]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var i=[];return Ne(this,arguments,function(e){var t=this.parentNode;E.inArray(this,i)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},i)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,o){E.fn[e]=function(e){for(var t,i=[],n=E(e),s=n.length-1,a=0;a<=s;a++)t=a===s?this:this.clone(!0),E(n[a])[o](t),l.apply(i,t.get());return this.pushStack(i)}});function je(e,t,i){var n,s,a={};for(s in t)a[s]=e.style[s],e.style[s]=t[s];for(s in n=i.call(e),t)e.style[s]=a[s];return n}var Fe,Re,Be,He,qe,_e,Xe,Ye,We=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ve=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=S),t.getComputedStyle(e)},Ge=new RegExp(ie.join("|"),"i");function Ue(){var e;Ye&&(Xe.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ye.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(Xe).appendChild(Ye),e=S.getComputedStyle(Ye),Fe="1%"!==e.top,_e=12===Ke(e.marginLeft),Ye.style.right="60%",He=36===Ke(e.right),Re=36===Ke(e.width),Ye.style.position="absolute",Be=12===Ke(Ye.offsetWidth/3),ne.removeChild(Xe),Ye=null)}function Ke(e){return Math.round(parseFloat(e))}function Qe(e,t,i){var n,s,a,o,r=e.style;return(i=i||Ve(e))&&(""!==(o=i.getPropertyValue(t)||i[t])||se(e)||(o=E.style(e,t)),!y.pixelBoxStyles()&&We.test(o)&&Ge.test(t)&&(n=r.width,s=r.minWidth,a=r.maxWidth,r.minWidth=r.maxWidth=r.width=o,o=i.width,r.width=n,r.minWidth=s,r.maxWidth=a)),void 0!==o?o+"":o}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Xe=T.createElement("div"),(Ye=T.createElement("div")).style&&(Ye.style.backgroundClip="content-box",Ye.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ye.style.backgroundClip,E.extend(y,{boxSizingReliable:function(){return Ue(),Re},pixelBoxStyles:function(){return Ue(),He},pixelPosition:function(){return Ue(),Fe},reliableMarginLeft:function(){return Ue(),_e},scrollboxSize:function(){return Ue(),Be},reliableTrDimensions:function(){var e,t,i,n;return null==qe&&(e=T.createElement("table"),t=T.createElement("tr"),i=T.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",ne.appendChild(e).appendChild(t).appendChild(i),n=S.getComputedStyle(t),qe=3<parseInt(n.height),ne.removeChild(e)),qe}}));var Je=["Webkit","Moz","ms"],et=T.createElement("div").style,tt={};function it(e){var t=E.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),i=Je.length;i--;)if((e=Je[i]+t)in et)return e}(e)||e)}var nt=/^(none|table(?!-c[ea]).+)/,st=/^--/,at={position:"absolute",visibility:"hidden",display:"block"},ot={letterSpacing:"0",fontWeight:"400"};function rt(e,t,i){var n=te.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function lt(e,t,i,n,s,a){var o="width"===t?1:0,r=0,l=0;if(i===(n?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(l+=E.css(e,i+ie[o],!0,s)),n?("content"===i&&(l-=E.css(e,"padding"+ie[o],!0,s)),"margin"!==i&&(l-=E.css(e,"border"+ie[o]+"Width",!0,s))):(l+=E.css(e,"padding"+ie[o],!0,s),"padding"!==i?l+=E.css(e,"border"+ie[o]+"Width",!0,s):r+=E.css(e,"border"+ie[o]+"Width",!0,s));return!n&&0<=a&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-r-.5))||0),l}function ct(e,t,i){var n=Ve(e),s=(!y.boxSizingReliable()||i)&&"border-box"===E.css(e,"boxSizing",!1,n),a=s,o=Qe(e,t,n),r="offset"+t[0].toUpperCase()+t.slice(1);if(We.test(o)){if(!i)return o;o="auto"}return(!y.boxSizingReliable()&&s||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===E.css(e,"display",!1,n))&&e.getClientRects().length&&(s="border-box"===E.css(e,"boxSizing",!1,n),(a=r in e)&&(o=e[r])),(o=parseFloat(o)||0)+lt(e,t,i||(s?"border":"content"),a,n,o)+"px"}function ut(e,t,i,n,s){return new ut.prototype.init(e,t,i,n,s)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=Qe(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var s,a,o,r=W(t),l=st.test(t),c=e.style;if(l||(t=it(r)),o=E.cssHooks[t]||E.cssHooks[r],void 0===i)return o&&"get"in o&&void 0!==(s=o.get(e,!1,n))?s:c[t];"string"===(a=typeof i)&&(s=te.exec(i))&&s[1]&&(i=re(e,t,s),a="number"),null!=i&&i==i&&("number"!==a||l||(i+=s&&s[3]||(E.cssNumber[r]?"":"px")),y.clearCloneStyle||""!==i||0!==t.indexOf("background")||(c[t]="inherit"),o&&"set"in o&&void 0===(i=o.set(e,i,n))||(l?c.setProperty(t,i):c[t]=i))}},css:function(e,t,i,n){var s,a,o,r=W(t);return st.test(t)||(t=it(r)),(o=E.cssHooks[t]||E.cssHooks[r])&&"get"in o&&(s=o.get(e,!0,i)),void 0===s&&(s=Qe(e,t,n)),"normal"===s&&t in ot&&(s=ot[t]),""===i||i?(a=parseFloat(s),!0===i||isFinite(a)?a||0:s):s}}),E.each(["height","width"],function(e,l){E.cssHooks[l]={get:function(e,t,i){if(t)return!nt.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,i):je(e,at,function(){return ct(e,l,i)})},set:function(e,t,i){var n,s=Ve(e),a=!y.scrollboxSize()&&"absolute"===s.position,o=(a||i)&&"border-box"===E.css(e,"boxSizing",!1,s),r=i?lt(e,l,i,o,s):0;return o&&a&&(r-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(s[l])-lt(e,l,"border",!1,s)-.5)),r&&(n=te.exec(t))&&"px"!==(n[3]||"px")&&(e.style[l]=t,t=E.css(e,l)),rt(0,t,r)}}}),E.cssHooks.marginLeft=Ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(s,a){E.cssHooks[s+a]={expand:function(e){for(var t=0,i={},n="string"==typeof e?e.split(" "):[e];t<4;t++)i[s+ie[t]+a]=n[t]||n[t-2]||n[0];return i}},"margin"!==s&&(E.cssHooks[s+a].set=rt)}),E.fn.extend({css:function(e,t){return q(this,function(e,t,i){var n,s,a={},o=0;if(Array.isArray(t)){for(n=Ve(e),s=t.length;o<s;o++)a[t[o]]=E.css(e,t[o],!1,n);return a}return void 0!==i?E.style(e,t,i):E.css(e,t)},e,t,1<arguments.length)}}),(E.Tween=ut).prototype={constructor:ut,init:function(e,t,i,n,s,a){this.elem=e,this.prop=i,this.easing=s||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=a||(E.cssNumber[i]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,i=ut.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ut.propHooks._default.set(this),this}},ut.prototype.init.prototype=ut.prototype,ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},ut.propHooks.scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ut.prototype.init,E.fx.step={};var dt,ht,pt,ft,mt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function vt(){ht&&(!1===T.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(vt):S.setTimeout(vt,E.fx.interval),E.fx.tick())}function yt(){return S.setTimeout(function(){dt=void 0}),dt=Date.now()}function bt(e,t){var i,n=0,s={height:e};for(t=t?1:0;n<4;n+=2-t)s["margin"+(i=ie[n])]=s["padding"+i]=e;return t&&(s.opacity=s.width=e),s}function wt(e,t,i){for(var n,s=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),a=0,o=s.length;a<o;a++)if(n=s[a].call(i,t,e))return n}function xt(a,e,t){var i,o,n=0,s=xt.prefilters.length,r=E.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=dt||yt(),t=Math.max(0,c.startTime+c.duration-e),i=1-(t/c.duration||0),n=0,s=c.tweens.length;n<s;n++)c.tweens[n].run(i);return r.notifyWith(a,[c,i,t]),i<1&&s?t:(s||r.notifyWith(a,[c,1,0]),r.resolveWith(a,[c]),!1)},c=r.promise({elem:a,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var i=E.Tween(a,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var t=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;t<i;t++)c.tweens[t].run(1);return e?(r.notifyWith(a,[c,1,0]),r.resolveWith(a,[c,e])):r.rejectWith(a,[c,e]),this}}),u=c.props;for(!function(e,t){var i,n,s,a,o;for(i in e)if(s=t[n=W(i)],a=e[i],Array.isArray(a)&&(s=a[1],a=e[i]=a[0]),i!==n&&(e[n]=a,delete e[i]),(o=E.cssHooks[n])&&"expand"in o)for(i in a=o.expand(a),delete e[n],a)i in e||(e[i]=a[i],t[i]=s);else t[n]=s}(u,c.opts.specialEasing);n<s;n++)if(i=xt.prefilters[n].call(c,a,u,c.opts))return b(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(u,wt,c),b(c.opts.start)&&c.opts.start.call(a,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:a,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(xt,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return re(i.elem,e,te.exec(t),i),i}]},tweener:function(e,t){for(var i,n=0,s=(e=b(e)?(t=e,["*"]):e.match(N)).length;n<s;n++)i=e[n],xt.tweeners[i]=xt.tweeners[i]||[],xt.tweeners[i].unshift(t)},prefilters:[function(e,t,i){var n,s,a,o,r,l,c,u,d="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&oe(e),g=U.get(e,"fxshow");for(n in i.queue||(null==(o=E._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,r=o.empty.fire,o.empty.fire=function(){o.unqueued||r()}),o.unqueued++,h.always(function(){h.always(function(){o.unqueued--,E.queue(e,"fx").length||o.empty.fire()})})),t)if(s=t[n],mt.test(s)){if(delete t[n],a=a||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!g||void 0===g[n])continue;m=!0}p[n]=g&&g[n]||E.style(e,n)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(n in d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=U.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=E.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=U.access(e,"fxshow",{display:c}),a&&(g.hidden=!m),m&&ce([e],!0),h.done(function(){for(n in m||ce([e]),U.remove(e,"fxshow"),p)E.style(e,n,p[n])})),l=wt(m?g[n]:0,n,h),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),E.speed=function(e,t,i){var n=e&&"object"==typeof e?E.extend({},e):{complete:i||!i&&t||b(e)&&e,duration:e,easing:i&&t||t&&!b(t)&&t};return E.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in E.fx.speeds?n.duration=E.fx.speeds[n.duration]:n.duration=E.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&E.dequeue(this,n.queue)},n},E.fn.extend({fadeTo:function(e,t,i,n){return this.filter(oe).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(t,e,i,n){function s(){var e=xt(this,E.extend({},t),o);(a||U.get(this,"finish"))&&e.stop(!0)}var a=E.isEmptyObject(t),o=E.speed(e,i,n);return s.finish=s,a||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(s,e,a){function o(e){var t=e.stop;delete e.stop,t(a)}return"string"!=typeof s&&(a=e,e=s,s=void 0),e&&this.queue(s||"fx",[]),this.each(function(){var e=!0,t=null!=s&&s+"queueHooks",i=E.timers,n=U.get(this);if(t)n[t]&&n[t].stop&&o(n[t]);else for(t in n)n[t]&&n[t].stop&&gt.test(t)&&o(n[t]);for(t=i.length;t--;)i[t].elem!==this||null!=s&&i[t].queue!==s||(i[t].anim.stop(a),e=!1,i.splice(t,1));!e&&a||E.dequeue(this,s)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var e,t=U.get(this),i=t[o+"queue"],n=t[o+"queueHooks"],s=E.timers,a=i?i.length:0;for(t.finish=!0,E.queue(this,o,[]),n&&n.stop&&n.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===o&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete t.finish})}}),E.each(["toggle","show","hide"],function(e,n){var s=E.fn[n];E.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?s.apply(this,arguments):this.animate(bt(n,!0),e,t,i)}}),E.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,n){E.fn[e]=function(e,t,i){return this.animate(n,e,t,i)}}),E.timers=[],E.fx.tick=function(){var e,t=0,i=E.timers;for(dt=Date.now();t<i.length;t++)(e=i[t])()||i[t]!==e||i.splice(t--,1);i.length||E.fx.stop(),dt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ht||(ht=!0,vt())},E.fx.stop=function(){ht=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(n,e){return n=E.fx&&E.fx.speeds[n]||n,e=e||"fx",this.queue(e,function(e,t){var i=S.setTimeout(e,n);t.stop=function(){S.clearTimeout(i)}})},pt=T.createElement("input"),ft=T.createElement("select").appendChild(T.createElement("option")),pt.type="checkbox",y.checkOn=""!==pt.value,y.optSelected=ft.selected,(pt=T.createElement("input")).value="t",pt.type="radio",y.radioValue="t"===pt.value;var Ct,St=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return q(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,i){var n,s,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?E.prop(e,t,i):(1===a&&E.isXMLDoc(e)||(s=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?Ct:void 0)),void 0!==i?null===i?void E.removeAttr(e,t):s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:(e.setAttribute(t,i+""),i):!(s&&"get"in s&&null!==(n=s.get(e,t)))&&null==(n=E.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,s=t&&t.match(N);if(s&&1===e.nodeType)for(;i=s[n++];)e.removeAttribute(i)}}),Ct={set:function(e,t,i){return!1===t?E.removeAttr(e,i):e.setAttribute(i,i),i}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var o=St[t]||E.find.attr;St[t]=function(e,t,i){var n,s,a=t.toLowerCase();return i||(s=St[a],St[a]=n,n=null!=o(e,t,i)?a:null,St[a]=s),n}});var Tt=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function kt(e){return(e.match(N)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function Mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}E.fn.extend({prop:function(e,t){return q(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,i){var n,s,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&E.isXMLDoc(e)||(t=E.propFix[t]||t,s=E.propHooks[t]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:e[t]=i:s&&"get"in s&&null!==(n=s.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,i,n,s,a,o,r,l=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,At(this)))});if((e=Mt(t)).length)for(;i=this[l++];)if(s=At(i),n=1===i.nodeType&&" "+kt(s)+" "){for(o=0;a=e[o++];)n.indexOf(" "+a+" ")<0&&(n+=a+" ");s!==(r=kt(n))&&i.setAttribute("class",r)}return this},removeClass:function(t){var e,i,n,s,a,o,r,l=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=Mt(t)).length)for(;i=this[l++];)if(s=At(i),n=1===i.nodeType&&" "+kt(s)+" "){for(o=0;a=e[o++];)for(;-1<n.indexOf(" "+a+" ");)n=n.replace(" "+a+" "," ");s!==(r=kt(n))&&i.setAttribute("class",r)}return this},toggleClass:function(s,t){var a=typeof s,o="string"==a||Array.isArray(s);return"boolean"==typeof t&&o?t?this.addClass(s):this.removeClass(s):b(s)?this.each(function(e){E(this).toggleClass(s.call(this,e,At(this),t),t)}):this.each(function(){var e,t,i,n;if(o)for(t=0,i=E(this),n=Mt(s);e=n[t++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==s&&"boolean"!=a||((e=At(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==s&&U.get(this,"__className__")||""))})},hasClass:function(e){for(var t,i=0,n=" "+e+" ";t=this[i++];)if(1===t.nodeType&&-1<(" "+kt(At(t))+" ").indexOf(n))return!0;return!1}});var Pt=/\r/g;E.fn.extend({val:function(i){var n,e,s,t=this[0];return arguments.length?(s=b(i),this.each(function(e){var t;1===this.nodeType&&(null==(t=s?i.call(this,e,E(this).val()):i)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?"":e+""})),(n=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,t,"value")||(this.value=t))})):t?(n=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Pt,""):null==e?"":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:kt(E.text(e))}},select:{get:function(e){for(var t,i,n=e.options,s=e.selectedIndex,a="select-one"===e.type,o=a?null:[],r=a?s+1:n.length,l=s<0?r:a?s:0;l<r;l++)if(((i=n[l]).selected||l===s)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(t=E(i).val(),a)return t;o.push(t)}return o},set:function(e,t){for(var i,n,s=e.options,a=E.makeArray(t),o=s.length;o--;)((n=s[o]).selected=-1<E.inArray(E.valHooks.option.get(n),a))&&(i=!0);return i||(e.selectedIndex=-1),a}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},y.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in S;function Dt(e){e.stopPropagation()}var Ot=/^(?:focusinfocus|focusoutblur)$/;E.extend(E.event,{trigger:function(e,t,i,n){var s,a,o,r,l,c,u,d=[i||T],h=v.call(e,"type")?e.type:e,p=v.call(e,"namespace")?e.namespace.split("."):[],f=u=a=i=i||T;if(3!==i.nodeType&&8!==i.nodeType&&!Ot.test(h+E.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),r=h.indexOf(":")<0&&"on"+h,(e=e[E.expando]?e:new E.Event(h,"object"==typeof e&&e)).isTrigger=n?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[h]||{},n||!c.trigger||!1!==c.trigger.apply(i,t))){if(!n&&!c.noBubble&&!m(i)){for(o=c.delegateType||h,Ot.test(o+h)||(f=f.parentNode);f;f=f.parentNode)d.push(f),a=f;a===(i.ownerDocument||T)&&d.push(a.defaultView||a.parentWindow||S)}for(s=0;(f=d[s++])&&!e.isPropagationStopped();)u=f,e.type=1<s?o:c.bindType||h,(l=(U.get(f,"events")||Object.create(null))[e.type]&&U.get(f,"handle"))&&l.apply(f,t),(l=r&&f[r])&&l.apply&&V(f)&&(e.result=l.apply(f,t),!1===e.result&&e.preventDefault());return e.type=h,n||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!V(i)||r&&b(i[h])&&!m(i)&&((a=i[r])&&(i[r]=null),E.event.triggered=h,e.isPropagationStopped()&&u.addEventListener(h,Dt),i[h](),e.isPropagationStopped()&&u.removeEventListener(h,Dt),E.event.triggered=void 0,a&&(i[r]=a)),e.result}},simulate:function(e,t,i){var n=E.extend(new E.Event,i,{type:e,isSimulated:!0});E.event.trigger(n,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return E.event.trigger(e,t,i,!0)}}),y.focusin||E.each({focus:"focusin",blur:"focusout"},function(i,n){function s(e){E.event.simulate(n,e.target,E.event.fix(e))}E.event.special[n]={setup:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n);t||e.addEventListener(i,s,!0),U.access(e,n,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,n)-1;t?U.access(e,n,t):(e.removeEventListener(i,s,!0),U.remove(e,n))}}});var It=S.location,Lt={guid:Date.now()},$t=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new S.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Nt=/\[\]$/,zt=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Ft=/^(?:input|select|textarea|keygen)/i;function Rt(i,e,n,s){var t;if(Array.isArray(e))E.each(e,function(e,t){n||Nt.test(i)?s(i,t):Rt(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,n,s)});else if(n||"object"!==x(e))s(i,e);else for(t in e)Rt(i+"["+t+"]",e[t],n,s)}E.param=function(e,t){function i(e,t){var i=b(t)?t():t;s[s.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)}var n,s=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)Rt(n,e[n],t,i);return s.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&Ft.test(this.nodeName)&&!jt.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var i=E(this).val();return null==i?null:Array.isArray(i)?E.map(i,function(e){return{name:t.name,value:e.replace(zt,"\r\n")}}):{name:t.name,value:i.replace(zt,"\r\n")}}).get()}});var Bt=/%20/g,Ht=/#.*$/,qt=/([?&])_=[^&]*/,_t=/^(.*?):[ \t]*([^\r\n]*)$/gm,Xt=/^(?:GET|HEAD)$/,Yt=/^\/\//,Wt={},Vt={},Gt="*/".concat("*"),Ut=T.createElement("a");function Kt(a){return function(e,t){"string"!=typeof e&&(t=e,e="*");var i,n=0,s=e.toLowerCase().match(N)||[];if(b(t))for(;i=s[n++];)"+"===i[0]?(i=i.slice(1)||"*",(a[i]=a[i]||[]).unshift(t)):(a[i]=a[i]||[]).push(t)}}function Qt(t,s,a,o){var r={},l=t===Vt;function c(e){var n;return r[e]=!0,E.each(t[e]||[],function(e,t){var i=t(s,a,o);return"string"!=typeof i||l||r[i]?l?!(n=i):void 0:(s.dataTypes.unshift(i),c(i),!1)}),n}return c(s.dataTypes[0])||!r["*"]&&c("*")}function Zt(e,t){var i,n,s=E.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((s[i]?e:n=n||{})[i]=t[i]);return n&&E.extend(!0,e,n),e}Ut.href=It.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:It.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(It.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Gt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,E.ajaxSettings),t):Zt(E.ajaxSettings,e)},ajaxPrefilter:Kt(Wt),ajaxTransport:Kt(Vt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,d,h,i,p,n,f,m,s,a,g=E.ajaxSetup({},t),v=g.context||g,y=g.context&&(v.nodeType||v.jquery)?E(v):E.event,b=E.Deferred(),w=E.Callbacks("once memory"),x=g.statusCode||{},o={},r={},l="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(f){if(!i)for(i={};t=_t.exec(h);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(e,t){return null==f&&(e=r[e.toLowerCase()]=r[e.toLowerCase()]||e,o[e]=t),this},overrideMimeType:function(e){return null==f&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)C.always(e[C.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(b.promise(C),g.url=((e||g.url||It.href)+"").replace(Yt,It.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(N)||[""],null==g.crossDomain){n=T.createElement("a");try{n.href=g.url,n.href=n.href,g.crossDomain=Ut.protocol+"//"+Ut.host!=n.protocol+"//"+n.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=E.param(g.data,g.traditional)),Qt(Wt,g,t,C),f)return C;for(s in(m=E.event&&g.global)&&0==E.active++&&E.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Xt.test(g.type),d=g.url.replace(Ht,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Bt,"+")):(a=g.url.slice(d.length),g.data&&(g.processData||"string"==typeof g.data)&&(d+=($t.test(d)?"&":"?")+g.data,delete g.data),!1===g.cache&&(d=d.replace(qt,"$1"),a=($t.test(d)?"&":"?")+"_="+Lt.guid+++a),g.url=d+a),g.ifModified&&(E.lastModified[d]&&C.setRequestHeader("If-Modified-Since",E.lastModified[d]),E.etag[d]&&C.setRequestHeader("If-None-Match",E.etag[d])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&C.setRequestHeader("Content-Type",g.contentType),C.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Gt+"; q=0.01":""):g.accepts["*"]),g.headers)C.setRequestHeader(s,g.headers[s]);if(g.beforeSend&&(!1===g.beforeSend.call(v,C,g)||f))return C.abort();if(l="abort",w.add(g.complete),C.done(g.success),C.fail(g.error),u=Qt(Vt,g,t,C)){if(C.readyState=1,m&&y.trigger("ajaxSend",[C,g]),f)return C;g.async&&0<g.timeout&&(p=S.setTimeout(function(){C.abort("timeout")},g.timeout));try{f=!1,u.send(o,c)}catch(e){if(f)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,i,n){var s,a,o,r,l,c=t;f||(f=!0,p&&S.clearTimeout(p),u=void 0,h=n||"",C.readyState=0<e?4:0,s=200<=e&&e<300||304===e,i&&(r=function(e,t,i){for(var n,s,a,o,r=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(s in r)if(r[s]&&r[s].test(n)){l.unshift(s);break}if(l[0]in i)a=l[0];else{for(s in i){if(!l[0]||e.converters[s+" "+l[0]]){a=s;break}o=o||s}a=a||o}if(a)return a!==l[0]&&l.unshift(a),i[a]}(g,C,i)),!s&&-1<E.inArray("script",g.dataTypes)&&(g.converters["text script"]=function(){}),r=function(e,t,i,n){var s,a,o,r,l,c={},u=e.dataTypes.slice();if(u[1])for(o in e.converters)c[o.toLowerCase()]=e.converters[o];for(a=u.shift();a;)if(e.responseFields[a]&&(i[e.responseFields[a]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=u.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(o=c[l+" "+a]||c["* "+a]))for(s in c)if((r=s.split(" "))[1]===a&&(o=c[l+" "+r[0]]||c["* "+r[0]])){!0===o?o=c[s]:!0!==c[s]&&(a=r[0],u.unshift(r[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(g,r,C,s),s?(g.ifModified&&((l=C.getResponseHeader("Last-Modified"))&&(E.lastModified[d]=l),(l=C.getResponseHeader("etag"))&&(E.etag[d]=l)),204===e||"HEAD"===g.type?c="nocontent":304===e?c="notmodified":(c=r.state,a=r.data,s=!(o=r.error))):(o=c,!e&&c||(c="error",e<0&&(e=0))),C.status=e,C.statusText=(t||c)+"",s?b.resolveWith(v,[a,c,C]):b.rejectWith(v,[C,c,o]),C.statusCode(x),x=void 0,m&&y.trigger(s?"ajaxSuccess":"ajaxError",[C,g,s?a:o]),w.fireWith(v,[C,c]),m&&(y.trigger("ajaxComplete",[C,g]),--E.active||E.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,i){return E.get(e,t,i,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,s){E[s]=function(e,t,i,n){return b(t)&&(n=n||i,i=t,t=void 0),E.ajax(E.extend({url:e,type:s,dataType:n,data:t,success:i},E.isPlainObject(e)&&e))}}),E.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),E._evalUrl=function(e,t,i){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,i)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(e){E(this).wrapInner(i.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(i):e.append(i)})},wrap:function(t){var i=b(t);return this.each(function(e){E(this).wrapAll(i?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},ei=E.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,E.ajaxTransport(function(s){var a,o;if(y.cors||ei&&!s.crossDomain)return{send:function(e,t){var i,n=s.xhr();if(n.open(s.type,s.url,s.async,s.username,s.password),s.xhrFields)for(i in s.xhrFields)n[i]=s.xhrFields[i];for(i in s.mimeType&&n.overrideMimeType&&n.overrideMimeType(s.mimeType),s.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)n.setRequestHeader(i,e[i]);a=function(e){return function(){a&&(a=o=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===e?n.abort():"error"===e?"number"!=typeof n.status?t(0,"error"):t(n.status,n.statusText):t(Jt[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=a(),o=n.onerror=n.ontimeout=a("error"),void 0!==n.onabort?n.onabort=o:n.onreadystatechange=function(){4===n.readyState&&S.setTimeout(function(){a&&o()})},a=a("abort");try{n.send(s.hasContent&&s.data||null)}catch(e){if(a)throw e}},abort:function(){a&&a()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(i){var n,s;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){n=E("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",s=function(e){n.remove(),s=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(n[0])},abort:function(){s&&s()}}});var ti,ii=[],ni=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=ii.pop()||E.expando+"_"+Lt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,i){var n,s,a,o=!1!==e.jsonp&&(ni.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(ni,"$1"+n):!1!==e.jsonp&&(e.url+=($t.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return a||E.error(n+" was not called"),a[0]},e.dataTypes[0]="json",s=S[n],S[n]=function(){a=arguments},i.always(function(){void 0===s?E(S).removeProp(n):S[n]=s,e[n]&&(e.jsonpCallback=t.jsonpCallback,ii.push(n)),a&&b(s)&&s(a[0]),a=s=void 0}),"script"}),y.createHTMLDocument=((ti=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),E.parseHTML=function(e,t,i){return"string"!=typeof e?[]:("boolean"==typeof t&&(i=t,t=!1),t||(y.createHTMLDocument?((n=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(n)):t=T),a=!i&&[],(s=M.exec(e))?[t.createElement(s[1])]:(s=be([e],t,a),a&&a.length&&E(a).remove(),E.merge([],s.childNodes)));var n,s,a},E.fn.load=function(e,t,i){var n,s,a,o=this,r=e.indexOf(" ");return-1<r&&(n=kt(e.slice(r)),e=e.slice(0,r)),b(t)?(i=t,t=void 0):t&&"object"==typeof t&&(s="POST"),0<o.length&&E.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done(function(e){a=arguments,o.html(n?E("<div>").append(E.parseHTML(e)).find(n):e)}).always(i&&function(e,t){o.each(function(){i.apply(this,a||[e.responseText,t,e])})}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(e,t,i){var n,s,a,o,r,l,c=E.css(e,"position"),u=E(e),d={};"static"===c&&(e.style.position="relative"),r=u.offset(),a=E.css(e,"top"),l=E.css(e,"left"),s=("absolute"===c||"fixed"===c)&&-1<(a+l).indexOf("auto")?(o=(n=u.position()).top,n.left):(o=parseFloat(a)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,i,E.extend({},r))),null!=t.top&&(d.top=t.top-r.top+o),null!=t.left&&(d.left=t.left-r.left+s),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),u.css(d))}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,i,n=this[0],s={top:0,left:0};if("fixed"===E.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((s=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),s.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-s.top-E.css(n,"marginTop",!0),left:t.left-s.left-E.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ne})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,s){var a="pageYOffset"===s;E.fn[t]=function(e){return q(this,function(e,t,i){var n;if(m(e)?n=e:9===e.nodeType&&(n=e.defaultView),void 0===i)return n?n[s]:e[t];n?n.scrollTo(a?n.pageXOffset:i,a?i:n.pageYOffset):e[t]=i},t,e,arguments.length)}}),E.each(["top","left"],function(e,i){E.cssHooks[i]=Ze(y.pixelPosition,function(e,t){if(t)return t=Qe(e,i),We.test(t)?E(e).position()[i]+"px":t})}),E.each({Height:"height",Width:"width"},function(o,r){E.each({padding:"inner"+o,content:r,"":"outer"+o},function(n,a){E.fn[a]=function(e,t){var i=arguments.length&&(n||"boolean"!=typeof e),s=n||(!0===e||!0===t?"margin":"border");return q(this,function(e,t,i){var n;return m(e)?0===a.indexOf("outer")?e["inner"+o]:e.document.documentElement["client"+o]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+o],n["scroll"+o],e.body["offset"+o],n["offset"+o],n["client"+o])):void 0===i?E.css(e,t,s):E.style(e,t,i,s)},r,i?e:void 0,i)}})}),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,i){E.fn[i]=function(e,t){return 0<arguments.length?this.on(i,null,e,t):this.trigger(i)}});var si=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var i,n,s;if("string"==typeof t&&(i=e[t],t=e,e=i),b(e))return n=r.call(arguments,2),(s=function(){return e.apply(t||this,n.concat(r.call(arguments)))}).guid=e.guid=e.guid||E.guid++,s},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=A,E.isFunction=b,E.isWindow=m,E.camelCase=W,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(si,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return E});var ai=S.jQuery,oi=S.$;return E.noConflict=function(e){return S.$===E&&(S.$=oi),e&&S.jQuery===E&&(S.jQuery=ai),E},void 0===e&&(S.jQuery=S.$=E),E}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.FlipClock=t()}(this,function(){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e,t,i){return(u=function(){if("undefined"!=typeof Reflect&&Reflect.construct&&!Reflect.construct.sham){if("function"==typeof Proxy)return 1;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),1}catch(e){return}}}()?Reflect.construct:function(e,t,i){var n=[null];n.push.apply(n,t);var s=new(Function.bind.apply(e,n));return i&&c(s,i.prototype),s}).apply(null,arguments)}function d(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e,t,i){return(h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,i){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(n){var s=Object.getOwnPropertyDescriptor(n,t);return s.get?s.get.call(i):s.value}})(e,t,i||e)}function p(e){throw Error(e)}function f(e){if(T(e)){for(var t=arguments.length,i=new Array(1<t?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];return e.call.apply(e,[this].concat(i))}}function i(e){return y(e=y(t=e)||t<0?Math.ceil(e):Math.floor(e))?("-"+e).toString():e;var t}function m(e){return!w(e)&&!b(e)}function t(t){return function(e){return e.map(t).reduce(function(e,t){return e.concat(t)},[])}}function g(e){return t(function(e){return e})(e)}function v(e){return t(function(e){return Array.isArray(e)?v(e):e})(e)}function y(e){return 1/Math.round(e)==-1/0}function b(e){return null===e}function w(e){return void 0===e}function x(e){return"string"==typeof e}function C(e){return e instanceof Array}function S(e){var t=a(e);return null!=e&&!C(e)&&("object"==t||"function"==t)}function T(e){return e instanceof Function}function E(e){return!isNaN(e)}var k=function(){function t(e){o(this,t),this.setAttribute(Object.assign({events:{}},e))}return s(t,[{key:"emit",value:function(e){for(var t=this,i=arguments.length,n=new Array(1<i?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];return this.events[e]&&this.events[e].forEach(function(e){e.apply(t,n)}),this}},{key:"on",value:function(e,t){return this.events[e]||(this.events[e]=[]),this.events[e].push(t),this}},{key:"off",value:function(e,t){return this.events[e]&&t?this.events[e]=this.events[e].filter(function(e){return e!==t}):this.events[e]=[],this}},{key:"once",value:function(e,t){var i,n,s=this;return i=t,n=function(){return s.off(e,t)},t=function(){return n(i())},this.on(e,t,!0)}},{key:"getAttribute",value:function(e){return this.hasOwnProperty(e)?this[e]:null}},{key:"getAttributes",value:function(){var t=this,i={};return Object.getOwnPropertyNames(this).forEach(function(e){i[e]=t.getAttribute(e)}),i}},{key:"getPublicAttributes",value:function(){var i=this;return Object.keys(this.getAttributes()).filter(function(e){return!e.match(/^\$/)}).reduce(function(e,t){return e[t]=i.getAttribute(t),e},{})}},{key:"setAttribute",value:function(e,t){S(e)?this.setAttributes(e):this[e]=t}},{key:"setAttributes",value:function(e){for(var t in e)this.setAttribute(t,e[t])}},{key:"callback",value:function(e){return f.call(this,e)}},{key:"name",get:function(){return this.constructor.defineName instanceof Function||p("Every class must define its name."),this.constructor.defineName()}},{key:"events",get:function(){return this.$events||{}},set:function(e){this.$events=e}}],[{key:"make",value:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return u(this,t)}}]),t}();function A(e,i){return i=Object.assign({minimumDigits:0,prependLeadingZero:!0},i),function(e,t){var i=v(e).length;if(i<t)for(var n=0;n<t-i;n++)e[0].unshift("0");return e}(g([e]).map(function(e){return g(v([e]).map(function(e){return t=e,(i.prependLeadingZero&&1===t.toString().split("").length?"0":"").concat(t).split("");var t}))}),i.minimumDigits||0)}var M=[{min:48,max:57},{min:65,max:90},{min:97,max:122}];function P(e,t){switch(t){case"number":return parseFloat(e)}return e}function D(e,t){return String.fromCharCode(t(function(e){for(var t in M){var i=e.toString().charCodeAt(0);if(M[t].min<=i&&M[t].max>=i)return M[t]}return null}(e),e.charCodeAt(0)))}var O=function(){function n(e,t){var i;return o(this,n),(i=d(this,l(n).call(this,Object.assign({format:function(e){return e},prependLeadingZero:!0,minimumDigits:0},t)))).value||(i.value=e),i}function e(){return t.apply(this,arguments)}var t;return r(n,k),s(n,[{key:"isNaN",value:(t=function(){return isNaN(this.value)},e.toString=function(){return t.toString()},e)},{key:"isNumber",value:function(){return E()}},{key:"clone",value:function(e,t){return new this.constructor(e,Object.assign(this.getPublicAttributes(),t))}},{key:"digits",get:function(){return this.$digits},set:function(e){this.$digits=e,this.minimumDigits=Math.max(this.minimumDigits,v(e).length)}},{key:"value",get:function(){return this.$value},set:function(e){this.$value=e,this.digits=A(this.format(e),{minimumDigits:this.minimumDigits,prependLeadingZero:this.prependLeadingZero})}}],[{key:"defineName",value:function(){return"FaceValue"}}]),n}();function I(i){for(var n=!1,e=arguments.length,t=new Array(1<e?e-1:0),s=1;s<e;s++)t[s-1]=arguments[s];return g(t).forEach(function(e){var t;(b(i)&&b(e)||S(e)&&i instanceof e||T(e)&&!((t=e)instanceof Function&&t.name)&&!0===e(i)||x(e)&&a(i)===e)&&(n=!0)}),n}var L={className:"The className() is not defined.",items:"The items property must be an array.",theme:"The theme property must be an object.",language:"The language must be an object.",date:"The value must be an instance of a Date.",face:"The face must be an instance of a Face class.",element:"The element must be an instance of an HTMLElement",faceValue:"The face must be an instance of a FaceValue class.",timer:"The timer property must be an instance of a Timer class."},$=function(){function n(e,t){var i;return o(this,n),e instanceof O||!S(e)||(t=e,e=void 0),(i=d(this,l(n).call(this))).setAttributes(Object.assign({autoStart:!0,countdown:!1,animationRate:500},i.defaultAttributes(),t||{})),(b(e)||w(e))&&(e=i.defaultValue()),e&&(i.value=e),i}return r(n,k),s(n,[{key:"interval",value:function(e,t){return this.countdown?this.decrement(e):this.increment(e),f.call(this,t),this.shouldStop(e)&&e.stop(),this.emit("interval")}},{key:"shouldStop",value:function(e){return!w(this.stopAt)&&this.stopAt===e.value.value}},{key:"format",value:function(e,t){return t}},{key:"defaultValue",value:function(){}},{key:"defaultAttributes",value:function(){}},{key:"defaultDataType",value:function(){}},{key:"increment",value:function(){}},{key:"decrement",value:function(){}},{key:"started",value:function(){}},{key:"stopped",value:function(){}},{key:"reset",value:function(){}},{key:"initialized",value:function(){}},{key:"rendered",value:function(){}},{key:"mounted",value:function(e){this.autoStart&&e.timer.isStopped&&window.requestAnimationFrame(function(){return e.start(e)})}},{key:"createFaceValue",value:function(t,e){var i=this;return O.make(T(e)&&!e.name?e():e,{minimumDigits:this.minimumDigits,format:function(e){return i.format(t,e)}})}},{key:"dataType",get:function(){return this.defaultDataType()}},{key:"value",get:function(){return this.$value},set:function(e){e instanceof O||(e=this.createFaceValue(e)),this.$value=e}},{key:"stopAt",get:function(){return this.$stopAt},set:function(e){this.$stopAt=e}},{key:"originalValue",get:function(){return this.$originalValue},set:function(e){this.$originalValue=e}}]),n}(),e=Object.freeze({dictionary:{years:"Ø³ÙÙØ§Øª",months:"Ø´ÙÙØ±",days:"Ø£ÙØ§Ù",hours:"Ø³Ø§Ø¹Ø§Øª",minutes:"Ø¯ÙØ§Ø¦Ù",seconds:"Ø«ÙØ§ÙÙ"},aliases:["ar","ar-ar","arabic"]}),N=Object.freeze({dictionary:{years:"Anys",months:"Mesos",days:"Dies",hours:"Hores",minutes:"Minuts",seconds:"Segons"},aliases:["ca","ca-es","catalan"]}),z=Object.freeze({dictionary:{years:"Roky",months:"MÄsÃ­ce",days:"Dny",hours:"Hodiny",minutes:"Minuty",seconds:"Sekundy"},aliases:["cs","cs-cz","cz","cz-cs","czech"]}),j=Object.freeze({dictionary:{years:"Ãr",months:"MÃ¥neder",days:"Dage",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},aliases:["da","da-dk","danish"]}),F=Object.freeze({dictionary:{years:"Jahre",months:"Monate",days:"Tage",hours:"Stunden",minutes:"Minuten",seconds:"Sekunden"},aliases:["de","de-de","german"]}),R=Object.freeze({dictionary:{years:"Years",months:"Months",days:"Days",hours:"Hours",minutes:"Minutes",seconds:"Seconds"},aliases:["en","en-us","english"]}),B=Object.freeze({dictionary:{years:"AÃ±os",months:"Meses",days:"DÃ­as",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},aliases:["es","es-es","spanish"]}),H=Object.freeze({dictionary:{years:"Ø³Ø§Ù",months:"ÙØ§Ù",days:"Ø±ÙØ²",hours:"Ø³Ø§Ø¹Øª",minutes:"Ø¯ÙÛÙÙ",seconds:"Ø«Ø§ÙÛÙ"},aliases:["fa","fa-ir","persian"]}),q=Object.freeze({dictionary:{years:"Vuotta",months:"Kuukautta",days:"PÃ¤ivÃ¤Ã¤",hours:"Tuntia",minutes:"Minuuttia",seconds:"Sekuntia"},aliases:["fi","fi-fi","finnish"]}),_=Object.freeze({dictionary:{years:"Ans",months:"Mois",days:"Jours",hours:"Heures",minutes:"Minutes",seconds:"Secondes"},aliases:["fr","fr-ca","french"]}),X=Object.freeze({dictionary:{years:"×©× ××",months:"××××©",days:"××××",hours:"×©×¢××ª",minutes:"××§××ª",seconds:"×©× ×××ª"},aliases:["il","he-il","hebrew"]}),Y=Object.freeze({dictionary:{years:"Ãv",months:"HÃ³nap",days:"Nap",hours:"Ãra",minutes:"Perc",seconds:"MÃ¡sodperc"},aliases:["hu","hu-hu","hungarian"]}),W=Object.freeze({dictionary:{years:"Anni",months:"Mesi",days:"Giorni",hours:"Ore",minutes:"Minuti",seconds:"Secondi"},aliases:["da","da-dk","danish"]}),V=Object.freeze({dictionary:{years:"å¹´",months:"æ",days:"æ¥",hours:"æ",minutes:"å",seconds:"ç§"},aliases:["jp","ja-jp","japanese"]}),G=Object.freeze({dictionary:{years:"ë",months:"ì",days:"ì¼",hours:"ì",minutes:"ë¶",seconds:"ì´"},aliases:["ko","ko-kr","korean"]}),U=Object.freeze({dictionary:{years:"Gadi",months:"MÄneÅ¡i",days:"Dienas",hours:"Stundas",minutes:"MinÅ«tes",seconds:"Sekundes"},aliases:["lv","lv-lv","latvian"]}),K=Object.freeze({dictionary:{years:"Jaren",months:"Maanden",days:"Dagen",hours:"Uren",minutes:"Minuten",seconds:"Seconden"},aliases:["nl","nl-be","dutch"]}),Q=Object.freeze({dictionary:{years:"Ãr",months:"MÃ¥neder",days:"Dager",hours:"Timer",minutes:"Minutter",seconds:"Sekunder"},aliases:["no","nb","no-nb","norwegian"]}),Z=Object.freeze({dictionary:{years:"Lat",months:"MiesiÄcy",days:"Dni",hours:"Godziny",minutes:"Minuty",seconds:"Sekundy"},aliases:["pl","pl-pl","polish"]}),J=Object.freeze({dictionary:{years:"Anos",months:"Meses",days:"Dias",hours:"Horas",minutes:"Minutos",seconds:"Segundos"},aliases:["pt","pt-br","portuguese"]}),ee=Object.freeze({dictionary:{years:"Ani",months:"Luni",days:"Zile",hours:"Ore",minutes:"Minute",seconds:"sSecunde"},aliases:["ro","ro-ro","romana"]}),te=Object.freeze({dictionary:{years:"Ð»ÐµÑ",months:"Ð¼ÐµÑÑÑÐµÐ²",days:"Ð´Ð½ÐµÐ¹",hours:"ÑÐ°ÑÐ¾Ð²",minutes:"Ð¼Ð¸Ð½ÑÑ",seconds:"ÑÐµÐºÑÐ½Ð´"},aliases:["ru","ru-ru","russian"]}),ie=Object.freeze({dictionary:{years:"Roky",months:"Mesiace",days:"Dni",hours:"Hodiny",minutes:"MinÃºty",seconds:"Sekundy"},aliases:["sk","sk-sk","slovak"]}),ne=Object.freeze({dictionary:{years:"Ãr",months:"MÃ¥nader",days:"Dagar",hours:"Timmar",minutes:"Minuter",seconds:"Sekunder"},aliases:["sv","sv-se","swedish"]}),se=Object.freeze({dictionary:{years:"à¸à¸µ",months:"à¹à¸à¸·à¸­à¸",days:"à¸§à¸±à¸",hours:"à¸à¸±à¹à¸§à¹à¸¡à¸",minutes:"à¸à¸²à¸à¸µ",seconds:"à¸§à¸´à¸à¸²à¸à¸µ"},aliases:["th","th-th","thai"]}),ae=Object.freeze({dictionary:{years:"YÄ±l",months:"Ay",days:"GÃ¼n",hours:"Saat",minutes:"Dakika",seconds:"Saniye"},aliases:["tr","tr-tr","turkish"]}),oe=Object.freeze({dictionary:{years:"ÑÐ¾ÐºÐ¸",months:"Ð¼ÑÑÑÑÑ",days:"Ð´Ð½Ñ",hours:"Ð³Ð¾Ð´Ð¸Ð½Ð¸",minutes:"ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",seconds:"ÑÐµÐºÑÐ½Ð´Ð¸"},aliases:["ua","ua-ua","ukraine"]}),re=Object.freeze({dictionary:{years:"NÄm",months:"ThÃ¡ng",days:"NgÃ y",hours:"Giá»",minutes:"PhÃºt",seconds:"GiÃ¢y"},aliases:["vn","vn-vn","vietnamese"]}),le=Object.freeze({dictionary:{years:"å¹´",months:"æ",days:"æ¥",hours:"æ¶",minutes:"å",seconds:"ç§"},aliases:["zh","zh-cn","chinese"]}),ce=Object.freeze({dictionary:{years:"å¹´",months:"æ",days:"æ¥",hours:"æ",minutes:"å",seconds:"ç§"},aliases:["zh-tw"]}),ue=Object.freeze({Arabic:e,Catalan:N,Czech:z,Danish:j,German:F,English:R,Spanish:B,Persian:H,Finnish:q,French:_,Hebrew:X,Hungarian:Y,Italian:W,Japanese:V,Korean:G,Latvian:U,Dutch:K,Norwegian:Q,Polish:Z,Portuguese:J,Romanian:ee,Russian:te,Slovak:ie,Swedish:ne,Thai:se,Turkish:ae,Ukrainian:oe,Vietnamese:re,Chinese:le,TraditionalChinese:ce});function de(t){return t?ue[t.toLowerCase()]||Object.values(ue).find(function(e){return-1!==e.aliases.indexOf(t)}):null}function he(t,e){return C(e)&&e.filter(m).forEach(function(e){e instanceof HTMLElement&&t.appendChild(e)}),t}function pe(e,t,i){return e instanceof HTMLElement||(e=document.createElement(e)),function(e,t){if(S(t))for(var i in t)e.setAttribute(i,t[i])}(e,S(t)?t:i),S(t)||C(t)?he(e,t):e.innerHTML=t,e}var fe=function(){function i(e){var t;if(o(this,i),(t=d(this,l(i).call(this,Object.assign({parent:null},e)))).theme||p("".concat(t.name," does not have a theme defined.")),t.language||p("".concat(t.name," does not have a language defined.")),!t.theme[t.name])throw new Error("".concat(t.name," cannot be rendered because it has no template."));return t}return r(i,k),s(i,[{key:"translate",value:function(e){return t=e,i=this.language,((n=x(i)?de(i):i).dictionary||n)[t]||t;var t,i,n}},{key:"t",value:function(e){return this.translate(e)}},{key:"render",value:function(){var e,t,i=pe("div",{class:"flip-clock"===this.className?this.className:"flip-clock-"+this.className});return this.theme[this.name](i,this),this.el?this.el.innerHTML!==i.innerHTML&&(this.el=(e=i,(t=this.el).parentNode?(t.parentNode.replaceChild(e,t),e):t)):this.el=i,this.el}},{key:"mount",value:function(e,t){var i=1<arguments.length&&void 0!==t&&t;return this.render(),this.parent=e,i?this.parent.insertBefore(this.el,i):this.parent.appendChild(this.el),this.el}},{key:"className",get:function(){return this.constructor.defineName().replace(/([a-z])([A-Z])/g,"$1-$2").replace(/\s+/g,"-").toLowerCase()}},{key:"el",get:function(){return this.$el},set:function(e){I(e,null,HTMLElement)||p(L.element),this.$el=e}},{key:"parent",get:function(){return this.$parent},set:function(e){this.$parent=e}},{key:"theme",get:function(){return this.$theme},set:function(e){I(e,"object")||p(L.value),this.$theme=e}},{key:"language",get:function(){return this.$language},set:function(e){x(e)&&(e=de(e)),I(e,"object")||p(L.language),this.$language=e}}]),i}(),me=function(){function e(){return o(this,e),d(this,l(e).apply(this,arguments))}return r(e,fe),s(e,null,[{key:"defineName",value:function(){return"Divider"}}]),e}(),ge=function(){function i(e,t){return o(this,i),d(this,l(i).call(this,Object.assign({value:e},S(e)?e:null,t)))}return r(i,fe),s(i,null,[{key:"defineName",value:function(){return"ListItem"}}]),i}(),ve=function(){function i(e,t){return o(this,i),d(this,l(i).call(this,Object.assign({value:e,items:[]},S(e)?e:null,t)))}return r(i,fe),s(i,[{key:"createListItem",value:function(e,t){var i=new ge(e,Object.assign({theme:this.theme,language:this.language},t));return this.$items.push(i),i}},{key:"value",get:function(){return this.$value},set:function(e){this.$value=e}},{key:"items",get:function(){return this.$items},set:function(e){this.$items=e}}],[{key:"defineName",value:function(){return"List"}}]),i}(),ye=function(){function i(e,t){return o(this,i),d(this,l(i).call(this,Object.assign({items:C(e)?e:[]},S(e)?e:null,t)))}return r(i,fe),s(i,null,[{key:"defineName",value:function(){return"Group"}}]),i}(),be=function(){function i(e,t){return o(this,i),d(this,l(i).call(this,Object.assign({label:e},S(e)?e:null,t)))}return r(i,fe),s(i,null,[{key:"defineName",value:function(){return"Label"}}]),i}(),we=function(){function t(e){return o(this,t),d(this,l(t).call(this,Object.assign({count:0,handle:null,started:null,running:!1,interval:E(e)?e:null},S(e)?e:null)))}return r(t,k),s(t,[{key:"reset",value:function(e){var t=this;return this.stop(function(){t.count=0,t.start(function(){return f.call(t,e)}),t.emit("reset")}),this}},{key:"start",value:function(t){var i=this;this.started=new Date,this.lastLoop=Date.now(),this.running=!0,this.emit("start");return function e(){return Date.now()-i.lastLoop>=i.interval&&(f.call(i,t),i.lastLoop=Date.now(),i.emit("interval"),i.count++),i.handle=window.requestAnimationFrame(e),i}()}},{key:"stop",value:function(e){var t=this;return this.isRunning&&setTimeout(function(){window.cancelAnimationFrame(t.handle),t.running=!1,f.call(t,e),t.emit("stop")}),this}},{key:"elapsed",get:function(){return this.lastLoop?this.lastLoop-(this.started?this.started.getTime():(new Date).getTime()):0}},{key:"isRunning",get:function(){return!0===this.running}},{key:"isStopped",get:function(){return!1===this.running}}],[{key:"defineName",value:function(){return"Timer"}}]),t}(),xe=function(){function e(){return o(this,e),d(this,l(e).apply(this,arguments))}return r(e,$),s(e,[{key:"increment",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:1;e.value=this.value.value+i}},{key:"decrement",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:1;e.value=this.value.value-i}}],[{key:"defineName",value:function(){return"Counter"}}]),e}(),Ce=function(){function e(){return o(this,e),d(this,l(e).apply(this,arguments))}return r(e,$),s(e,[{key:"defaultDataType",value:function(){return Date}},{key:"defaultAttributes",value:function(){return{showSeconds:!0,showLabels:!0}}},{key:"shouldStop",value:function(e){if(b(e.stopAt)||w(e.stopAt))return!1;if(this.stopAt instanceof Date)return this.countdown?this.stopAt.getTime()>=this.value.value.getTime():this.stopAt.getTime()<=this.value.value.getTime();if(E(this.stopAt)){var t=Math.floor((this.value.value.getTime()-this.originalValue.getTime())/1e3);return this.countdown?this.stopAt>=t:this.stopAt<=t}throw new Error("the stopAt property must be an instance of Date or Number.")}},{key:"increment",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()+i+((new Date).getTime()-e.timer.lastLoop))}},{key:"decrement",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()-i-((new Date).getTime()-e.timer.lastLoop))}},{key:"format",value:function(e,t){var i=e.timer.isRunning?e.timer.started:new Date(Date.now()-50);return[[this.getMinutes(t,i)],this.showSeconds?[this.getSeconds(t,i)]:null].filter(m)}},{key:"getMinutes",value:function(e,t){return i(this.getTotalSeconds(e,t)/60)}},{key:"getSeconds",value:function(e,t){var i=this.getTotalSeconds(e,t);return Math.abs(Math.ceil(60===i?0:i%60))}},{key:"getTotalSeconds",value:function(e,t){return e.getTime()===t.getTime()?0:Math.round((e.getTime()-t.getTime())/1e3)}}],[{key:"defineName",value:function(){return"MinuteCounter"}}]),e}(),Se=function(){function i(){return o(this,i),d(this,l(i).apply(this,arguments))}return r(i,Ce),s(i,[{key:"format",value:function(e,t){var i=e.timer.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,o=[[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&o.push([this.getSeconds(s,a)]),o}},{key:"getMinutes",value:function(e,t){return Math.abs(h(l(i.prototype),"getMinutes",this).call(this,e,t)%60)}},{key:"getHours",value:function(e,t){return Math.floor(this.getTotalSeconds(e,t)/60/60)}}],[{key:"defineName",value:function(){return"HourCounter"}}]),i}(),Te=function(){function i(){return o(this,i),d(this,l(i).apply(this,arguments))}return r(i,Se),s(i,[{key:"format",value:function(e,t){var i=e.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,o=[[this.getDays(s,a)],[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&o.push([this.getSeconds(s,a)]),o}},{key:"getDays",value:function(e,t){return Math.floor(this.getTotalSeconds(e,t)/60/60/24)}},{key:"getHours",value:function(e,t){return Math.abs(h(l(i.prototype),"getHours",this).call(this,e,t)%24)}}],[{key:"defineName",value:function(){return"DayCounter"}}]),i}(),Ee=function(){function e(){return o(this,e),d(this,l(e).apply(this,arguments))}return r(e,$),s(e,[{key:"defaultDataType",value:function(){return Date}},{key:"defaultValue",value:function(){return new Date}},{key:"defaultAttributes",value:function(){return{showSeconds:!0,showLabels:!1}}},{key:"format",value:function(e,t){var i=[[(t=t||new Date).getHours()],[t.getMinutes()]];return this.showSeconds&&i.push([t.getSeconds()]),i}},{key:"increment",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()+i+((new Date).getTime()-e.timer.lastLoop))}},{key:"decrement",value:function(e,t){var i=1<arguments.length&&void 0!==t?t:0;e.value=new Date(this.value.value.getTime()-i-((new Date).getTime()-e.timer.lastLoop))}}],[{key:"defineName",value:function(){return"TwentyFourHourClock"}}]),e}(),ke=function(){function e(){return o(this,e),d(this,l(e).apply(this,arguments))}return r(e,Ee),s(e,[{key:"defaultAttributes",value:function(){return{showLabels:!1,showSeconds:!0,showMeridium:!0}}},{key:"format",value:function(e,t){var i=(t=t||new Date).getHours(),n=[12<i?i-12:0===i?12:i,t.getMinutes()];return this.meridium=12<i?"pm":"am",this.showSeconds&&n.push(t.getSeconds()),n}}],[{key:"defineName",value:function(){return"TwelveHourClock"}}]),e}(),Ae=function(){function i(){return o(this,i),d(this,l(i).apply(this,arguments))}return r(i,Te),s(i,[{key:"format",value:function(e,t){var i=e.timer.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,o=[[this.getWeeks(s,a)],[this.getDays(s,a)],[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&o.push([this.getSeconds(s,a)]),o}},{key:"getWeeks",value:function(e,t){return Math.floor(this.getTotalSeconds(e,t)/60/60/24/7)}},{key:"getDays",value:function(e,t){return Math.abs(h(l(i.prototype),"getDays",this).call(this,e,t)%7)}}],[{key:"defineName",value:function(){return"WeekCounter"}}]),i}(),Me=function(){function i(){return o(this,i),d(this,l(i).apply(this,arguments))}return r(i,Ae),s(i,[{key:"format",value:function(e,t){var i=e.timer.started?t:new Date,n=e.originalValue||t,s=this.countdown?n:i,a=this.countdown?i:n,o=[[this.getYears(s,a)],[this.getWeeks(s,a)],[this.getDays(s,a)],[this.getHours(s,a)],[this.getMinutes(s,a)]];return this.showSeconds&&o.push([this.getSeconds(s,a)]),o}},{key:"getYears",value:function(e,t){return Math.floor(Math.max(0,this.getTotalSeconds(e,t)/60/60/24/7/52))}},{key:"getWeeks",value:function(e,t){return Math.abs(h(l(i.prototype),"getWeeks",this).call(this,e,t)%52)}}],[{key:"defineName",value:function(){return"YearCounter"}}]),i}(),Pe=Object.freeze({Counter:xe,DayCounter:Te,MinuteCounter:Ce,HourCounter:Se,TwelveHourClock:ke,TwentyFourHourClock:Ee,WeekCounter:Ae,YearCounter:Me});function De(e,t){return e?e.childNodes?e.childNodes[t]:e[t]:null}function Oe(e,t){t.createDivider().mount(e,e.childNodes[1]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[3]),t.face.showLabels&&(t.createLabel("hours").mount(e.childNodes[0]),t.createLabel("minutes").mount(e.childNodes[2]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[4]))}var Ie={face:xe,theme:{Divider:function(e,t){he(e,[pe("div",{class:"flip-clock-dot top"}),pe("div",{class:"flip-clock-dot bottom"})])},FlipClock:function(e,o){he(e,o.value.digits.map(function(e,t){var a=De(o.el?o.el.querySelectorAll(".flip-clock-group"):null,t),i=e.map(function(e,t){var i,n=De(a?a.querySelectorAll(".flip-clock-list"):null,t),s=(i=n)?i.querySelector(".flip-clock-list-item:first-child .top").innerHTML:null;return o.createList(e,{domValue:s,countdown:o.countdown,animationRate:o.face.animationRate||o.face.delay})});return o.createGroup(i)}).map(function(e){return e.render()}))},Group:function(e,t){he(e,t.items.map(function(e){return e.render()}))},Label:function(e,t){e.innerHTML=t.t(t.label)},List:function(e,t){var i,n,s=t.domValue||(t.countdown?P((i=t.value).toString().split("").map(function(e){return D(e,function(e,t){return!e||t<e.max?t+1:e.min})}).join(""),a(i)):P((n=t.value).toString().split("").map(function(e){return D(e,function(e,t){return!e||t>e.min?t-1:e.max})}).join(""),a(n)));t.domValue&&t.domValue!==t.value&&e.classList.add("flip"),e.style.animationDelay="".concat(t.animationRate/2,"ms"),e.style.animationDuration="".concat(t.animationRate/2,"ms"),t.items=[t.createListItem(t.value,{active:!0}),t.createListItem(s,{active:!1})],he(e,t.items.map(function(e){return e.render()}))},ListItem:function(e,t){var i=!0===t.active?"active":!1===t.active?"before":null;e.classList.add(i),he(e,[pe("div",[pe("div",t.value,{class:"top"}),pe("div",t.value,{class:"bottom"})],{class:"flip-clock-list-item-inner"})])},faces:Object.freeze({DayCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.createDivider().mount(e,e.childNodes[3]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[5]),t.face.showLabels&&(t.createLabel("days").mount(e.childNodes[0]),t.createLabel("hours").mount(e.childNodes[2]),t.createLabel("minutes").mount(e.childNodes[4]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[6]))},HourCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[3]),t.face.showLabels&&(t.createLabel("hours").mount(e.childNodes[0]),t.createLabel("minutes").mount(e.childNodes[2]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[4]))},MinuteCounter:function(e,t){t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[1]),t.face.showLabels&&(t.createLabel("minutes").mount(e.childNodes[0]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[2]))},TwelveHourClock:function(e,t){var i,n;Oe(e,t),t.face.showMeridium&&t.face.meridium&&(i=t.createLabel(t.face.meridium),n=e.childNodes[e.childNodes.length-1],i.mount(n).classList.add("flip-clock-meridium"))},TwentyFourHourClock:Oe,WeekCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.createDivider().mount(e,e.childNodes[3]),t.createDivider().mount(e,e.childNodes[5]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[7]),t.face.showLabels&&(t.createLabel("weeks").mount(e.childNodes[0]),t.createLabel("days").mount(e.childNodes[2]),t.createLabel("hours").mount(e.childNodes[4]),t.createLabel("minutes").mount(e.childNodes[6]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[8]))},YearCounter:function(e,t){t.createDivider().mount(e,e.childNodes[1]),t.createDivider().mount(e,e.childNodes[3]),t.createDivider().mount(e,e.childNodes[5]),t.createDivider().mount(e,e.childNodes[7]),t.face.showSeconds&&t.createDivider().mount(e,e.childNodes[9]),t.face.showLabels&&(t.createLabel("years").mount(e.childNodes[0]),t.createLabel("weeks").mount(e.childNodes[2]),t.createLabel("days").mount(e.childNodes[4]),t.createLabel("hours").mount(e.childNodes[6]),t.createLabel("minutes").mount(e.childNodes[8]),t.face.showSeconds&&t.createLabel("seconds").mount(e.childNodes[10]))}})},language:R};return function(){function a(e,t,i){var n;o(this,a),I(e,HTMLElement)||p(L.element),S(t)&&!i&&(i=t,t=void 0);var s=i.face||Ie.face;return delete i.face,(n=d(this,l(a).call(this,Object.assign({originalValue:t,theme:Ie.theme,language:Ie.language,timer:we.make(i.interval||1e3)},i)))).face||(n.face=s),n.mount(e),n}return r(a,fe),s(a,[{key:"mount",value:function(e){return h(l(a.prototype),"mount",this).call(this,e),this.face.mounted(this),this}},{key:"render",value:function(){return h(l(a.prototype),"render",this).call(this),this.theme.faces[this.face.name]&&this.theme.faces[this.face.name](this.el,this),this.face.rendered(this),this.el}},{key:"start",value:function(e){var t=this;return this.timer.started||(this.value=this.originalValue),w(this.face.stopAt)&&(this.face.stopAt=this.stopAt),w(this.face.originalValue)&&(this.face.originalValue=this.originalValue),this.timer.start(function(){t.face.interval(t,e)}),this.face.started(this),this.emit("start")}},{key:"stop",value:function(e){return this.timer.stop(e),this.face.stopped(this),this.emit("stop")}},{key:"reset",value:function(e){var t=this;return this.value=this.originalValue,this.timer.reset(function(){return t.interval(t,e)}),this.face.reset(this),this.emit("reset")}},{key:"increment",value:function(e){return this.face.increment(this,e),this}},{key:"decrement",value:function(e){return this.face.decrement(this,e),this}},{key:"createDivider",value:function(e){return me.make(Object.assign({theme:this.theme,language:this.language},e))}},{key:"createList",value:function(e,t){return ve.make(e,Object.assign({theme:this.theme,language:this.language},t))}},{key:"createLabel",value:function(e,t){return be.make(e,Object.assign({theme:this.theme,language:this.language},t))}},{key:"createGroup",value:function(e,t){return ye.make(e,Object.assign({theme:this.theme,language:this.language},t))}},{key:"face",get:function(){return this.$face},set:function(e){I(e,[$,"string","function"])||p(L.face),this.$face=(Pe[e]||e).make(Object.assign(this.getPublicAttributes(),{originalValue:this.face?this.face.originalValue:void 0})),this.$face.initialized(this),this.value?this.$face.value=this.face.createFaceValue(this,this.value.value):this.value||(this.value=this.originalValue),this.el&&this.render()}},{key:"stopAt",get:function(){return T(this.$stopAt)?this.$stopAt(this):this.$stopAt},set:function(e){this.$stopAt=e}},{key:"timer",get:function(){return this.$timer},set:function(e){I(e,we)||p(L.timer),this.$timer=e}},{key:"value",get:function(){return this.face?this.face.value:null},set:function(e){if(!this.face)throw new Error("A face must be set before setting a value.");e instanceof O?this.face.value=e:this.value?this.face.value=this.face.value.clone(e):this.face.value=this.face.createFaceValue(this,e),this.el&&this.render()}},{key:"originalValue",get:function(){return T(this.$originalValue)&&!this.$originalValue.name?this.$originalValue():w(this.$originalValue)||b(this.$originalValue)?this.face?this.face.defaultValue():void 0:this.$originalValue},set:function(e){this.$originalValue=e}}],[{key:"defineName",value:function(){return"FlipClock"}},{key:"setDefaultFace",value:function(e){I(e,$)||p(L.face),Ie.face=e}},{key:"setDefaultTheme",value:function(e){I(e,"object")||p(L.theme),Ie.theme=e}},{key:"setDefaultLanguage",value:function(e){I(e,"object")||p(L.language),Ie.language=e}},{key:"defaults",get:function(){return Ie}}]),a}()}),function(l,d,m,g){"use strict";var e,s,o,a,h,t,c,p,u,n,i,r,f,v;function y(e,t){var i,n,s,a=[],o=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=u(e.data.options,t)),i=t.$target||m(e.currentTarget).trigger("blur"),(s=m.fancybox.getInstance())&&s.$trigger&&s.$trigger.is(i)||(a=t.selector?m(t.selector):(n=i.attr("data-fancybox")||"")?(a=e.data?e.data.items:[]).length?a.filter('[data-fancybox="'+n+'"]'):m('[data-fancybox="'+n+'"]'):[i],(o=m(a).index(i))<0&&(o=0),(s=m.fancybox.open(a,t,o)).$trigger=i))}l.console=l.console||{info:function(e){}},m&&(m.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:m.noop,beforeLoad:m.noop,afterLoad:m.noop,beforeShow:m.noop,afterShow:m.noop,beforeClose:m.noop,afterClose:m.noop,onActivate:m.noop,onDeactivate:m.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=m(l),o=m(d),a=0,h=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},c=function(){var e,t=d.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(t.style[e]!==g)return i[e];return"transitionend"}(),p=function(e){return e&&e.length&&e[0].offsetHeight},u=function(e,t){var i=m.extend(!0,{},e,t);return m.each(t,function(e,t){m.isArray(t)&&(i[e]=t)}),i},n=function(e,t,i){var n=this;n.opts=u({index:i},m.fancybox.defaults),m.isPlainObject(t)&&(n.opts=u(n.opts,t)),m.fancybox.isMobile&&(n.opts=u(n.opts,n.opts.mobile)),n.id=n.opts.id||++a,n.currIndex=parseInt(n.opts.index,10)||0,n.prevIndex=null,n.prevPos=null,n.currPos=0,n.firstRun=!0,n.group=[],n.slides={},n.addContent(e),n.group.length&&n.init()},m.extend(n.prototype,{init:function(){var t,i,n=this,s=n.group[n.currIndex].opts;s.closeExisting&&m.fancybox.close(!0),m("body").addClass("fancybox-active"),!m.fancybox.getInstance()&&!1!==s.hideScrollbar&&!m.fancybox.isMobile&&d.body.scrollHeight>l.innerHeight&&(m("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-d.documentElement.clientWidth)+"px;}</style>"),m("body").addClass("compensate-for-scrollbar")),i="",m.each(s.buttons,function(e,t){i+=s.btnTpl[t]||""}),t=m(n.translate(n,s.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",s.btnTpl.arrowLeft+s.btnTpl.arrowRight))).attr("id","fancybox-container-"+n.id).addClass(s.baseClass).data("FancyBox",n).appendTo(s.parentEl),n.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){n.$refs[e]=t.find(".fancybox-"+e)}),n.trigger("onInit"),n.activate(),n.jumpTo(n.currIndex)},translate:function(e,t){var i=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return i[t]===g?e:i[t]})},addContent:function(e){var t,c=this,i=m.makeArray(e);m.each(i,function(e,t){var i,n,s,a,o,r={},l={};m.isPlainObject(t)?l=(r=t).opts||t:"object"===m.type(t)&&m(t).length?(l=(i=m(t)).data()||{},(l=m.extend(!0,{},l,l.options)).$orig=i,r.src=c.opts.src||l.src||i.attr("href"),r.type||r.src||(r.type="inline",r.src=t)):r={type:"html",src:t+""},r.opts=m.extend(!0,{},c.opts,l),m.isArray(l.buttons)&&(r.opts.buttons=l.buttons),m.fancybox.isMobile&&r.opts.mobile&&(r.opts=u(r.opts,r.opts.mobile)),n=r.type||r.opts.type,a=r.src||"",!n&&a&&((s=a.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",r.opts.video.format||(r.opts.video.format="video/"+("ogv"===s[1]?"ogg":s[1]))):a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":a.match(/\.(pdf)((\?|#).*)?$/i)?(n="iframe",r=m.extend(!0,r,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===a.charAt(0)&&(n="inline")),n?r.type=n:c.trigger("objectNeedsType",r),r.contentType||(r.contentType=-1<m.inArray(r.type,["html","inline","ajax"])?"html":r.type),r.index=c.group.length,"auto"==r.opts.smallBtn&&(r.opts.smallBtn=-1<m.inArray(r.type,["html","inline","ajax"])),"auto"===r.opts.toolbar&&(r.opts.toolbar=!r.opts.smallBtn),r.$thumb=r.opts.$thumb||null,r.opts.$trigger&&r.index===c.opts.index&&(r.$thumb=r.opts.$trigger.find("img:first"),r.$thumb.length&&(r.opts.$orig=r.opts.$trigger)),r.$thumb&&r.$thumb.length||!r.opts.$orig||(r.$thumb=r.opts.$orig.find("img:first")),r.$thumb&&!r.$thumb.length&&(r.$thumb=null),r.thumb=r.opts.thumb||(r.$thumb?r.$thumb[0].src:null),"function"===m.type(r.opts.caption)&&(r.opts.caption=r.opts.caption.apply(t,[c,r])),"function"===m.type(c.opts.caption)&&(r.opts.caption=c.opts.caption.apply(t,[c,r])),r.opts.caption instanceof m||(r.opts.caption=r.opts.caption===g?"":r.opts.caption+""),"ajax"===r.type&&1<(o=a.split(/\s+/,2)).length&&(r.src=o.shift(),r.opts.filter=o.shift()),r.opts.modal&&(r.opts=m.extend(!0,r.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(r)}),Object.keys(c.slides).length&&(c.updateControls(),(t=c.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var n=this;n.removeEvents(),n.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),n.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),n.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),n.next()}).on("click.fb","[data-fancybox-zoom]",function(e){n[n.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(n.requestId&&t(n.requestId),n.requestId=h(function(){n.update(e)})):(n.current&&"iframe"===n.current.type&&n.$refs.stage.hide(),setTimeout(function(){n.$refs.stage.show(),n.update(e)},m.fancybox.isMobile?600:250))}),o.on("keydown.fb",function(e){var t=(m.fancybox?m.fancybox.getInstance():null).current,i=e.keyCode||e.which;if(9!=i){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||m(e.target).is("input,textarea,video,audio,select")))return 8===i||27===i?(e.preventDefault(),void n.close(e)):37===i||38===i?(e.preventDefault(),void n.previous()):39===i||40===i?(e.preventDefault(),void n.next()):void n.trigger("afterKeydown",e,i)}else t.opts.trapFocus&&n.focus(e)}),n.group[n.currIndex].opts.idleTime&&(n.idleSecondsCounter=0,o.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){n.idleSecondsCounter=0,n.isIdle&&n.showControls(),n.isIdle=!1}),n.idleInterval=l.setInterval(function(){n.idleSecondsCounter++,n.idleSecondsCounter>=n.group[n.currIndex].opts.idleTime&&!n.isDragging&&(n.isIdle=!0,n.idleSecondsCounter=0,n.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),o.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,n){var t,i,s,a,o,r,l,c,u,d=this,h=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(s=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||h<=e))return!1;if(t=d.firstRun=!Object.keys(d.slides).length,o=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,a=d.createSlide(e),1<h&&((s||a.index<h-1)&&d.createSlide(e+1),(s||0<a.index)&&d.createSlide(e-1)),d.current=a,d.currIndex=a.index,d.currPos=a.pos,d.trigger("beforeShow",t),d.updateControls(),a.forcedDuration=g,m.isNumeric(n)?a.forcedDuration=n:n=a.opts[t?"animationDuration":"transitionDuration"],n=parseInt(n,10),i=d.isMoved(a),a.$slide.addClass("fancybox-slide--current"),t)return a.opts.animationEffect&&n&&d.$refs.container.css("transition-duration",n+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(a),void d.preload("image");r=m.fancybox.getTranslate(o.$slide),l=m.fancybox.getTranslate(d.$refs.stage),m.each(d.slides,function(e,t){m.fancybox.stop(t.$slide,!0)}),o.pos!==a.pos&&(o.isComplete=!1),o.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(u=r.left-(o.pos*r.width+o.pos*o.opts.gutter),m.each(d.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=t.pos*r.width+t.pos*t.opts.gutter;m.fancybox.setTranslate(t.$slide,{top:0,left:i-l.left+u}),t.pos!==a.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>a.pos?"next":"previous")),p(t.$slide),m.fancybox.animate(t.$slide,{top:0,left:(t.pos-a.pos)*r.width+(t.pos-a.pos)*t.opts.gutter},n,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===d.currPos&&d.complete()})})):n&&a.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+a.opts.transitionEffect,o.$slide.addClass("fancybox-slide--"+(o.pos>a.pos?"next":"previous")),m.fancybox.animate(o.$slide,c,n,function(){o.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),a.isLoaded?d.revealContent(a):d.loadSlide(a),d.preload("image")}},createSlide:function(e){var t,i=this,n=e%i.group.length;return n=n<0?i.group.length+n:n,!i.slides[e]&&i.group[n]&&(t=m('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[e]=m.extend(!0,{},i.group[n],{pos:e,$slide:t,isLoaded:!1}),i.updateSlide(i.slides[e])),i.slides[e]},scaleToActual:function(e,t,i){var n,s,a,o,r,l=this,c=l.current,u=c.$content,d=m.fancybox.getTranslate(c.$slide).width,h=m.fancybox.getTranslate(c.$slide).height,p=c.width,f=c.height;l.isAnimating||l.isMoved()||!u||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,m.fancybox.stop(u),e=e===g?.5*d:e,t=t===g?.5*h:t,(n=m.fancybox.getTranslate(u)).top-=m.fancybox.getTranslate(c.$slide).top,n.left-=m.fancybox.getTranslate(c.$slide).left,o=p/n.width,r=f/n.height,s=.5*d-.5*p,a=.5*h-.5*f,d<p&&(0<(s=n.left*o-(e*o-e))&&(s=0),s<d-p&&(s=d-p)),h<f&&(0<(a=n.top*r-(t*r-t))&&(a=0),a<h-f&&(a=h-f)),l.updateCursor(p,f),m.fancybox.animate(u,{top:a,left:s,scaleX:o,scaleY:r},i||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,i=this,n=i.current,s=n.$content;i.isAnimating||i.isMoved()||!s||"image"!=n.type||!n.isLoaded||n.hasError||(i.isAnimating=!0,m.fancybox.stop(s),t=i.getFitPos(n),i.updateCursor(t.width,t.height),m.fancybox.animate(s,{top:t.top,left:t.left,scaleX:t.width/s.width(),scaleY:t.height/s.height()},e||366,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,n,s,a=e.$content,o=e.$slide,r=e.width||e.opts.width,l=e.height||e.opts.height,c={};return!!(e.isLoaded&&a&&a.length)&&(t=m.fancybox.getTranslate(this.$refs.stage).width,i=m.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(o.css("paddingLeft"))+parseFloat(o.css("paddingRight"))+parseFloat(a.css("marginLeft"))+parseFloat(a.css("marginRight")),i-=parseFloat(o.css("paddingTop"))+parseFloat(o.css("paddingBottom"))+parseFloat(a.css("marginTop"))+parseFloat(a.css("marginBottom")),r&&l||(r=t,l=i),t-.5<(r*=n=Math.min(1,t/r,i/l))&&(r=t),i-.5<(l*=n)&&(l=i),"image"===e.type?(c.top=Math.floor(.5*(i-l))+parseFloat(o.css("paddingTop")),c.left=Math.floor(.5*(t-r))+parseFloat(o.css("paddingLeft"))):"video"===e.contentType&&(r/(s=e.opts.width&&e.opts.height?r/l:e.opts.ratio||16/9)<l?l=r/s:l*s<r&&(r=l*s)),c.width=r,c.height=l,c)},update:function(i){var n=this;m.each(n.slides,function(e,t){n.updateSlide(t,i)})},updateSlide:function(e,t){var i=this,n=e&&e.$content,s=e.width||e.opts.width,a=e.height||e.opts.height,o=e.$slide;i.adjustCaption(e),n&&(s||a||"video"===e.contentType)&&!e.hasError&&(m.fancybox.stop(n),m.fancybox.setTranslate(n,i.getFitPos(e)),e.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(e),o.length&&(o.trigger("refresh"),e.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",o.get(0).scrollHeight>o.get(0).clientHeight)),i.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,i=t.current,n=i.$slide;!t.isClosing&&i&&(n.siblings().css({transform:"",opacity:""}),n.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),m.fancybox.animate(n,{top:0,left:0,opacity:1},e===g?0:e,function(){n.css({transform:"",opacity:""}),i.isComplete||t.complete()},!1))},isMoved:function(e){var t,i,n=e||this.current;return!!n&&(i=m.fancybox.getTranslate(this.$refs.stage),t=m.fancybox.getTranslate(n.$slide),!n.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-i.top)||.5<Math.abs(t.left-i.left)))},updateCursor:function(e,t){var i,n,s=this,a=s.current,o=s.$refs.container;a&&!s.isClosing&&s.Guestures&&(o.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),n=!!(i=s.canPan(e,t))||s.isZoomable(),o.toggleClass("fancybox-is-zoomable",n),m("[data-fancybox-zoom]").prop("disabled",!n),i?o.addClass("fancybox-can-pan"):n&&("zoom"===a.opts.clickContent||m.isFunction(a.opts.clickContent)&&"zoom"==a.opts.clickContent(a))?o.addClass("fancybox-can-zoomIn"):a.opts.touch&&(a.opts.touch.vertical||1<s.group.length)&&"video"!==a.contentType&&o.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var i=!1,n=this.current,s=n.$content;return e!==g&&t!==g?i=e<n.width&&t<n.height:s&&(i=(i=m.fancybox.getTranslate(s)).width<n.width&&i.height<n.height),i},canPan:function(e,t){var i=this.current,n=null,s=!1;return"image"===i.type&&(i.isComplete||e&&t)&&!i.hasError&&(s=this.getFitPos(i),e!==g&&t!==g?n={width:e,height:t}:i.isComplete&&(n=m.fancybox.getTranslate(i.$content)),n&&s&&(s=1.5<Math.abs(n.width-s.width)||1.5<Math.abs(n.height-s.height))),s},loadSlide:function(i){var e,t,n,s=this;if(!i.isLoading&&!i.isLoaded){if(!(i.isLoading=!0)===s.trigger("beforeLoad",i))return i.isLoading=!1;switch(e=i.type,(t=i.$slide).off("refresh").trigger("onReset").addClass(i.opts.slideClass),e){case"image":s.setImage(i);break;case"iframe":s.setIframe(i);break;case"html":s.setContent(i,i.src||i.content);break;case"video":s.setContent(i,i.opts.video.tpl.replace(/\{\{src\}\}/gi,i.src).replace("{{format}}",i.opts.videoFormat||i.opts.video.format||"").replace("{{poster}}",i.thumb||""));break;case"inline":m(i.src).length?s.setContent(i,m(i.src)):s.setError(i);break;case"ajax":s.showLoading(i),n=m.ajax(m.extend({},i.opts.ajax.settings,{url:i.src,success:function(e,t){"success"===t&&s.setContent(i,e)},error:function(e,t){e&&"abort"!==t&&s.setError(i)}})),t.one("onReset",function(){n.abort()});break;default:s.setError(i)}return!0}},setImage:function(t){var e,i=this;setTimeout(function(){var e=t.$image;i.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||i.showLoading(t)},50),i.checkSrcset(t),t.$content=m('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=d.createElement("img")).onerror=function(){m(this).remove(),t.$ghost=null},e.onload=function(){i.afterLoad(t)},t.$ghost=m(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),i.setBigImage(t)},checkSrcset:function(e){var t,i,n,s,a=e.opts.srcset||e.opts.image.srcset;if(a){n=l.devicePixelRatio||1,s=l.innerWidth*n,(i=a.split(",").map(function(e){var n={};return e.trim().split(/\s+/).forEach(function(e,t){var i=parseInt(e.substring(0,e.length-1),10);if(0===t)return n.url=e;i&&(n.value=i,n.postfix=e[e.length-1])}),n})).sort(function(e,t){return e.value-t.value});for(var o=0;o<i.length;o++){var r=i[o];if("w"===r.postfix&&r.value>=s||"x"===r.postfix&&r.value>=n){t=r;break}}!t&&i.length&&(t=i[i.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=a)}},setBigImage:function(t){var i=this,e=d.createElement("img"),n=m(e);t.$image=n.one("error",function(){i.setError(t)}).one("load",function(){var e;t.$ghost||(i.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),i.afterLoad(t)),i.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<s.width()/s.height()?"100":Math.round(t.width/t.height*100))+"vw"),n.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!i.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),i.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&n.naturalWidth&&n.naturalHeight?n.trigger("load"):e.error&&n.trigger("error")},resolveImageSlideSize:function(e,t,i){var n=parseInt(e.opts.width,10),s=parseInt(e.opts.height,10);e.width=t,e.height=i,0<n&&(e.width=n,e.height=Math.floor(n*i/t)),0<s&&(e.width=Math.floor(s*t/i),e.height=s)},setIframe:function(s){var a,t=this,o=s.opts.iframe,r=s.$slide;s.$content=m('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(r),r.addClass("fancybox-slide--"+s.contentType),s.$iframe=a=m(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(s.$content),o.preload?(t.showLoading(s),a.on("load.fb error.fb",function(e){this.isReady=1,s.$slide.trigger("refresh"),t.afterLoad(s)}),r.on("refresh.fb",function(){var e,t=s.$content,i=o.css.width,n=o.css.height;if(1===a[0].isReady){try{e=a.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(r.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),i===g&&(i=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",i||"").css("max-width",""),n===g&&(n=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",n||""),r.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(s),a.attr("src",s.src),r.one("onReset",function(){try{m(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}m(this).off("refresh.fb").empty(),s.isLoaded=!1,s.isRevealed=!1})},setContent:function(e,t){var i;this.isClosing||(this.hideLoading(e),e.$content&&m.fancybox.stop(e.$content),e.$slide.empty(),(i=t)&&i.hasOwnProperty&&i instanceof m&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=m("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===m.type(t)&&(t=m("<div>").append(m.trim(t)).contents()),e.opts.filter&&(t=m("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){m(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(m(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),m(t).appendTo(e.$slide),m(t).is("video,audio")&&(m(t).addClass("fancybox-video"),m(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||m(t).attr("width"),e.opts.height=e.opts.height||m(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=m(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=m(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&m('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t,i=this,n=e||i.current,s=n.opts.caption,a=n.opts.preventCaptionOverlap,o=i.$refs.caption,r=!1;o.toggleClass("fancybox-caption--separate",a),a&&s&&s.length&&(n.pos!==i.currPos?((t=o.clone().appendTo(o.parent())).children().eq(0).empty().html(s),r=t.outerHeight(!0),t.empty().remove()):i.$caption&&(r=i.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",r||""))},adjustLayout:function(e){var t,i,n,s,a=e||this.current;a.isLoaded&&!0!==a.opts.disableLayoutFix&&(a.$content.css("margin-bottom",""),a.$content.outerHeight()>a.$slide.height()+.5&&(n=a.$slide[0].style["padding-bottom"],s=a.$slide.css("padding-bottom"),0<parseFloat(s)&&(t=a.$slide[0].scrollHeight,a.$slide.css("padding-bottom",0),Math.abs(t-a.$slide[0].scrollHeight)<1&&(i=s),a.$slide.css("padding-bottom",n))),a.$content.css("margin-bottom",i))},revealContent:function(e){var t,i,n,s,a=this,o=e.$slide,r=!1,l=!1,c=a.isMoved(e),u=e.isRevealed;return e.isRevealed=!0,t=e.opts[a.firstRun?"animationEffect":"transitionEffect"],n=e.opts[a.firstRun?"animationDuration":"transitionDuration"],n=parseInt(e.forcedDuration===g?n:e.forcedDuration,10),!c&&e.pos===a.currPos&&n||(t=!1),"zoom"===t&&(e.pos===a.currPos&&n&&"image"===e.type&&!e.hasError&&(l=a.getThumbPos(e))?r=a.getFitPos(e):t="fade"),"zoom"===t?(a.isAnimating=!0,r.scaleX=r.width/l.width,r.scaleY=r.height/l.height,"auto"==(s=e.opts.zoomOpacity)&&(s=.1<Math.abs(e.width/e.height-l.width/l.height)),s&&(l.opacity=.1,r.opacity=1),m.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),p(e.$content),void m.fancybox.animate(e.$content,r,n,function(){a.isAnimating=!1,a.complete()})):(a.updateSlide(e),t?(m.fancybox.stop(o),i="fancybox-slide--"+(e.pos>=a.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,o.addClass(i).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),p(o),"image"!==e.type&&e.$content.hide().show(0),void m.fancybox.animate(o,"fancybox-slide--current",n,function(){o.removeClass(i).css({transform:"",opacity:""}),e.pos===a.currPos&&a.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),u||!c||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===a.currPos&&a.complete())))},getThumbPos:function(e){var t,i,n,s,a,o,r,l,c,u=e.$thumb;return!!(u&&(r=u[0])&&r.ownerDocument===d&&(m(".fancybox-container").css("pointer-events","none"),l={x:r.getBoundingClientRect().left+r.offsetWidth/2,y:r.getBoundingClientRect().top+r.offsetHeight/2},c=d.elementFromPoint(l.x,l.y)===r,m(".fancybox-container").css("pointer-events",""),c))&&(i=m.fancybox.getTranslate(u),n=parseFloat(u.css("border-top-width")||0),s=parseFloat(u.css("border-right-width")||0),a=parseFloat(u.css("border-bottom-width")||0),o=parseFloat(u.css("border-left-width")||0),t={top:i.top+n,left:i.left+o,width:i.width-s-o,height:i.height-n-a,scaleX:1,scaleY:1},0<i.width&&0<i.height&&t)},complete:function(){var e,i=this,t=i.current,n={};!i.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),i.preload("inline"),p(t.$slide),t.$slide.addClass("fancybox-slide--complete"),m.each(i.slides,function(e,t){t.pos>=i.currPos-1&&t.pos<=i.currPos+1?n[t.pos]=t:t&&(m.fancybox.stop(t.$slide),t.$slide.off().remove())}),i.slides=n),i.isAnimating=!1,i.updateCursor(),i.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),i.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):i.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,i,n=this;n.group.length<2||(i=n.slides[n.currPos+1],(t=n.slides[n.currPos-1])&&t.type===e&&n.loadSlide(t),i&&i.type===e&&n.loadSlide(i))},focus:function(e,t){var i,n,s=this,a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");s.isClosing||((i=(i=!e&&s.current&&s.current.isComplete?s.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):s.$refs.container.find("*:visible")).filter(a).filter(function(){return"hidden"!==m(this).css("visibility")&&!m(this).hasClass("disabled")})).length?(n=i.index(d.activeElement),e&&e.shiftKey?(n<0||0==n)&&(e.preventDefault(),i.eq(i.length-1).trigger("focus")):(n<0||n==i.length-1)&&(e&&e.preventDefault(),i.eq(0).trigger("focus"))):s.$refs.container.trigger("focus"))},activate:function(){var t=this;m(".fancybox-container").each(function(){var e=m(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function i(){u.cleanUp(e)}var n,s,a,o,r,l,c,u=this,d=u.current;return!u.isClosing&&(!(u.isClosing=!0)===u.trigger("beforeClose",e)?(u.isClosing=!1,h(function(){u.update()}),!1):(u.removeEvents(),a=d.$content,n=d.opts.animationEffect,s=m.isNumeric(t)?t:n?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?m.fancybox.stop(d.$slide):n=!1,d.$slide.siblings().trigger("onReset").remove(),s&&u.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",s+"ms"),u.hideLoading(d),u.hideControls(!0),u.updateCursor(),"zoom"!==n||a&&s&&"image"===d.type&&!u.isMoved()&&!d.hasError&&(c=u.getThumbPos(d))||(n="fade"),"zoom"===n?(m.fancybox.stop(a),l={top:(o=m.fancybox.getTranslate(a)).top,left:o.left,scaleX:o.width/c.width,scaleY:o.height/c.height,width:c.width,height:c.height},"auto"==(r=d.opts.zoomOpacity)&&(r=.1<Math.abs(d.width/d.height-c.width/c.height)),r&&(c.opacity=0),m.fancybox.setTranslate(a,l),p(a),m.fancybox.animate(a,c,s,i)):n&&s?m.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+n,s,i):!0===e?setTimeout(i,s):i(),!0))},cleanUp:function(e){var t,i,n,s=this,a=s.current.opts.$orig;s.current.$slide.trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",e),s.current.opts.backFocus&&(a&&a.length&&a.is(":visible")||(a=s.$trigger),a&&a.length&&(i=l.scrollX,n=l.scrollY,a.trigger("focus"),m("html, body").scrollTop(n).scrollLeft(i))),s.current=null,(t=m.fancybox.getInstance())?t.activate():(m("body").removeClass("fancybox-active compensate-for-scrollbar"),m("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,n=Array.prototype.slice.call(arguments,1),s=this,a=t&&t.opts?t:s.current;if(a?n.unshift(a):a=s,n.unshift(s),m.isFunction(a.opts[e])&&(i=a.opts[e].apply(a,n)),!1===i)return i;"afterClose"!==e&&s.$refs?s.$refs.container.trigger(e+".fb",n):o.trigger(e+".fb",n)},updateControls:function(){var e=this,t=e.current,i=t.index,n=e.$refs.container,s=e.$refs.caption,a=t.opts.caption;t.$slide.trigger("refresh"),a&&a.length?(e.$caption=s).children().eq(0).html(a):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),n.find("[data-fancybox-count]").html(e.group.length),n.find("[data-fancybox-index]").html(i+1),n.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&i<=0),n.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&i>=e.group.length-1),"image"===t.type?n.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&n.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),m(d.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,i=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,i.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),m.fancybox={version:"3.5.7",defaults:e,getInstance:function(e){var t=m('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof n&&("string"===m.type(e)?t[e].apply(t,i):"function"===m.type(e)&&e.apply(t,i),t)},open:function(e,t,i){return new n(e,t,i)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),o.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(i=d.createElement("div"),l.getComputedStyle&&l.getComputedStyle(i)&&l.getComputedStyle(i).getPropertyValue("transform")&&!(d.documentMode&&d.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var i="",n={};if(e&&t)return t.left===g&&t.top===g||(i=(t.left===g?e.position().left:t.left)+"px, "+(t.top===g?e.position().top:t.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),t.scaleX!==g&&t.scaleY!==g?i+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==g&&(i+=" scaleX("+t.scaleX+")"),i.length&&(n.transform=i),t.opacity!==g&&(n.opacity=t.opacity),t.width!==g&&(n.width=t.width),t.height!==g&&(n.height=t.height),e.css(n)},animate:function(t,i,n,s,a){var o,r=this;m.isFunction(n)&&(s=n,n=null),r.stop(t),o=r.getTranslate(t),t.on(c,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(r.stop(t),m.isNumeric(n)&&t.css("transition-duration",""),m.isPlainObject(i)?i.scaleX!==g&&i.scaleY!==g&&r.setTranslate(t,{top:i.top,left:i.left,width:o.width*i.scaleX,height:o.height*i.scaleY,scaleX:1,scaleY:1}):!0!==a&&t.removeClass(i),m.isFunction(s)&&s(e))}),m.isNumeric(n)&&t.css("transition-duration",n+"ms"),m.isPlainObject(i)?(i.scaleX!==g&&i.scaleY!==g&&(delete i.width,delete i.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),m.fancybox.setTranslate(t,i)):t.addClass(i),t.data("timer",setTimeout(function(){t.trigger(c)},n+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(c),e.off(c).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},m.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?m("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},y),this},o.on("click.fb-start","[data-fancybox]",y),o.on("click.fb-start","[data-fancybox-trigger]",function(e){m('[data-fancybox="'+m(this).attr("data-fancybox-trigger")+'"]').eq(m(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:m(this)})}),r=".fancybox-button",f="fancybox-focus",v=null,o.on("mousedown mouseup focus blur",r,function(e){switch(e.type){case"mousedown":v=m(this);break;case"mouseup":v=null;break;case"focusin":m(r).removeClass(f),m(this).is(v)||m(this).is("[disabled]")||m(this).addClass(f);break;case"focusout":m(r).removeClass(f)}})))}(window,document,jQuery),function(p){"use strict";function f(i,e,t){if(i)return t=t||"","object"===p.type(t)&&(t=p.param(t,!0)),p.each(e,function(e,t){i=i.replace("$"+e,t||"")}),t.length&&(i+=(0<i.indexOf("?")?"&":"?")+t),i}var n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};p(document).on("objectNeedsType.fb",function(e,t,s){var a,o,r,l,c,u,d=s.src||"",h=!1,i=p.extend(!0,{},n,s.opts.media);p.each(i,function(e,t){if(o=d.match(t.matcher)){if(h=t.type,u=e,c={},t.paramPlace&&o[t.paramPlace]){"?"==(l=o[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var i=0;i<l.length;++i){var n=l[i].split("=",2);2==n.length&&(c[n[0]]=decodeURIComponent(n[1].replace(/\+/g," ")))}}return r=p.extend(!0,{},t.params,s.opts[e],c),d="function"===p.type(t.url)?t.url.call(this,o,r,s):f(t.url,o,r),a="function"===p.type(t.thumb)?t.thumb.call(this,o,r,s):f(t.thumb,o),"youtube"===e?d=d.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,i,n){return"&start="+((i?60*parseInt(i,10):0)+parseInt(n,10))}):"vimeo"===e&&(d=d.replace("&%23","#")),!1}}),h?(s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=a),"iframe"===h&&(s.opts=p.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(s,{type:h,src:d,origSrc:s.src,contentSource:u,contentType:"image"===h?"image":"gmap_place"==u||"gmap_search"==u?"map":"video"})):d&&(s.type=s.opts.defaultType)});var s={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,i=this;this[e].loaded?setTimeout(function(){i.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){i[e].loaded=!0,i.done(e)}:t.onload=function(){i[e].loaded=!0,i.done(e)},document.body.appendChild(t))},done:function(e){var t,i;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=p.fancybox.getInstance())&&(i=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){t.next()}))}};p(document).on({"afterShow.fb":function(e,t,i){1<t.group.length&&("youtube"===i.contentSource||"vimeo"===i.contentSource)&&s.load(i.contentSource)}})}(jQuery),function(m,l,g){"use strict";function u(e){var t=[];for(var i in e=(e=e.originalEvent||e||m.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[i].pageX?t.push({x:e[i].pageX,y:e[i].pageY}):e[i].clientX&&t.push({x:e[i].clientX,y:e[i].clientY});return t}function v(e,t,i){return t&&e?"x"===i?e.x-t.x:"y"===i?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function c(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||g.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,i=e[0].attributes,n=i.length;t<n;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return 1}function d(e){for(var t,i,n,s,a,o=!1;t=e.get(0),0,i=m.getComputedStyle(t)["overflow-y"],n=m.getComputedStyle(t)["overflow-x"],s=("scroll"===i||"auto"===i)&&t.scrollHeight>t.clientHeight,a=("scroll"===n||"auto"===n)&&t.scrollWidth>t.clientWidth,!(o=s||a)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return o}function i(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",g.proxy(t,"ontouchstart"))}var y=m.requestAnimationFrame||m.webkitRequestAnimationFrame||m.mozRequestAnimationFrame||m.oRequestAnimationFrame||function(e){return m.setTimeout(e,1e3/60)},b=m.cancelAnimationFrame||m.webkitCancelAnimationFrame||m.mozCancelAnimationFrame||m.oCancelAnimationFrame||function(e){m.clearTimeout(e)};i.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),g(l).off(".fb.touch"),e.requestId&&(b(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},i.prototype.ontouchstart=function(e){var t=this,i=g(e.target),n=t.instance,s=n.current,a=s.$slide,o=s.$content,r="touchstart"==e.type;if(r&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&a.length&&i.length&&!c(i)&&!c(i.parent())&&(i.is("img")||!(e.originalEvent.clientX>i[0].clientWidth+i.offset().left))){if(!s||n.isAnimating||s.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=u(e),t.startPoints.length&&(s.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=i,t.$content=o,t.opts=s.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=n.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(a[0].clientWidth),t.canvasHeight=Math.round(a[0].clientHeight),t.contentLastPos=null,t.contentStartPos=g.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=g.fancybox.getTranslate(a),t.stagePos=g.fancybox.getTranslate(n.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,g(l).off(".fb.touch").on(r?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",g.proxy(t,"ontouchend")).on(r?"touchmove.fb.touch":"mousemove.fb.touch",g.proxy(t,"ontouchmove")),g.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(i.is(t.$stage)||t.$stage.find(i).length)||(i.is(".fancybox-image")&&e.preventDefault(),g.fancybox.isMobile&&i.parents(".fancybox-caption").length))&&(t.isScrollable=d(i)||d(i.parent()),g.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!s.hasError||(t.canPan?(g.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===s.type&&(s.isLoaded||s.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,g.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-g(m).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-g(m).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=v(t.startPoints[0],t.startPoints[1]))))}},i.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},i.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=u(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=v(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=v(t.newPoints[0],t.startPoints[0],"y"),t.distance=v(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},i.prototype.onSwipe=function(e){var t,s=this,a=s.instance,i=s.isSwiping,n=s.sliderStartPos.left||0;if(!0!==i)"x"==i&&(0<s.distanceX&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?n+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?n-=Math.pow(-s.distanceX,.8):n+=s.distanceX),s.sliderLastPos={top:"x"==i?0:s.sliderStartPos.top+s.distanceY,left:n},s.requestId&&(b(s.requestId),s.requestId=null),s.requestId=y(function(){s.sliderLastPos&&(g.each(s.instance.slides,function(e,t){var i=t.pos-s.instance.currPos;g.fancybox.setTranslate(t.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+i*s.canvasWidth+i*t.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(s.distance)){if(s.canTap=!1,a.group.length<2&&s.opts.vertical?s.isSwiping="y":a.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&800<g(m).width()?s.isSwiping="x":(t=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=45<t&&t<135?"y":"x"),"y"===s.isSwiping&&g.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);a.isDragging=s.isSwiping,s.startPoints=s.newPoints,g.each(a.slides,function(e,t){var i,n;g.fancybox.stop(t.$slide),i=g.fancybox.getTranslate(t.$slide),n=g.fancybox.getTranslate(a.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===a.current.pos&&(s.sliderStartPos.top=i.top-n.top,s.sliderStartPos.left=i.left-n.left),g.fancybox.setTranslate(t.$slide,{top:i.top-n.top,left:i.left-n.left})}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop()}},i.prototype.onPan=function(){var e=this;v(e.newPoints[0],e.realPoints[0])<(g.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&b(e.requestId),e.requestId=y(function(){g.fancybox.setTranslate(e.$content,e.contentLastPos)}))},i.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,i=e.canvasHeight,n=e.distanceX,s=e.distanceY,a=e.contentStartPos,o=a.left,r=a.top,l=a.width,c=a.height,u=t<l?o+n:o,d=r+s,h=Math.max(0,.5*t-.5*l),p=Math.max(0,.5*i-.5*c),f=Math.min(t-l,.5*t-.5*l),m=Math.min(i-c,.5*i-.5*c);return 0<n&&h<u&&(u=h-1+Math.pow(-h+o+n,.8)||0),n<0&&u<f&&(u=f+1-Math.pow(f-o-n,.8)||0),0<s&&p<d&&(d=p-1+Math.pow(-p+r+s,.8)||0),s<0&&d<m&&(d=m+1-Math.pow(m-r-s,.8)||0),{top:d,left:u}},i.prototype.limitPosition=function(e,t,i,n){var s=this.canvasWidth,a=this.canvasHeight;return e=s<i?(e=0<e?0:e)<s-i?s-i:e:Math.max(0,s/2-i/2),{top:t=a<n?(t=0<t?0:t)<a-n?a-n:t:Math.max(0,a/2-n/2),left:e}},i.prototype.onZoom=function(){var e=this,t=e.contentStartPos,i=t.width,n=t.height,s=t.left,a=t.top,o=v(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,r=Math.floor(i*o),l=Math.floor(n*o),c=(i-r)*e.percentageOfImageAtPinchPointX,u=(n-l)*e.percentageOfImageAtPinchPointY,d=(e.newPoints[0].x+e.newPoints[1].x)/2-g(m).scrollLeft(),h=(e.newPoints[0].y+e.newPoints[1].y)/2-g(m).scrollTop(),p=d-e.centerPointStartX,f={top:a+(u+(h-e.centerPointStartY)),left:s+(c+p),scaleX:o,scaleY:o};e.canTap=!1,e.newWidth=r,e.newHeight=l,e.contentLastPos=f,e.requestId&&b(e.requestId),e.requestId=y(function(){g.fancybox.setTranslate(e.$content,e.contentLastPos)})},i.prototype.ontouchend=function(e){var t=this,i=t.isSwiping,n=t.isPanning,s=t.isZooming,a=t.isScrolling;if(t.endPoints=u(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),g(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(b(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,n?t.endPanning():s?t.endZooming():t.endSwiping(i,a)},i.prototype.endSwiping=function(e,t){var i=this,n=!1,s=i.instance.group.length,a=Math.abs(i.distanceX),o="x"==e&&1<s&&(130<i.dMs&&10<a||50<a);i.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(i.distanceY)?(g.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),n=i.instance.close(!0,250)):o&&0<i.distanceX?n=i.instance.previous(300):o&&i.distanceX<0&&(n=i.instance.next(300)),!1!==n||"x"!=e&&"y"!=e||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var e,t,i,n=this;n.contentLastPos&&(t=!1===n.opts.momentum||350<n.dMs?(e=n.contentLastPos.left,n.contentLastPos.top):(e=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(i=n.limitPosition(e,t,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,i.height=n.contentStartPos.height,g.fancybox.animate(n.$content,i,366))},i.prototype.endZooming=function(){var e,t,i,n,s=this,a=s.instance.current,o=s.newWidth,r=s.newHeight;s.contentLastPos&&(e=s.contentLastPos.left,n={top:t=s.contentLastPos.top,left:e,width:o,height:r,scaleX:1,scaleY:1},g.fancybox.setTranslate(s.$content,n),o<s.canvasWidth&&r<s.canvasHeight?s.instance.scaleToFit(150):o>a.width||r>a.height?s.instance.scaleToActual(s.centerPointStartX,s.centerPointStartY,150):(i=s.limitPosition(e,t,o,r),g.fancybox.animate(s.$content,i,150)))},i.prototype.onTap=function(i){function e(e){var t=o.opts[e];if(g.isFunction(t)&&(t=t.apply(a,[o,i])),t)switch(t){case"close":a.close(n.startEvent);break;case"toggleControls":a.toggleControls();break;case"next":a.next();break;case"nextOrClose":1<a.group.length?a.next():a.close(n.startEvent);break;case"zoom":"image"==o.type&&(o.isLoaded||o.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(l,c):a.group.length<2&&a.close(n.startEvent))}}var t,n=this,s=g(i.target),a=n.instance,o=a.current,r=i&&u(i)||n.startPoints,l=r[0]?r[0].x-g(m).scrollLeft()-n.stagePos.left:0,c=r[0]?r[0].y-g(m).scrollTop()-n.stagePos.top:0;if((!i.originalEvent||2!=i.originalEvent.button)&&(s.is("img")||!(l>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(s.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.find(s).addBack().filter(s).length)return;t="Content"}if(n.tapped){if(clearTimeout(n.tapped),n.tapped=null,50<Math.abs(l-n.tapX)||50<Math.abs(c-n.tapY))return this;e("dblclick"+t)}else n.tapX=l,n.tapY=c,o.opts["dblclick"+t]&&o.opts["dblclick"+t]!==o.opts["click"+t]?n.tapped=setTimeout(function(){n.tapped=null,a.isAnimating||e("click"+t)},500):e("click"+t);return this}},g(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new i(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(o,r){"use strict";r.extend(!0,r.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function i(e){this.instance=e,this.init()}r.extend(i.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,i=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!i?e.$button.hide():i.progress&&(e.$progress=r('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,i=t.instance,n=i.current;n&&(!0===e||n.opts.loop||i.currIndex<i.group.length-1)?t.isActive&&"video"!==n.contentType&&(t.$progress&&r.fancybox.animate(t.$progress.show(),{scaleX:1},n.opts.slideShow.speed),t.timer=setTimeout(function(){i.current.opts.loop||i.current.index!=i.group.length-1?i.next():i.jumpTo(0)},n.opts.slideShow.speed)):(t.stop(),i.idleSecondsCounter=0,i.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),r(o).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new i(t))},"beforeShow.fb":function(e,t,i,n){var s=t&&t.SlideShow;n?s&&i.opts.slideShow.autoStart&&s.start():s&&s.isActive&&s.clear()},"afterShow.fb":function(e,t,i){var n=t&&t.SlideShow;n&&n.isActive&&n.set()},"afterKeydown.fb":function(e,t,i,n,s){var a=t&&t.SlideShow;!a||!i.opts.slideShow||80!==s&&32!==s||r(o.activeElement).is("button,a,input")||(n.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var i=t&&t.SlideShow;i&&i.stop()}}),r(o).on("visibilitychange",function(){var e=r.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(o.hidden?t.clear():t.set())})}(document,jQuery),function(a,i){"use strict";var n,s=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},i=0;i<e.length;i++){var n=e[i];if(n&&n[1]in a){for(var s=0;s<n.length;s++)t[e[0][s]]=n[s];return t}}return!1}();s&&(n={request:function(e){(e=e||a.documentElement)[s.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){a[s.exitFullscreen]()},toggle:function(e){e=e||a.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(a[s.fullscreenElement])},enabled:function(){return Boolean(a[s.fullscreenEnabled])}},i.extend(!0,i.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),i(a).on(s.fullscreenchange,function(){var e=n.isFullscreen(),t=i.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),i(a).on({"onInit.fb":function(e,t){s?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),n.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&n.request(),t.FullScreen=n):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,i,n,s){t&&t.FullScreen&&70===s&&(n.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&n.exit()}})}(document,jQuery),function(e,a){"use strict";var o="fancybox-thumbs",r=o+"-active";a.fancybox.defaults=a.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},a.fancybox.defaults);function n(e){this.init(e)}a.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,i=e.group,n=0;t.instance=e,t.opts=i[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var s=0,a=i.length;s<a&&(i[s].thumb&&n++,!(1<n));s++);1<n&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var i,e=this,t=e.instance,n=e.opts.parentEl,s=[];e.$grid||(e.$grid=a('<div class="'+o+" "+o+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(n).addBack().filter(n)),e.$grid.on("click","a",function(){t.jumpTo(a(this).attr("data-index"))})),e.$list||(e.$list=a('<div class="'+o+'__list">').appendTo(e.$grid)),a.each(t.group,function(e,t){(i=t.thumb)||"image"!==t.type||(i=t.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(i&&i.length?' style="background-image:url('+i+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=s.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,i,n=this,s=n.$list,a=n.$grid;n.instance.current&&(i=(t=s.children().removeClass(r).filter('[data-index="'+n.instance.current.index+'"]').addClass(r)).position(),"y"===n.opts.axis&&(i.top<0||i.top>s.height()-t.outerHeight())?s.stop().animate({scrollTop:s.scrollTop()+i.top},e):"x"===n.opts.axis&&(i.left<a.scrollLeft()||i.left>a.scrollLeft()+(a.width()-t.outerWidth()))&&s.parent().stop().animate({scrollLeft:i.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),a(e).on({"onInit.fb":function(e,t){var i;t&&!t.Thumbs&&(i=new n(t)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(e,t,i,n){var s=t&&t.Thumbs;s&&s.isVisible&&s.focus(n?0:250)},"afterKeydown.fb":function(e,t,i,n,s){var a=t&&t.Thumbs;a&&a.isActive&&71===s&&(n.preventDefault(),a.toggle())},"beforeClose.fb":function(e,t){var i=t&&t.Thumbs;i&&i.isVisible&&!1!==i.opts.hideOnClose&&i.$grid.hide()}})}(document,jQuery),function(e,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),a(e).on("click","[data-fancybox-share]",function(){var e,t,i,n=a.fancybox.getInstance(),s=n.current||null;s&&("function"===a.type(s.opts.share.url)&&(e=s.opts.share.url.apply(s,[n,s])),t=s.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===s.type?encodeURIComponent(s.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return i[e]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),a.fancybox.open({src:n.translate(n,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){n.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(a,o,s){"use strict";function r(){var e=a.location.hash.substr(1),t=e.split("-"),i=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:i<1?1:i,gallery:t.join("-")}}function t(e){""!==e.gallery&&s("[data-fancybox='"+s.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,i;return!!e&&(""!==(i=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&i)}s.escapeSelector||(s.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),s(function(){!1!==s.fancybox.defaults.hash&&(s(o).on({"onInit.fb":function(e,t){var i,n;!1!==t.group[t.currIndex].opts.hash&&(i=r(),(n=l(t))&&i.gallery&&n==i.gallery&&(t.currIndex=i.index-1))},"beforeShow.fb":function(e,t,i,n){var s;i&&!1!==i.opts.hash&&(s=l(t))&&(t.currentHash=s+(1<t.group.length?"-"+(i.index+1):""),a.location.hash!=="#"+t.currentHash&&(n&&!t.origHash&&(t.origHash=a.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in a.history?(a.history[n?"pushState":"replaceState"]({},o.title,a.location.pathname+a.location.search+"#"+t.currentHash),n&&(t.hasCreatedHistory=!0)):a.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,i){i&&!1!==i.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?a.history.back():t.currentHash&&("replaceState"in a.history?a.history.replaceState({},o.title,a.location.pathname+a.location.search+(t.origHash||"")):a.location.hash=t.origHash),t.currentHash=null)}}),s(a).on("hashchange.fb",function(){var e=r(),n=null;s.each(s(".fancybox-container").get().reverse(),function(e,t){var i=s(t).data("FancyBox");if(i&&i.currentHash)return n=i,!1}),n?n.currentHash===e.gallery+"-"+e.index||1===e.index&&n.currentHash==e.gallery||(n.currentHash=null,n.close()):""!==e.gallery&&t(e)}),setTimeout(function(){s.fancybox.getInstance()||t(r())},50))})}(window,document,jQuery),function(e,t){"use strict";var s=(new Date).getTime();t(e).on({"onInit.fb":function(e,n,t){n.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=n.current,i=(new Date).getTime();n.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,i-s<250||(s=i,n[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";var m="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,se="undefined"==typeof window?{document:m,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function D(e,t){var i=[],n=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,a,o=e.trim();if(0<=o.indexOf("<")&&0<=o.indexOf(">")){var r="div";for(0===o.indexOf("<li")&&(r="ul"),0===o.indexOf("<tr")&&(r="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(r="tr"),0===o.indexOf("<tbody")&&(r="table"),0===o.indexOf("<option")&&(r="select"),(a=m.createElement(r)).innerHTML=o,n=0;n<a.childNodes.length;n+=1)i.push(a.childNodes[n])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||m).querySelectorAll(e.trim()):[m.getElementById(e.trim().split("#")[1])],n=0;n<s.length;n+=1)s[n]&&i.push(s[n])}else if(e.nodeType||e===se||e===m)i.push(e);else if(0<e.length&&e[0].nodeType)for(n=0;n<e.length;n+=1)i.push(e[n]);return new l(i)}function a(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}D.fn=l.prototype,D.Class=l,D.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[i]);return this},removeClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[i]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),i=0;i<t.length;i+=1)for(var n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[i]);return this},attr:function(e,t){var i=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===i.length)this[n].setAttribute(e,t);else for(var s in e)this[n][s]=e[s],this[n].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var i;if(void 0!==t){for(var n=0;n<this.length;n+=1)(i=this[n]).dom7ElementDataStorage||(i.dom7ElementDataStorage={}),i.dom7ElementDataStorage[e]=t;return this}if(i=this[0])return i.dom7ElementDataStorage&&e in i.dom7ElementDataStorage?i.dom7ElementDataStorage[e]:i.getAttribute("data-"+e)||void 0},transform:function(e){for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransform=e,i.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var i=this[t].style;i.webkitTransitionDuration=e,i.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],a=e[1],o=e[2],n=e[3];function s(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),D(t).is(a))o.apply(t,i);else for(var n=D(t).parents(),s=0;s<n.length;s+=1)D(n[s]).is(a)&&o.apply(n[s],i)}}function r(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),o.apply(this,t)}"function"==typeof e[1]&&(i=e[0],o=e[1],n=e[2],a=void 0),n=n||!1;for(var l,c=i.split(" "),u=0;u<this.length;u+=1){var d=this[u];if(a)for(l=0;l<c.length;l+=1){var h=c[l];d.dom7LiveListeners||(d.dom7LiveListeners={}),d.dom7LiveListeners[h]||(d.dom7LiveListeners[h]=[]),d.dom7LiveListeners[h].push({listener:o,proxyListener:s}),d.addEventListener(h,s,n)}else for(l=0;l<c.length;l+=1){var p=c[l];d.dom7Listeners||(d.dom7Listeners={}),d.dom7Listeners[p]||(d.dom7Listeners[p]=[]),d.dom7Listeners[p].push({listener:o,proxyListener:r}),d.addEventListener(p,r,n)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i=e[0],n=e[1],s=e[2],a=e[3];"function"==typeof e[1]&&(i=e[0],s=e[1],a=e[2],n=void 0),a=a||!1;for(var o=i.split(" "),r=0;r<o.length;r+=1)for(var l=o[r],c=0;c<this.length;c+=1){var u=this[c],d=void 0;if(!n&&u.dom7Listeners?d=u.dom7Listeners[l]:n&&u.dom7LiveListeners&&(d=u.dom7LiveListeners[l]),d&&d.length)for(var h=d.length-1;0<=h;--h){var p=d[h];!(s&&p.listener===s||s&&p.listener&&p.listener.dom7proxy&&p.listener.dom7proxy===s)&&s||(u.removeEventListener(l,p.proxyListener,a),d.splice(h,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=e[0].split(" "),n=e[1],s=0;s<i.length;s+=1)for(var a=i[s],o=0;o<this.length;o+=1){var r=this[o],l=void 0;try{l=new se.CustomEvent(a,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(l=m.createEvent("Event")).initEvent(a,!0,!0),l.detail=n}r.dom7EventData=e.filter(function(e,t){return 0<t}),r.dispatchEvent(l),r.dom7EventData=[],delete r.dom7EventData}return this},transitionEnd:function(t){var i,n=["webkitTransitionEnd","transitionend"],s=this;function a(e){if(e.target===this)for(t.call(this,e),i=0;i<n.length;i+=1)s.off(n[i],a)}if(t)for(i=0;i<n.length;i+=1)s.on(n[i],a);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),i=m.body,n=e.clientTop||i.clientTop||0,s=e.clientLeft||i.clientLeft||0,a=e===se?se.scrollY:e.scrollTop,o=e===se?se.scrollX:e.scrollLeft;return{top:t.top+a-n,left:t.left+o-s}}return null},css:function(e,t){var i;if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var n in e)this[i].style[n]=e[n];return this}if(this[0])return se.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,n=this[0];if(!n||void 0===e)return!1;if("string"==typeof e){if(n.matches)return n.matches(e);if(n.webkitMatchesSelector)return n.webkitMatchesSelector(e);if(n.msMatchesSelector)return n.msMatchesSelector(e);for(t=D(e),i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}if(e===m)return n===m;if(e===se)return n===se;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===n)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,i=this.length;return new l(i-1<e?[]:e<0?(t=i+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],i=arguments.length;i--;)t[i]=arguments[i];for(var n=0;n<t.length;n+=1){e=t[n];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var a=m.createElement("div");for(a.innerHTML=e;a.firstChild;)this[s].appendChild(a.firstChild)}else if(e instanceof l)for(var o=0;o<e.length;o+=1)this[s].appendChild(e[o]);else this[s].appendChild(e)}return this},prepend:function(e){for(var t,i=0;i<this.length;i+=1)if("string"==typeof e){var n=m.createElement("div");for(n.innerHTML=e,t=n.childNodes.length-1;0<=t;--t)this[i].insertBefore(n.childNodes[t],this[i].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[i].insertBefore(e[t],this[i].childNodes[0]);else this[i].insertBefore(e,this[i].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&D(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.nextElementSibling;){var n=i.nextElementSibling;e&&!D(n).is(e)||t.push(n),i=n}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&D(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],i=this[0];if(!i)return new l([]);for(;i.previousElementSibling;){var n=i.previousElementSibling;e&&!D(n).is(e)||t.push(n),i=n}return new l(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null===this[i].parentNode||e&&!D(this[i].parentNode).is(e)||t.push(this[i].parentNode);return D(a(t))},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].parentNode;n;)e&&!D(n).is(e)||t.push(n),n=n.parentNode;return D(a(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].querySelectorAll(e),s=0;s<n.length;s+=1)t.push(n[s]);return new l(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].childNodes,s=0;s<n.length;s+=1)e?1===n[s].nodeType&&D(n[s]).is(e)&&t.push(n[s]):1===n[s].nodeType&&t.push(n[s]);return new l(a(t))},filter:function(e){for(var t=[],i=0;i<this.length;i+=1)e.call(this[i],i,this[i])&&t.push(this[i]);return new l(t)},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=0;i<e.length;i+=1)for(var n=D(e[i]),s=0;s<n.length;s+=1)this[this.length]=n[s],this.length+=1;return this},styles:function(){return this[0]?se.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){D.fn[e]=D.fn[e]||t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var ae={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var i,n,s;void 0===t&&(t="x");var a=se.getComputedStyle(e,null);return se.WebKitCSSMatrix?(6<(n=a.transform||a.webkitTransform).split(",").length&&(n=n.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new se.WebKitCSSMatrix("none"===n?"":n)):i=(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=se.WebKitCSSMatrix?s.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=se.WebKitCSSMatrix?s.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0},parseUrlQuery:function(e){var t,i,n,s,a={},o=e||se.location.href;if("string"==typeof o&&o.length)for(s=(i=(o=-1<o.indexOf("?")?o.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)n=i[t].replace(/#\S+/g,"").split("="),a[decodeURIComponent(n[0])]=void 0===n[1]?void 0:decodeURIComponent(n[1])||"";return a},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var i=Object(e[0]),n=1;n<e.length;n+=1){var s=e[n];if(null!=s)for(var a=Object.keys(Object(s)),o=0,r=a.length;o<r;o+=1){var l=a[o],c=Object.getOwnPropertyDescriptor(s,l);void 0!==c&&c.enumerable&&(ae.isObject(i[l])&&ae.isObject(s[l])?ae.extend(i[l],s[l]):!ae.isObject(i[l])&&ae.isObject(s[l])?(i[l]={},ae.extend(i[l],s[l])):i[l]=s[l])}}return i}},E={touch:se.Modernizr&&!0===se.Modernizr.touch||!!(0<se.navigator.maxTouchPoints||"ontouchstart"in se||se.DocumentTouch&&m instanceof se.DocumentTouch),pointerEvents:!!se.PointerEvent&&"maxTouchPoints"in se.navigator&&0<se.navigator.maxTouchPoints,observer:"MutationObserver"in se||"WebkitMutationObserver"in se,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});se.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in se},i={components:{configurable:!0}};e.prototype.on=function(e,t,i){var n=this;if("function"!=typeof t)return n;var s=i?"unshift":"push";return e.split(" ").forEach(function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][s](t)}),n},e.prototype.once=function(i,n,e){var s=this;if("function"!=typeof n)return s;function a(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];s.off(i,a),a.f7proxy&&delete a.f7proxy,n.apply(s,e)}return a.f7proxy=n,s.on(i,a,e)},e.prototype.off=function(e,n){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(i){void 0===n?s.eventsListeners[i]=[]:s.eventsListeners[i]&&s.eventsListeners[i].length&&s.eventsListeners[i].forEach(function(e,t){(e===n||e.f7proxy&&e.f7proxy===n)&&s.eventsListeners[i].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var i,n,s,a=this;return a.eventsListeners&&(s="string"==typeof e[0]||Array.isArray(e[0])?(i=e[0],n=e.slice(1,e.length),a):(i=e[0].events,n=e[0].data,e[0].context||a),(Array.isArray(i)?i:i.split(" ")).forEach(function(e){var t;a.eventsListeners&&a.eventsListeners[e]&&(t=[],a.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,n)}))})),a},e.prototype.useModulesParams=function(i){var n=this;n.modules&&Object.keys(n.modules).forEach(function(e){var t=n.modules[e];t.params&&ae.extend(i,t.params)})},e.prototype.useModules=function(n){void 0===n&&(n={});var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var i=s.modules[e],t=n[e]||{};i.instance&&Object.keys(i.instance).forEach(function(e){var t=i.instance[e];s[e]="function"==typeof t?t.bind(s):t}),i.on&&s.on&&Object.keys(i.on).forEach(function(e){s.on(e,i.on[e])}),i.create&&i.create.bind(s)(t)})},i.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],i=arguments.length-1;0<i--;)e[i]=arguments[i+1];var n=this;n.prototype.modules||(n.prototype.modules={});var s=t.name||Object.keys(n.prototype.modules).length+"_"+ae.now();return(n.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install&&t.install.apply(n,e),n},e.use=function(e){for(var t=[],i=arguments.length-1;0<i--;)t[i]=arguments[i+1];var n=this;return Array.isArray(e)?(e.forEach(function(e){return n.installModule(e)}),n):n.installModule.apply(n,[e].concat(t))},Object.defineProperties(e,i);var n,s,o,r,c,u,d,h,p,f,g,v,y,b,w,x={updateSize:function(){var e=this.$el,t=void 0!==this.params.width?this.params.width:e[0].clientWidth,i=void 0!==this.params.height?this.params.height:e[0].clientHeight;0===t&&this.isHorizontal()||0===i&&this.isVertical()||(t=t-parseInt(e.css("padding-left"),10)-parseInt(e.css("padding-right"),10),i=i-parseInt(e.css("padding-top"),10)-parseInt(e.css("padding-bottom"),10),ae.extend(this,{width:t,height:i,size:this.isHorizontal()?t:i}))},updateSlides:function(){var t=this.params,e=this.$wrapperEl,i=this.size,n=this.rtlTranslate,s=this.wrongRTL,a=this.virtual&&t.virtual.enabled,o=a?this.virtual.slides.length:this.slides.length,r=e.children("."+this.params.slideClass),l=a?this.virtual.slides.length:r.length,c=[],u=[],d=[];function h(e){return!t.cssMode||e!==r.length-1}var p=t.slidesOffsetBefore;"function"==typeof p&&(p=t.slidesOffsetBefore.call(this));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(this));var m,g=this.snapGrid.length,v=this.snapGrid.length,y=t.spaceBetween,b=-p,w=0,x=0;if(void 0!==i){"string"==typeof y&&0<=y.indexOf("%")&&(y=parseFloat(y.replace("%",""))/100*i),this.virtualSize=-y,n?r.css({marginLeft:"",marginTop:""}):r.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(m=Math.floor(l/t.slidesPerColumn)===l/this.params.slidesPerColumn?l:Math.ceil(l/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(m=Math.max(m,t.slidesPerView*t.slidesPerColumn)));for(var C,S,T,E,k,A=t.slidesPerColumn,M=m/A,P=Math.floor(l/t.slidesPerColumn),D=0;D<l;D+=1){W=0;var O,I,L,$,N,z,j,F,R,B,H,q,_,X,Y,W,V,G,U,K,Q,Z,J=r.eq(D);1<t.slidesPerColumn&&(I=O=z=void 0,"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?(L=Math.floor(D/(t.slidesPerGroup*t.slidesPerColumn)),$=D-t.slidesPerColumn*t.slidesPerGroup*L,N=0===L?t.slidesPerGroup:Math.min(Math.ceil((l-L*A*t.slidesPerGroup)/A),t.slidesPerGroup),z=(O=$-(I=Math.floor($/N))*N+L*t.slidesPerGroup)+I*m/A,J.css({"-webkit-box-ordinal-group":z,"-moz-box-ordinal-group":z,"-ms-flex-order":z,"-webkit-order":z,order:z})):"column"===t.slidesPerColumnFill?(I=D-(O=Math.floor(D/A))*A,(P<O||O===P&&I===A-1)&&(I+=1)>=A&&(I=0,O+=1)):O=D-(I=Math.floor(D/M))*M,J.css("margin-"+(this.isHorizontal()?"top":"left"),0!==I&&t.spaceBetween&&t.spaceBetween+"px")),"none"!==J.css("display")&&("auto"===t.slidesPerView?(j=se.getComputedStyle(J[0],null),F=J[0].style.transform,R=J[0].style.webkitTransform,F&&(J[0].style.transform="none"),R&&(J[0].style.webkitTransform="none"),W=t.roundLengths?this.isHorizontal()?J.outerWidth(!0):J.outerHeight(!0):this.isHorizontal()?(B=parseFloat(j.getPropertyValue("width")),H=parseFloat(j.getPropertyValue("padding-left")),q=parseFloat(j.getPropertyValue("padding-right")),_=parseFloat(j.getPropertyValue("margin-left")),X=parseFloat(j.getPropertyValue("margin-right")),(Y=j.getPropertyValue("box-sizing"))&&"border-box"===Y?B+_+X:B+H+q+_+X):(V=parseFloat(j.getPropertyValue("height")),G=parseFloat(j.getPropertyValue("padding-top")),U=parseFloat(j.getPropertyValue("padding-bottom")),K=parseFloat(j.getPropertyValue("margin-top")),Q=parseFloat(j.getPropertyValue("margin-bottom")),(Z=j.getPropertyValue("box-sizing"))&&"border-box"===Z?V+K+Q:V+G+U+K+Q),F&&(J[0].style.transform=F),R&&(J[0].style.webkitTransform=R),t.roundLengths&&(W=Math.floor(W))):(W=(i-(t.slidesPerView-1)*y)/t.slidesPerView,t.roundLengths&&(W=Math.floor(W)),r[D]&&(this.isHorizontal()?r[D].style.width=W+"px":r[D].style.height=W+"px")),r[D]&&(r[D].swiperSlideSize=W),d.push(W),t.centeredSlides?(b=b+W/2+w/2+y,0===w&&0!==D&&(b=b-i/2-y),0===D&&(b=b-i/2-y),Math.abs(b)<.001&&(b=0),t.roundLengths&&(b=Math.floor(b)),x%t.slidesPerGroup==0&&c.push(b),u.push(b)):(t.roundLengths&&(b=Math.floor(b)),(x-Math.min(this.params.slidesPerGroupSkip,x))%this.params.slidesPerGroup==0&&c.push(b),u.push(b),b=b+W+y),this.virtualSize+=W+y,w=W,x+=1)}if(this.virtualSize=Math.max(this.virtualSize,i)+f,n&&s&&("slide"===t.effect||"coverflow"===t.effect)&&e.css({width:this.virtualSize+t.spaceBetween+"px"}),t.setWrapperSize&&(this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(this.virtualSize=(W+t.spaceBetween)*m,this.virtualSize=Math.ceil(this.virtualSize/t.slidesPerColumn)-t.spaceBetween,this.isHorizontal()?e.css({width:this.virtualSize+t.spaceBetween+"px"}):e.css({height:this.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){C=[];for(var ee=0;ee<c.length;ee+=1){var te=c[ee];t.roundLengths&&(te=Math.floor(te)),c[ee]<this.virtualSize+c[0]&&C.push(te)}c=C}if(!t.centeredSlides){C=[];for(var ie=0;ie<c.length;ie+=1){var ne=c[ie];t.roundLengths&&(ne=Math.floor(ne)),c[ie]<=this.virtualSize-i&&C.push(ne)}c=C,1<Math.floor(this.virtualSize-i)-Math.floor(c[c.length-1])&&c.push(this.virtualSize-i)}0===c.length&&(c=[0]),0!==t.spaceBetween&&(this.isHorizontal()?n?r.filter(h).css({marginLeft:y+"px"}):r.filter(h).css({marginRight:y+"px"}):r.filter(h).css({marginBottom:y+"px"})),t.centeredSlides&&t.centeredSlidesBounds&&(S=0,d.forEach(function(e){S+=e+(t.spaceBetween?t.spaceBetween:0)}),T=(S-=t.spaceBetween)-i,c=c.map(function(e){return e<0?-p:T<e?T+f:e})),t.centerInsufficientSlides&&(E=0,d.forEach(function(e){E+=e+(t.spaceBetween?t.spaceBetween:0)}),(E-=t.spaceBetween)<i&&(k=(i-E)/2,c.forEach(function(e,t){c[t]=e-k}),u.forEach(function(e,t){u[t]=e+k}))),ae.extend(this,{slides:r,snapGrid:c,slidesGrid:u,slidesSizesGrid:d}),l!==o&&this.emit("slidesLengthChange"),c.length!==g&&(this.params.watchOverflow&&this.checkOverflow(),this.emit("snapGridLengthChange")),u.length!==v&&this.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&this.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i,n=[],s=0;if("number"==typeof e?this.setTransition(e):!0===e&&this.setTransition(this.params.speed),"auto"!==this.params.slidesPerView&&1<this.params.slidesPerView)if(this.params.centeredSlides)this.visibleSlides.each(function(e,t){n.push(t)});else for(t=0;t<Math.ceil(this.params.slidesPerView);t+=1){var a=this.activeIndex+t;if(a>this.slides.length)break;n.push(this.slides.eq(a)[0])}else n.push(this.slides.eq(this.activeIndex)[0]);for(t=0;t<n.length;t+=1){void 0!==n[t]&&(s=s<(i=n[t].offsetHeight)?i:s)}s&&this.$wrapperEl.css("height",s+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this.params,i=this.slides,n=this.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&this.updateSlidesOffset();var s=n?e:-e;i.removeClass(t.slideVisibleClass),this.visibleSlidesIndexes=[],this.visibleSlides=[];for(var a=0;a<i.length;a+=1){var o,r,l=i[a],c=(s+(t.centeredSlides?this.minTranslate():0)-l.swiperSlideOffset)/(l.swiperSlideSize+t.spaceBetween);(t.watchSlidesVisibility||t.centeredSlides&&t.autoHeight)&&(r=(o=-(s-l.swiperSlideOffset))+this.slidesSizesGrid[a],(0<=o&&o<this.size-1||1<r&&r<=this.size||o<=0&&r>=this.size)&&(this.visibleSlides.push(l),this.visibleSlidesIndexes.push(a),i.eq(a).addClass(t.slideVisibleClass))),l.progress=n?-c:c}this.visibleSlides=D(this.visibleSlides)}},updateProgress:function(e){var t;void 0===e&&(t=this.rtlTranslate?-1:1,e=this&&this.translate&&this.translate*t||0);var i=this.params,n=this.maxTranslate()-this.minTranslate(),s=this.progress,a=this.isBeginning,o=a,r=l=this.isEnd,l=0==n?a=!(s=0):(a=(s=(e-this.minTranslate())/n)<=0,1<=s);ae.extend(this,{progress:s,isBeginning:a,isEnd:l}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&this.updateSlidesProgress(e),a&&!o&&this.emit("reachBeginning toEdge"),l&&!r&&this.emit("reachEnd toEdge"),(o&&!a||r&&!l)&&this.emit("fromEdge"),this.emit("progress",s)},updateSlidesClasses:function(){var e,t=this.slides,i=this.params,n=this.$wrapperEl,s=this.activeIndex,a=this.realIndex,o=this.virtual&&i.virtual.enabled;t.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=o?this.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+s+'"]'):t.eq(s)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+a+'"]').addClass(i.slideDuplicateActiveClass));var r=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===r.length&&(r=t.eq(0)).addClass(i.slideNextClass);var l=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===l.length&&(l=t.eq(-1)).addClass(i.slidePrevClass),i.loop&&(r.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+r.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+r.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),l.hasClass(i.slideDuplicateClass)?n.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):n.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,i,n,s=this.rtlTranslate?this.translate:-this.translate,a=this.slidesGrid,o=this.snapGrid,r=this.params,l=this.activeIndex,c=this.realIndex,u=this.snapIndex,d=e;if(void 0===d){for(var h=0;h<a.length;h+=1)void 0!==a[h+1]?s>=a[h]&&s<a[h+1]-(a[h+1]-a[h])/2?d=h:s>=a[h]&&s<a[h+1]&&(d=h+1):s>=a[h]&&(d=h);r.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}(i=0<=o.indexOf(s)?o.indexOf(s):(t=Math.min(r.slidesPerGroupSkip,d))+Math.floor((d-t)/r.slidesPerGroup))>=o.length&&(i=o.length-1),d!==l?(n=parseInt(this.slides.eq(d).attr("data-swiper-slide-index")||d,10),ae.extend(this,{snapIndex:i,realIndex:n,previousIndex:l,activeIndex:d}),this.emit("activeIndexChange"),this.emit("snapIndexChange"),c!==n&&this.emit("realIndexChange"),(this.initialized||this.params.runCallbacksOnInit)&&this.emit("slideChange")):i!==u&&(this.snapIndex=i,this.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this.params,i=D(e.target).closest("."+t.slideClass)[0],n=!1;if(i)for(var s=0;s<this.slides.length;s+=1)this.slides[s]===i&&(n=!0);if(!i||!n)return this.clickedSlide=void 0,void(this.clickedIndex=void 0);this.clickedSlide=i,this.virtual&&this.params.virtual.enabled?this.clickedIndex=parseInt(D(i).attr("data-swiper-slide-index"),10):this.clickedIndex=D(i).index(),t.slideToClickedSlide&&void 0!==this.clickedIndex&&this.clickedIndex!==this.activeIndex&&this.slideToClickedSlide()}},C={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,i=this.rtlTranslate,n=this.translate,s=this.$wrapperEl;if(t.virtualTranslate)return i?-n:n;if(t.cssMode)return n;var a=ae.getTranslate(s[0],e);return i&&(a=-a),a||0},setTranslate:function(e,t){var i=this.rtlTranslate,n=this.params,s=this.$wrapperEl,a=this.wrapperEl,o=this.progress,r=0,l=0;this.isHorizontal()?r=i?-e:e:l=e,n.roundLengths&&(r=Math.floor(r),l=Math.floor(l)),n.cssMode?a[this.isHorizontal()?"scrollLeft":"scrollTop"]=this.isHorizontal()?-r:-l:n.virtualTranslate||s.transform("translate3d("+r+"px, "+l+"px, 0px)"),this.previousTranslate=this.translate,this.translate=this.isHorizontal()?r:l;var c=this.maxTranslate()-this.minTranslate();(0==c?0:(e-this.minTranslate())/c)!==o&&this.updateProgress(e),this.emit("setTranslate",this.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,n,s){var a;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);var o=this,r=o.params,l=o.wrapperEl;if(o.animating&&r.preventInteractionOnTransition)return!1;var c=o.minTranslate(),u=o.maxTranslate(),d=n&&c<e?c:n&&e<u?u:e;if(o.updateProgress(d),r.cssMode){var h=o.isHorizontal();return 0!==t&&l.scrollTo?l.scrollTo(((a={})[h?"left":"top"]=-d,a.behavior="smooth",a)):l[h?"scrollLeft":"scrollTop"]=-d,!0}return 0===t?(o.setTransition(0),o.setTranslate(d),i&&(o.emit("beforeTransitionStart",t,s),o.emit("transitionEnd"))):(o.setTransition(t),o.setTranslate(d),i&&(o.emit("beforeTransitionStart",t,s),o.emit("transitionStart")),o.animating||(o.animating=!0,o.onTranslateToWrapperTransitionEnd||(o.onTranslateToWrapperTransitionEnd=function(e){o&&!o.destroyed&&e.target===this&&(o.$wrapperEl[0].removeEventListener("transitionend",o.onTranslateToWrapperTransitionEnd),o.$wrapperEl[0].removeEventListener("webkitTransitionEnd",o.onTranslateToWrapperTransitionEnd),o.onTranslateToWrapperTransitionEnd=null,delete o.onTranslateToWrapperTransitionEnd,i&&o.emit("transitionEnd"))}),o.$wrapperEl[0].addEventListener("transitionend",o.onTranslateToWrapperTransitionEnd),o.$wrapperEl[0].addEventListener("webkitTransitionEnd",o.onTranslateToWrapperTransitionEnd))),!0}},S={slideTo:function(e,t,i,n){var s;void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var a=this,o=e;o<0&&(o=0);var r=a.params,l=a.snapGrid,c=a.slidesGrid,u=a.previousIndex,d=a.activeIndex,h=a.rtlTranslate,p=a.wrapperEl;if(a.animating&&r.preventInteractionOnTransition)return!1;var f=Math.min(a.params.slidesPerGroupSkip,o),m=f+Math.floor((o-f)/a.params.slidesPerGroup);m>=l.length&&(m=l.length-1),(d||r.initialSlide||0)===(u||0)&&i&&a.emit("beforeSlideChangeStart");var g,v=-l[m];if(a.updateProgress(v),r.normalizeSlideIndex)for(var y=0;y<c.length;y+=1)-Math.floor(100*v)>=Math.floor(100*c[y])&&(o=y);if(a.initialized&&o!==d){if(!a.allowSlideNext&&v<a.translate&&v<a.minTranslate())return!1;if(!a.allowSlidePrev&&v>a.translate&&v>a.maxTranslate()&&(d||0)!==o)return!1}if(g=d<o?"next":o<d?"prev":"reset",h&&-v===a.translate||!h&&v===a.translate)return a.updateActiveIndex(o),r.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==r.effect&&a.setTranslate(v),"reset"!=g&&(a.transitionStart(i,g),a.transitionEnd(i,g)),!1;if(r.cssMode){var b=a.isHorizontal(),w=-v;return h&&(w=p.scrollWidth-p.offsetWidth-w),0!==t&&p.scrollTo?p.scrollTo(((s={})[b?"left":"top"]=w,s.behavior="smooth",s)):p[b?"scrollLeft":"scrollTop"]=w,!0}return 0===t?(a.setTransition(0),a.setTranslate(v),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,g),a.transitionEnd(i,g)):(a.setTransition(t),a.setTranslate(v),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,n),a.transitionStart(i,g),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(i,g))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var s=e;return this.params.loop&&(s+=this.loopedSlides),this.slideTo(s,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this.params,s=this.animating,a=this.activeIndex<n.slidesPerGroupSkip?1:n.slidesPerGroup;if(n.loop){if(s)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}return this.slideTo(this.activeIndex+a,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this.params,s=this.animating,a=this.snapGrid,o=this.slidesGrid,r=this.rtlTranslate;if(n.loop){if(s)return!1;this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,u=l(r?this.translate:-this.translate),d=a.map(l),h=(o.map(l),a[d.indexOf(u)],a[d.indexOf(u)-1]);return void 0===h&&n.cssMode&&a.forEach(function(e){!h&&e<=u&&(h=e)}),void 0!==h&&(c=o.indexOf(h))<0&&(c=this.activeIndex-1),this.slideTo(c,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);var s,a,o=this.activeIndex,r=Math.min(this.params.slidesPerGroupSkip,o),l=r+Math.floor((o-r)/this.params.slidesPerGroup),c=this.rtlTranslate?this.translate:-this.translate;return c>=this.snapGrid[l]?c-(s=this.snapGrid[l])>(this.snapGrid[l+1]-s)*n&&(o+=this.params.slidesPerGroup):c-(a=this.snapGrid[l-1])<=(this.snapGrid[l]-a)*n&&(o-=this.params.slidesPerGroup),o=Math.max(o,0),o=Math.min(o,this.slidesGrid.length-1),this.slideTo(o,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,n=t.$wrapperEl,s="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,a=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(D(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?a<t.loopedSlides-s/2||a>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ae.nextTick(function(){t.slideTo(a)})):t.slideTo(a):a>t.slides.length-s?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),ae.nextTick(function(){t.slideTo(a)})):t.slideTo(a)}else t.slideTo(a)}},T={loopCreate:function(){var n=this,e=n.params,t=n.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var i=e.slidesPerGroup-s.length%e.slidesPerGroup;if(i!==e.slidesPerGroup){for(var a=0;a<i;a+=1){var o=D(m.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(o)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),n.loopedSlides=Math.ceil(parseFloat(e.loopedSlides||e.slidesPerView,10)),n.loopedSlides+=e.loopAdditionalSlides,n.loopedSlides>s.length&&(n.loopedSlides=s.length);var r=[],l=[];s.each(function(e,t){var i=D(t);e<n.loopedSlides&&l.push(t),e<s.length&&e>=s.length-n.loopedSlides&&r.push(t),i.attr("data-swiper-slide-index",e)});for(var c=0;c<l.length;c+=1)t.append(D(l[c].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var u=r.length-1;0<=u;--u)t.prepend(D(r[u].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){this.emit("beforeLoopFix");var e,t=this.activeIndex,i=this.slides,n=this.loopedSlides,s=this.allowSlidePrev,a=this.allowSlideNext,o=this.snapGrid,r=this.rtlTranslate;this.allowSlidePrev=!0,this.allowSlideNext=!0;var l=-o[t]-this.getTranslate();t<n?(e=i.length-3*n+t,e+=n,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((r?-this.translate:this.translate)-l)):t>=i.length-n&&(e=-i.length+t+n,e+=n,this.slideTo(e,0,!1,!0)&&0!=l&&this.setTranslate((r?-this.translate:this.translate)-l)),this.allowSlidePrev=s,this.allowSlideNext=a,this.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,i=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},k={setGrabCursor:function(e){var t;E.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){E.touch||this.params.watchOverflow&&this.isLocked||this.params.cssMode||(this.el.style.cursor="")}},A={appendSlide:function(e){var t=this.$wrapperEl,i=this.params;if(i.loop&&this.loopDestroy(),"object"==typeof e&&"length"in e)for(var n=0;n<e.length;n+=1)e[n]&&t.append(e[n]);else t.append(e);i.loop&&this.loopCreate(),i.observer&&E.observer||this.update()},prependSlide:function(e){var t=this.params,i=this.$wrapperEl,n=this.activeIndex;t.loop&&this.loopDestroy();var s=n+1;if("object"==typeof e&&"length"in e){for(var a=0;a<e.length;a+=1)e[a]&&i.prepend(e[a]);s=n+e.length}else i.prepend(e);t.loop&&this.loopCreate(),t.observer&&E.observer||this.update(),this.slideTo(s,0,!1)},addSlide:function(e,t){var i=this.$wrapperEl,n=this.params,s=this.activeIndex;n.loop&&(s-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+n.slideClass));var a=this.slides.length;if(e<=0)this.prependSlide(t);else if(a<=e)this.appendSlide(t);else{for(var o=e<s?s+1:s,r=[],l=a-1;e<=l;--l){var c=this.slides.eq(l);c.remove(),r.unshift(c)}if("object"==typeof t&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&i.append(t[u]);o=e<s?s+t.length:s}else i.append(t);for(var d=0;d<r.length;d+=1)i.append(r[d]);n.loop&&this.loopCreate(),n.observer&&E.observer||this.update(),n.loop?this.slideTo(o+this.loopedSlides,0,!1):this.slideTo(o,0,!1)}},removeSlide:function(e){var t=this.params,i=this.$wrapperEl,n=this.activeIndex;t.loop&&(n-=this.loopedSlides,this.loopDestroy(),this.slides=i.children("."+t.slideClass));var s,a=n;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)s=e[o],this.slides[s]&&this.slides.eq(s).remove(),s<a&&--a;a=Math.max(a,0)}else s=e,this.slides[s]&&this.slides.eq(s).remove(),s<a&&--a,a=Math.max(a,0);t.loop&&this.loopCreate(),t.observer&&E.observer||this.update(),t.loop?this.slideTo(a+this.loopedSlides,0,!1):this.slideTo(a,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},M=(n=se.navigator.platform,s=se.navigator.userAgent,o={ios:!1,android:!1,androidChrome:!1,desktop:!1,iphone:!1,ipod:!1,ipad:!1,edge:!1,ie:!1,firefox:!1,macos:!1,windows:!1,cordova:!(!se.cordova&&!se.phonegap),phonegap:!(!se.cordova&&!se.phonegap),electron:!1},r=se.screen.width,c=se.screen.height,u=s.match(/(Android);?[\s\/]+([\d.]+)?/),d=s.match(/(iPad).*OS\s([\d_]+)/),h=s.match(/(iPod)(.*OS\s([\d_]+))?/),p=!d&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f=0<=s.indexOf("MSIE ")||0<=s.indexOf("Trident/"),g=0<=s.indexOf("Edge/"),v=0<=s.indexOf("Gecko/")&&0<=s.indexOf("Firefox/"),y="Win32"===n,b=0<=s.toLowerCase().indexOf("electron"),w="MacIntel"===n,!d&&w&&E.touch&&(1024===r&&1366===c||834===r&&1194===c||834===r&&1112===c||768===r&&1024===c)&&(d=s.match(/(Version)\/([\d.]+)/),w=!1),o.ie=f,o.edge=g,o.firefox=v,u&&!y&&(o.os="android",o.osVersion=u[2],o.android=!0,o.androidChrome=0<=s.toLowerCase().indexOf("chrome")),(d||p||h)&&(o.os="ios",o.ios=!0),p&&!h&&(o.osVersion=p[2].replace(/_/g,"."),o.iphone=!0),d&&(o.osVersion=d[2].replace(/_/g,"."),o.ipad=!0),h&&(o.osVersion=h[3]?h[3].replace(/_/g,"."):null,o.ipod=!0),o.ios&&o.osVersion&&0<=s.indexOf("Version/")&&"10"===o.osVersion.split(".")[0]&&(o.osVersion=s.toLowerCase().split("version/")[1].split(" ")[0]),o.webView=!(!(p||d||h)||!s.match(/.*AppleWebKit(?!.*Safari)/i)&&!se.navigator.standalone)||se.matchMedia&&se.matchMedia("(display-mode: standalone)").matches,o.webview=o.webView,o.standalone=o.webView,o.desktop=!(o.ios||o.android)||b,o.desktop&&(o.electron=b,o.macos=w,o.windows=y,o.macos&&(o.os="macos"),o.windows&&(o.os="windows")),o.pixelRatio=se.devicePixelRatio||1,o);function P(){var e,t,i,n=this.params,s=this.el;s&&0===s.offsetWidth||(n.breakpoints&&this.setBreakpoint(),e=this.allowSlideNext,t=this.allowSlidePrev,i=this.snapGrid,this.allowSlideNext=!0,this.allowSlidePrev=!0,this.updateSize(),this.updateSlides(),this.updateSlidesClasses(),("auto"===n.slidesPerView||1<n.slidesPerView)&&this.isEnd&&!this.params.centeredSlides?this.slideTo(this.slides.length-1,0,!1,!0):this.slideTo(this.activeIndex,0,!1,!0),this.autoplay&&this.autoplay.running&&this.autoplay.paused&&this.autoplay.run(),this.allowSlidePrev=t,this.allowSlideNext=e,this.params.watchOverflow&&i!==this.snapGrid&&this.checkOverflow())}var O=!1;function I(){}var L,$={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},N={update:x,translate:C,transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,n=this.params,s=this.previousIndex;if(!n.cssMode){n.autoHeight&&this.updateAutoHeight();var a=(a=t)||(s<i?"next":i<s?"prev":"reset");if(this.emit("transitionStart"),e&&i!==s){if("reset"===a)return void this.emit("slideResetTransitionStart");this.emit("slideChangeTransitionStart"),"next"===a?this.emit("slideNextTransitionStart"):this.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this.activeIndex,n=this.previousIndex,s=this.params;if(this.animating=!1,!s.cssMode){this.setTransition(0);var a=(a=t)||(n<i?"next":i<n?"prev":"reset");if(this.emit("transitionEnd"),e&&i!==n){if("reset"===a)return void this.emit("slideResetTransitionEnd");this.emit("slideChangeTransitionEnd"),"next"===a?this.emit("slideNextTransitionEnd"):this.emit("slidePrevTransitionEnd")}}}},slide:S,loop:T,grabCursor:k,manipulation:A,events:{attachEvents:function(){var e=this.params,t=this.touchEvents,i=this.el,n=this.wrapperEl;this.onTouchStart=function(e){var t,i,n,s,a,o,r,l,c=this.touchEventsData,u=this.params,d=this.touches;this.animating&&u.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),i=D(t.target),"wrapper"===u.touchEventsTarget&&!i.closest(this.wrapperEl).length||(c.isTouchEvent="touchstart"===t.type,!c.isTouchEvent&&"which"in t&&3===t.which||!c.isTouchEvent&&"button"in t&&0<t.button||c.isTouched&&c.isMoved)||(u.noSwiping&&i.closest(u.noSwipingSelector?u.noSwipingSelector:"."+u.noSwipingClass)[0]?this.allowClick=!0:u.swipeHandler&&!i.closest(u.swipeHandler)[0]||(d.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,d.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY,n=d.currentX,s=d.currentY,a=u.edgeSwipeDetection||u.iOSEdgeSwipeDetection,o=u.edgeSwipeThreshold||u.iOSEdgeSwipeThreshold,a&&(n<=o||n>=se.screen.width-o)||(ae.extend(c,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),d.startX=n,d.startY=s,c.touchStartTime=ae.now(),this.allowClick=!0,this.updateSize(),this.swipeDirection=void 0,0<u.threshold&&(c.allowThresholdMove=!1),"touchstart"!==t.type&&(r=!0,i.is(c.formElements)&&(r=!1),m.activeElement&&D(m.activeElement).is(c.formElements)&&m.activeElement!==i[0]&&m.activeElement.blur(),l=r&&this.allowTouchMove&&u.touchStartPreventDefault,(u.touchStartForcePreventDefault||l)&&t.preventDefault()),this.emit("touchStart",t)))))}.bind(this),this.onTouchMove=function(e){var t=this.touchEventsData,i=this.params,n=this.touches,s=this.rtlTranslate,a=e;if(a.originalEvent&&(a=a.originalEvent),t.isTouched){if(!t.isTouchEvent||"mousemove"!==a.type){var o="touchmove"===a.type&&a.targetTouches&&(a.targetTouches[0]||a.changedTouches[0]),r="touchmove"===a.type?o.pageX:a.pageX,l="touchmove"===a.type?o.pageY:a.pageY;if(a.preventedByNestedSwiper)return n.startX=r,void(n.startY=l);if(!this.allowTouchMove)return this.allowClick=!1,void(t.isTouched&&(ae.extend(n,{startX:r,startY:l,currentX:r,currentY:l}),t.touchStartTime=ae.now()));if(t.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(this.isVertical()){if(l<n.startY&&this.translate<=this.maxTranslate()||l>n.startY&&this.translate>=this.minTranslate())return t.isTouched=!1,void(t.isMoved=!1)}else if(r<n.startX&&this.translate<=this.maxTranslate()||r>n.startX&&this.translate>=this.minTranslate())return;if(t.isTouchEvent&&m.activeElement&&a.target===m.activeElement&&D(a.target).is(t.formElements))return t.isMoved=!0,void(this.allowClick=!1);if(t.allowTouchCallbacks&&this.emit("touchMove",a),!(a.targetTouches&&1<a.targetTouches.length)){n.currentX=r,n.currentY=l;var c,u=n.currentX-n.startX,d=n.currentY-n.startY;if(!(this.params.threshold&&Math.sqrt(Math.pow(u,2)+Math.pow(d,2))<this.params.threshold))if(void 0===t.isScrolling&&(this.isHorizontal()&&n.currentY===n.startY||this.isVertical()&&n.currentX===n.startX?t.isScrolling=!1:25<=u*u+d*d&&(c=180*Math.atan2(Math.abs(d),Math.abs(u))/Math.PI,t.isScrolling=this.isHorizontal()?c>i.touchAngle:90-c>i.touchAngle)),t.isScrolling&&this.emit("touchMoveOpposite",a),void 0===t.startMoving&&(n.currentX===n.startX&&n.currentY===n.startY||(t.startMoving=!0)),t.isScrolling)t.isTouched=!1;else if(t.startMoving){this.allowClick=!1,i.cssMode||a.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&a.stopPropagation(),t.isMoved||(i.loop&&this.loopFix(),t.startTranslate=this.getTranslate(),this.setTransition(0),this.animating&&this.$wrapperEl.trigger("webkitTransitionEnd transitionend"),t.allowMomentumBounce=!1,!i.grabCursor||!0!==this.allowSlideNext&&!0!==this.allowSlidePrev||this.setGrabCursor(!0),this.emit("sliderFirstMove",a)),this.emit("sliderMove",a),t.isMoved=!0;var h=this.isHorizontal()?u:d;n.diff=h,h*=i.touchRatio,s&&(h=-h),this.swipeDirection=0<h?"prev":"next",t.currentTranslate=h+t.startTranslate;var p=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),0<h&&t.currentTranslate>this.minTranslate()?(p=!1,i.resistance&&(t.currentTranslate=this.minTranslate()-1+Math.pow(-this.minTranslate()+t.startTranslate+h,f))):h<0&&t.currentTranslate<this.maxTranslate()&&(p=!1,i.resistance&&(t.currentTranslate=this.maxTranslate()+1-Math.pow(this.maxTranslate()-t.startTranslate-h,f))),p&&(a.preventedByNestedSwiper=!0),!this.allowSlideNext&&"next"===this.swipeDirection&&t.currentTranslate<t.startTranslate&&(t.currentTranslate=t.startTranslate),!this.allowSlidePrev&&"prev"===this.swipeDirection&&t.currentTranslate>t.startTranslate&&(t.currentTranslate=t.startTranslate),0<i.threshold){if(!(Math.abs(h)>i.threshold||t.allowThresholdMove))return void(t.currentTranslate=t.startTranslate);if(!t.allowThresholdMove)return t.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,t.currentTranslate=t.startTranslate,void(n.diff=this.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY)}i.followFinger&&!i.cssMode&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(this.updateActiveIndex(),this.updateSlidesClasses()),i.freeMode&&(0===t.velocities.length&&t.velocities.push({position:n[this.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:n[this.isHorizontal()?"currentX":"currentY"],time:ae.now()})),this.updateProgress(t.currentTranslate),this.setTranslate(t.currentTranslate))}}}}else t.startMoving&&t.isScrolling&&this.emit("touchMoveOpposite",a)}.bind(this),this.onTouchEnd=function(e){var t=this,i=t.touchEventsData,n=t.params,s=t.touches,a=t.rtlTranslate,o=t.$wrapperEl,r=t.slidesGrid,l=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",c),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var u,d,h,p,f,m=ae.now(),g=m-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap click",c),g<300&&m-i.lastClickTime<300&&t.emit("doubleTap doubleClick",c)),i.lastClickTime=ae.now(),ae.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!i.isTouched||!i.isMoved||!t.swipeDirection||0===s.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,u=n.followFinger?a?t.translate:-t.translate:-i.currentTranslate,!n.cssMode)if(n.freeMode){if(u<-t.minTranslate())return void t.slideTo(t.activeIndex);if(u>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){1<i.velocities.length?(d=i.velocities.pop(),h=i.velocities.pop(),p=d.position-h.position,f=d.time-h.time,t.velocity=p/f,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(150<f||300<ae.now()-d.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var v=1e3*n.freeModeMomentumRatio,y=t.velocity*v,b=t.translate+y;a&&(b=-b);var w,x,C,S,T=!1,E=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-E&&(b=t.maxTranslate()-E),w=t.maxTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.maxTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>E&&(b=t.minTranslate()+E),w=t.minTranslate(),T=!0,i.allowMomentumBounce=!0):b=t.minTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(n.freeModeSticky){for(var k,A=0;A<l.length;A+=1)if(l[A]>-b){k=A;break}b=-(Math.abs(l[k]-b)<Math.abs(l[k-1]-b)||"next"===t.swipeDirection?l[k]:l[k-1])}if(x&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)v=a?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),n.freeModeSticky&&(v=(C=Math.abs((a?-b:b)-t.translate))<(S=t.slidesSizesGrid[t.activeIndex])?n.speed:C<2*S?1.5*n.speed:2.5*n.speed);else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&T?(t.updateProgress(w),t.setTransition(v),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,o.transitionEnd(function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),setTimeout(function(){t.setTranslate(w),o.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(b),t.setTransition(v),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,o.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||g>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var M=0,P=t.slidesSizesGrid[0],D=0;D<r.length;D+=D<n.slidesPerGroupSkip?1:n.slidesPerGroup){var O=D<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==r[D+O]?u>=r[D]&&u<r[D+O]&&(P=r[(M=D)+O]-r[D]):u>=r[D]&&(M=D,P=r[r.length-1]-r[r.length-2])}var I=(u-r[M])/P,L=M<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(g>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(I>=n.longSwipesRatio?t.slideTo(M+L):t.slideTo(M)),"prev"===t.swipeDirection&&(I>1-n.longSwipesRatio?t.slideTo(M+L):t.slideTo(M))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||c.target!==t.navigation.nextEl&&c.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(M+L),"prev"===t.swipeDirection&&t.slideTo(M)):c.target===t.navigation.nextEl?t.slideTo(M+L):t.slideTo(M)}}}.bind(this),e.cssMode&&(this.onScroll=function(){var e=this.wrapperEl,t=this.rtlTranslate;this.previousTranslate=this.translate,this.isHorizontal()?this.translate=t?e.scrollWidth-e.offsetWidth-e.scrollLeft:-e.scrollLeft:this.translate=-e.scrollTop,-0===this.translate&&(this.translate=0),this.updateActiveIndex(),this.updateSlidesClasses();var i=this.maxTranslate()-this.minTranslate();(0==i?0:(this.translate-this.minTranslate())/i)!==this.progress&&this.updateProgress(t?-this.translate:this.translate),this.emit("setTranslate",this.translate,!1)}.bind(this)),this.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(this);var s,a=!!e.nested;!E.touch&&E.pointerEvents?(i.addEventListener(t.start,this.onTouchStart,!1),m.addEventListener(t.move,this.onTouchMove,a),m.addEventListener(t.end,this.onTouchEnd,!1)):(E.touch&&(s=!("touchstart"!==t.start||!E.passiveListener||!e.passiveListeners)&&{passive:!0,capture:!1},i.addEventListener(t.start,this.onTouchStart,s),i.addEventListener(t.move,this.onTouchMove,E.passiveListener?{passive:!1,capture:a}:a),i.addEventListener(t.end,this.onTouchEnd,s),t.cancel&&i.addEventListener(t.cancel,this.onTouchEnd,s),O||(m.addEventListener("touchstart",I),O=!0)),(e.simulateTouch&&!M.ios&&!M.android||e.simulateTouch&&!E.touch&&M.ios)&&(i.addEventListener("mousedown",this.onTouchStart,!1),m.addEventListener("mousemove",this.onTouchMove,a),m.addEventListener("mouseup",this.onTouchEnd,!1))),(e.preventClicks||e.preventClicksPropagation)&&i.addEventListener("click",this.onClick,!0),e.cssMode&&n.addEventListener("scroll",this.onScroll),e.updateOnWindowResize?this.on(M.ios||M.android?"resize orientationchange observerUpdate":"resize observerUpdate",P,!0):this.on("observerUpdate",P,!0)},detachEvents:function(){var e,t=this.params,i=this.touchEvents,n=this.el,s=this.wrapperEl,a=!!t.nested;!E.touch&&E.pointerEvents?(n.removeEventListener(i.start,this.onTouchStart,!1),m.removeEventListener(i.move,this.onTouchMove,a),m.removeEventListener(i.end,this.onTouchEnd,!1)):(E.touch&&(e=!("onTouchStart"!==i.start||!E.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.removeEventListener(i.start,this.onTouchStart,e),n.removeEventListener(i.move,this.onTouchMove,a),n.removeEventListener(i.end,this.onTouchEnd,e),i.cancel&&n.removeEventListener(i.cancel,this.onTouchEnd,e)),(t.simulateTouch&&!M.ios&&!M.android||t.simulateTouch&&!E.touch&&M.ios)&&(n.removeEventListener("mousedown",this.onTouchStart,!1),m.removeEventListener("mousemove",this.onTouchMove,a),m.removeEventListener("mouseup",this.onTouchEnd,!1))),(t.preventClicks||t.preventClicksPropagation)&&n.removeEventListener("click",this.onClick,!0),t.cssMode&&s.removeEventListener("scroll",this.onScroll),this.off(M.ios||M.android?"resize orientationchange observerUpdate":"resize observerUpdate",P)}},breakpoints:{setBreakpoint:function(){var e=this.activeIndex,t=this.initialized,i=this.loopedSlides;void 0===i&&(i=0);var n,s,a,o,r,l,c,u=this.params,d=this.$el,h=u.breakpoints;!h||h&&0===Object.keys(h).length||(n=this.getBreakpoint(h))&&this.currentBreakpoint!==n&&((s=n in h?h[n]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(e){var t=s[e];void 0!==t&&(s[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),a=s||this.originalParams,o=1<u.slidesPerColumn,r=1<a.slidesPerColumn,o&&!r?d.removeClass(u.containerModifierClass+"multirow "+u.containerModifierClass+"multirow-column"):!o&&r&&(d.addClass(u.containerModifierClass+"multirow"),"column"===a.slidesPerColumnFill&&d.addClass(u.containerModifierClass+"multirow-column")),l=a.direction&&a.direction!==u.direction,c=u.loop&&(a.slidesPerView!==u.slidesPerView||l),l&&t&&this.changeDirection(),ae.extend(this.params,a),ae.extend(this,{allowTouchMove:this.params.allowTouchMove,allowSlideNext:this.params.allowSlideNext,allowSlidePrev:this.params.allowSlidePrev}),this.currentBreakpoint=n,c&&t&&(this.loopDestroy(),this.loopCreate(),this.updateSlides(),this.slideTo(e-i+this.loopedSlides,0,!1)),this.emit("breakpoint",a))},getBreakpoint:function(e){if(e){var t=!1,i=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:se.innerHeight*t,point:e}});i.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var n=0;n<i.length;n+=1){var s=i[n],a=s.point;s.value<=se.innerWidth&&(t=a)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this.params,t=this.isLocked,i=0<this.slides.length&&e.slidesOffsetBefore+e.spaceBetween*(this.slides.length-1)+this.slides[0].offsetWidth*this.slides.length;e.slidesOffsetBefore&&e.slidesOffsetAfter&&i?this.isLocked=i<=this.size:this.isLocked=1===this.snapGrid.length,this.allowSlideNext=!this.isLocked,this.allowSlidePrev=!this.isLocked,t!==this.isLocked&&this.emit(this.isLocked?"lock":"unlock"),t&&t!==this.isLocked&&(this.isEnd=!1,this.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,i=this.params,e=this.rtl,n=this.$el,s=[];s.push("initialized"),s.push(i.direction),i.freeMode&&s.push("free-mode"),i.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<i.slidesPerColumn&&(s.push("multirow"),"column"===i.slidesPerColumnFill&&s.push("multirow-column")),M.android&&s.push("android"),M.ios&&s.push("ios"),i.cssMode&&s.push("css-mode"),s.forEach(function(e){t.push(i.containerModifierClass+e)}),n.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,i,n,s,a){var o;function r(){a&&a()}(!e.complete||!s)&&t?((o=new se.Image).onload=r,o.onerror=r,n&&(o.sizes=n),i&&(o.srcset=i),t&&(o.src=t)):r()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},z={},j=function(d){function h(){for(var e,s,t=[],i=arguments.length;i--;)t[i]=arguments[i];s=(s=1===t.length&&t[0].constructor&&t[0].constructor===Object?t[0]:(e=t[0],t[1]))||{},s=ae.extend({},s),e&&!s.el&&(s.el=e),d.call(this,s),Object.keys(N).forEach(function(t){Object.keys(N[t]).forEach(function(e){h.prototype[e]||(h.prototype[e]=N[t][e])})});var a=this;void 0===a.modules&&(a.modules={}),Object.keys(a.modules).forEach(function(e){var t=a.modules[e];if(t.params){var i=Object.keys(t.params)[0],n=t.params[i];if("object"!=typeof n||null===n)return;if(!(i in s&&"enabled"in n))return;!0===s[i]&&(s[i]={enabled:!0}),"object"!=typeof s[i]||"enabled"in s[i]||(s[i].enabled=!0),s[i]||(s[i]={enabled:!1})}});var n=ae.extend({},$);a.useModulesParams(n),a.params=ae.extend({},n,z,s),a.originalParams=ae.extend({},a.params),a.passedParams=ae.extend({},s);var o,r,l,c=(a.$=D)(a.params.el);if(e=c[0]){if(1<c.length){var u=[];return c.each(function(e,t){var i=ae.extend({},s,{el:t});u.push(new h(i))}),u}return e.swiper=a,c.data("swiper",a),e&&e.shadowRoot&&e.shadowRoot.querySelector?(o=D(e.shadowRoot.querySelector("."+a.params.wrapperClass))).children=function(e){return c.children(e)}:o=c.children("."+a.params.wrapperClass),ae.extend(a,{$el:c,el:e,$wrapperEl:o,wrapperEl:o[0],classNames:[],slides:D(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===a.params.direction},isVertical:function(){return"vertical"===a.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===c.css("direction"),rtlTranslate:"horizontal"===a.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===o.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:a.params.allowSlideNext,allowSlidePrev:a.params.allowSlidePrev,touchEvents:(r=["touchstart","touchmove","touchend","touchcancel"],l=E.pointerEvents?["pointerdown","pointermove","pointerup"]:["mousedown","mousemove","mouseup"],a.touchEventsTouch={start:r[0],move:r[1],end:r[2],cancel:r[3]},a.touchEventsDesktop={start:l[0],move:l[1],end:l[2]},E.touch||!a.params.simulateTouch?a.touchEventsTouch:a.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:ae.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:a.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),a.useModules(),a.params.init&&a.init(),a}}d&&(h.__proto__=d),h.prototype=Object.create(d&&d.prototype);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return(h.prototype.constructor=h).prototype.slidesPerViewDynamic=function(){var e=this.params,t=this.slides,i=this.slidesGrid,n=this.size,s=this.activeIndex,a=1;if(e.centeredSlides){for(var o,r=t[s].swiperSlideSize,l=s+1;l<t.length;l+=1)t[l]&&!o&&(a+=1,(r+=t[l].swiperSlideSize)>n&&(o=!0));for(var c=s-1;0<=c;--c)t[c]&&!o&&(a+=1,(r+=t[c].swiperSlideSize)>n&&(o=!0))}else for(var u=s+1;u<t.length;u+=1)i[u]-i[s]<n&&(a+=1);return a},h.prototype.update=function(){var e,t,i=this;function n(){var e=i.rtlTranslate?-1*i.translate:i.translate,t=Math.min(Math.max(e,i.maxTranslate()),i.minTranslate());i.setTranslate(t),i.updateActiveIndex(),i.updateSlidesClasses()}i&&!i.destroyed&&(e=i.snapGrid,(t=i.params).breakpoints&&i.setBreakpoint(),i.updateSize(),i.updateSlides(),i.updateProgress(),i.updateSlidesClasses(),i.params.freeMode?(n(),i.params.autoHeight&&i.updateAutoHeight()):(("auto"===i.params.slidesPerView||1<i.params.slidesPerView)&&i.isEnd&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0))||n(),t.watchOverflow&&e!==i.snapGrid&&i.checkOverflow(),i.emit("update"))},h.prototype.changeDirection=function(i,e){void 0===e&&(e=!0);var t=this.params.direction;return(i=i||("horizontal"===t?"vertical":"horizontal"))===t||"horizontal"!==i&&"vertical"!==i||(this.$el.removeClass(""+this.params.containerModifierClass+t).addClass(""+this.params.containerModifierClass+i),this.params.direction=i,this.slides.each(function(e,t){"vertical"===i?t.style.width="":t.style.height=""}),this.emit("changeDirection"),e&&this.update()),this},h.prototype.init=function(){this.initialized||(this.emit("beforeInit"),this.params.breakpoints&&this.setBreakpoint(),this.addClasses(),this.params.loop&&this.loopCreate(),this.updateSize(),this.updateSlides(),this.params.watchOverflow&&this.checkOverflow(),this.params.grabCursor&&this.setGrabCursor(),this.params.preloadImages&&this.preloadImages(),this.params.loop?this.slideTo(this.params.initialSlide+this.loopedSlides,0,this.params.runCallbacksOnInit):this.slideTo(this.params.initialSlide,0,this.params.runCallbacksOnInit),this.attachEvents(),this.initialized=!0,this.emit("init"))},h.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i=this,n=i.params,s=i.$el,a=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),n.loop&&i.loopDestroy(),t&&(i.removeClasses(),s.removeAttr("style"),a.removeAttr("style"),o&&o.length&&o.removeClass([n.slideVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,i.$el.data("swiper",null),ae.deleteProps(i)),i.destroyed=!0),null},h.extendDefaults=function(e){ae.extend(z,e)},e.extendedDefaults.get=function(){return z},e.defaults.get=function(){return $},e.Class.get=function(){return d},e.$.get=function(){return D},Object.defineProperties(h,e),h}(e),F={name:"device",proto:{device:M},static:{device:M}},R={name:"support",proto:{support:E},static:{support:E}},B={isEdge:!!se.navigator.userAgent.match(/Edge/g),isSafari:0<=(L=se.navigator.userAgent.toLowerCase()).indexOf("safari")&&L.indexOf("chrome")<0&&L.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(se.navigator.userAgent)},H={name:"browser",proto:{browser:B},static:{browser:B}},q={name:"resize",create:function(){var e=this;ae.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){se.addEventListener("resize",this.resize.resizeHandler),se.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){se.removeEventListener("resize",this.resize.resizeHandler),se.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},_={func:se.MutationObserver||se.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var i=this,n=new _.func(function(e){var t;1!==e.length?(t=function(){i.emit("observerUpdate",e[0])},se.requestAnimationFrame?se.requestAnimationFrame(t):se.setTimeout(t,0)):i.emit("observerUpdate",e[0])});n.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(n)},init:function(){if(E.observer&&this.params.observer){if(this.params.observeParents)for(var e=this.$el.parents(),t=0;t<e.length;t+=1)this.observer.attach(e[t]);this.observer.attach(this.$el[0],{childList:this.params.observeSlideChildren}),this.observer.attach(this.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},X={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){ae.extend(this,{observer:{init:_.init.bind(this),attach:_.attach.bind(this),destroy:_.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},Y={update:function(e){var t=this,i=t.params,n=i.slidesPerView,s=i.slidesPerGroup,a=i.centeredSlides,o=t.params.virtual,r=o.addSlidesBefore,l=o.addSlidesAfter,c=t.virtual,u=c.from,d=c.to,h=c.slides,p=c.slidesGrid,f=c.renderSlide,m=c.offset;t.updateActiveIndex();var g,v=t.activeIndex||0,y=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",b=a?(g=Math.floor(n/2)+s+r,Math.floor(n/2)+s+l):(g=n+(s-1)+r,s+l),w=Math.max((v||0)-b,0),x=Math.min((v||0)+g,h.length-1),C=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function S(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(ae.extend(t.virtual,{from:w,to:x,offset:C,slidesGrid:t.slidesGrid}),u===w&&d===x&&!e)return t.slidesGrid!==p&&C!==m&&t.slides.css(y,C+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:C,from:w,to:x,slides:function(){for(var e=[],t=w;t<=x;t+=1)e.push(h[t]);return e}()}),void S();var T=[],E=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var k=u;k<=d;k+=1)(k<w||x<k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+k+'"]').remove();for(var A=0;A<h.length;A+=1)w<=A&&A<=x&&(void 0===d||e?E.push(A):(d<A&&E.push(A),A<u&&T.push(A)));E.forEach(function(e){t.$wrapperEl.append(f(h[e],e))}),T.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(h[e],e))}),t.$wrapperEl.children(".swiper-slide").css(y,C+"px"),S()},renderSlide:function(e,t){var i=this.params.virtual;if(i.cache&&this.virtual.cache[t])return this.virtual.cache[t];var n=i.renderSlide?D(i.renderSlide.call(this,e,t)):D('<div class="'+this.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return n.attr("data-swiper-slide-index")||n.attr("data-swiper-slide-index",t),i.cache&&(this.virtual.cache[t]=n),n},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var n,s,t=this.activeIndex,i=t+1,a=1;if(Array.isArray(e)){for(var o=0;o<e.length;o+=1)e[o]&&this.virtual.slides.unshift(e[o]);i=t+e.length,a=e.length}else this.virtual.slides.unshift(e);this.params.virtual.cache&&(n=this.virtual.cache,s={},Object.keys(n).forEach(function(e){var t=n[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),s[parseInt(e,10)+a]=t}),this.virtual.cache=s),this.virtual.update(!0),this.slideTo(i,0)},removeSlide:function(e){if(null!=e){var t=this.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)this.virtual.slides.splice(e[i],1),this.params.virtual.cache&&delete this.virtual.cache[e[i]],e[i]<t&&--t,t=Math.max(t,0);else this.virtual.slides.splice(e,1),this.params.virtual.cache&&delete this.virtual.cache[e],e<t&&--t,t=Math.max(t,0);this.virtual.update(!0),this.slideTo(t,0)}},removeAllSlides:function(){this.virtual.slides=[],this.params.virtual.cache&&(this.virtual.cache={}),this.virtual.update(!0),this.slideTo(0,0)}},W={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){ae.extend(this,{virtual:{update:Y.update.bind(this),appendSlide:Y.appendSlide.bind(this),prependSlide:Y.prependSlide.bind(this),removeSlide:Y.removeSlide.bind(this),removeAllSlides:Y.removeAllSlides.bind(this),renderSlide:Y.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e;this.params.virtual.enabled&&(this.classNames.push(this.params.containerModifierClass+"virtual"),e={watchSlidesProgress:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e),this.params.initialSlide||this.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},V={handle:function(e){var t=this.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var n=i.keyCode||i.charCode;if(!this.allowSlideNext&&(this.isHorizontal()&&39===n||this.isVertical()&&40===n||34===n))return!1;if(!this.allowSlidePrev&&(this.isHorizontal()&&37===n||this.isVertical()&&38===n||33===n))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||m.activeElement&&m.activeElement.nodeName&&("input"===m.activeElement.nodeName.toLowerCase()||"textarea"===m.activeElement.nodeName.toLowerCase()))){if(this.params.keyboard.onlyInViewport&&(33===n||34===n||37===n||39===n||38===n||40===n)){var s=!1;if(0<this.$el.parents("."+this.params.slideClass).length&&0===this.$el.parents("."+this.params.slideActiveClass).length)return;var a=se.innerWidth,o=se.innerHeight,r=this.$el.offset();t&&(r.left-=this.$el[0].scrollLeft);for(var l=[[r.left,r.top],[r.left+this.width,r.top],[r.left,r.top+this.height],[r.left+this.width,r.top+this.height]],c=0;c<l.length;c+=1){var u=l[c];0<=u[0]&&u[0]<=a&&0<=u[1]&&u[1]<=o&&(s=!0)}if(!s)return}this.isHorizontal()?(33!==n&&34!==n&&37!==n&&39!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==n&&39!==n||t)&&(33!==n&&37!==n||!t)||this.slideNext(),(33!==n&&37!==n||t)&&(34!==n&&39!==n||!t)||this.slidePrev()):(33!==n&&34!==n&&38!==n&&40!==n||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==n&&40!==n||this.slideNext(),33!==n&&38!==n||this.slidePrev()),this.emit("keyPress",n)}},enable:function(){this.keyboard.enabled||(D(m).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(D(m).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},G={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){ae.extend(this,{keyboard:{enabled:!1,enable:V.enable.bind(this),disable:V.disable.bind(this),handle:V.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}},U={lastScrollTime:ae.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return-1<se.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((t="onwheel"in m)||((e=m.createElement("div")).setAttribute("onwheel","return;"),t="function"==typeof e.onwheel),!t&&m.implementation&&m.implementation.hasFeature&&!0!==m.implementation.hasFeature("","")&&(t=m.implementation.hasFeature("Events.wheel","3.0")),t?"wheel":"mousewheel");var e,t},normalize:function(e){var t=0,i=0,n=0,s=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,s=10*i,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=s,s=0),(n||s)&&e.deltaMode&&(1===e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!i&&(i=s<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,n=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var s=i.$el;if("container"!==i.params.mousewheel.eventsTarged&&(s=D(i.params.mousewheel.eventsTarged)),!i.mouseEntered&&!s[0].contains(t.target)&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,o=i.rtlTranslate?-1:1,r=U.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(r.pixelX)>Math.abs(r.pixelY)))return!0;a=r.pixelX*o}else{if(!(Math.abs(r.pixelY)>Math.abs(r.pixelX)))return!0;a=r.pixelY}else a=Math.abs(r.pixelX)>Math.abs(r.pixelY)?-r.pixelX*o:-r.pixelY;if(0===a)return!0;if(n.invert&&(a=-a),i.params.freeMode){var l={time:ae.now(),delta:Math.abs(a),direction:Math.sign(a)},c=i.mousewheel.lastEventBeforeSnap,u=c&&l.time<c.time+500&&l.delta<=c.delta&&l.direction===c.direction;if(!u){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var d,h,p,f,m=i.getTranslate()+a*n.sensitivity,g=i.isBeginning,v=i.isEnd;if(m>=i.minTranslate()&&(m=i.minTranslate()),m<=i.maxTranslate()&&(m=i.maxTranslate()),i.setTransition(0),i.setTranslate(m),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!g&&i.isBeginning||!v&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky&&(clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0,15<=(d=i.mousewheel.recentWheelEvents).length&&d.shift(),h=d.length?d[d.length-1]:void 0,p=d[0],d.push(l),h&&(l.delta>h.delta||l.direction!==h.direction)?d.splice(0):15<=d.length&&l.time-p.time<500&&1<=p.delta-l.delta&&l.delta<=6&&(f=0<a?.8:.2,i.mousewheel.lastEventBeforeSnap=l,d.splice(0),i.mousewheel.timeout=ae.nextTick(function(){i.slideToClosest(i.params.speed,!0,void 0,f)},0)),i.mousewheel.timeout||(i.mousewheel.timeout=ae.nextTick(function(){i.mousewheel.lastEventBeforeSnap=l,d.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)},500))),u||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),m===i.minTranslate()||m===i.maxTranslate())return!0}}else{var y={time:ae.now(),delta:Math.abs(a),direction:Math.sign(a),raw:e},b=i.mousewheel.recentWheelEvents;2<=b.length&&b.shift();var w=b.length?b[b.length-1]:void 0;if(b.push(y),(!w||y.direction!==w.direction||y.delta>w.delta)&&i.mousewheel.animateSlider(y),i.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){return 6<=e.delta&&ae.now()-this.mousewheel.lastScrollTime<60||(e.direction<0?this.isEnd&&!this.params.loop||this.animating||(this.slideNext(),this.emit("scroll",e.raw)):this.isBeginning&&!this.params.loop||this.animating||(this.slidePrev(),this.emit("scroll",e.raw)),this.mousewheel.lastScrollTime=(new se.Date).getTime(),!1)},releaseScroll:function(e){var t=this.params.mousewheel;if(e.direction<0){if(this.isEnd&&!this.params.loop&&t.releaseOnEdges)return!0}else if(this.isBeginning&&!this.params.loop&&t.releaseOnEdges)return!0;return!1},enable:function(){var e=U.event();if(this.params.cssMode)return this.wrapperEl.removeEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=D(this.params.mousewheel.eventsTarged)),t.on("mouseenter",this.mousewheel.handleMouseEnter),t.on("mouseleave",this.mousewheel.handleMouseLeave),t.on(e,this.mousewheel.handle),this.mousewheel.enabled=!0},disable:function(){var e=U.event();if(this.params.cssMode)return this.wrapperEl.addEventListener(e,this.mousewheel.handle),!0;if(!e)return!1;if(!this.mousewheel.enabled)return!1;var t=this.$el;return"container"!==this.params.mousewheel.eventsTarged&&(t=D(this.params.mousewheel.eventsTarged)),t.off(e,this.mousewheel.handle),!(this.mousewheel.enabled=!1)}},K={update:function(){var e,t,i,n=this.params.navigation;this.params.loop||(t=(e=this.navigation).$nextEl,(i=e.$prevEl)&&0<i.length&&(this.isBeginning?i.addClass(n.disabledClass):i.removeClass(n.disabledClass),i[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)),t&&0<t.length&&(this.isEnd?t.addClass(n.disabledClass):t.removeClass(n.disabledClass),t[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](n.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,i=this.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=D(i.nextEl),this.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===this.$el.find(i.nextEl).length&&(e=this.$el.find(i.nextEl))),i.prevEl&&(t=D(i.prevEl),this.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===this.$el.find(i.prevEl).length&&(t=this.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",this.navigation.onNextClick),t&&0<t.length&&t.on("click",this.navigation.onPrevClick),ae.extend(this.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this.navigation,t=e.$nextEl,i=e.$prevEl;t&&t.length&&(t.off("click",this.navigation.onNextClick),t.removeClass(this.params.navigation.disabledClass)),i&&i.length&&(i.off("click",this.navigation.onPrevClick),i.removeClass(this.params.navigation.disabledClass))}},Q={update:function(){var e=this.rtl,s=this.params.pagination;if(s.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var a,t,i,n,o,r=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,l=this.pagination.$el,c=this.params.loop?Math.ceil((r-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length;if(this.params.loop?((a=Math.ceil((this.activeIndex-this.loopedSlides)/this.params.slidesPerGroup))>r-1-2*this.loopedSlides&&(a-=r-2*this.loopedSlides),c-1<a&&(a-=c),a<0&&"bullets"!==this.params.paginationType&&(a=c+a)):a=void 0!==this.snapIndex?this.snapIndex:this.activeIndex||0,"bullets"===s.type&&this.pagination.bullets&&0<this.pagination.bullets.length){var u,d,h,p,f,m,g=this.pagination.bullets;if(s.dynamicBullets&&(this.pagination.bulletSize=g.eq(0)[this.isHorizontal()?"outerWidth":"outerHeight"](!0),l.css(this.isHorizontal()?"width":"height",this.pagination.bulletSize*(s.dynamicMainBullets+4)+"px"),1<s.dynamicMainBullets&&void 0!==this.previousIndex&&(this.pagination.dynamicBulletIndex+=a-this.previousIndex,this.pagination.dynamicBulletIndex>s.dynamicMainBullets-1?this.pagination.dynamicBulletIndex=s.dynamicMainBullets-1:this.pagination.dynamicBulletIndex<0&&(this.pagination.dynamicBulletIndex=0)),u=a-this.pagination.dynamicBulletIndex,h=((d=u+(Math.min(g.length,s.dynamicMainBullets)-1))+u)/2),g.removeClass(s.bulletActiveClass+" "+s.bulletActiveClass+"-next "+s.bulletActiveClass+"-next-next "+s.bulletActiveClass+"-prev "+s.bulletActiveClass+"-prev-prev "+s.bulletActiveClass+"-main"),1<l.length)g.each(function(e,t){var i=D(t),n=i.index();n===a&&i.addClass(s.bulletActiveClass),s.dynamicBullets&&(u<=n&&n<=d&&i.addClass(s.bulletActiveClass+"-main"),n===u&&i.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),n===d&&i.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next"))});else{var v=g.eq(a),y=v.index();if(v.addClass(s.bulletActiveClass),s.dynamicBullets){for(var b=g.eq(u),w=g.eq(d),x=u;x<=d;x+=1)g.eq(x).addClass(s.bulletActiveClass+"-main");if(this.params.loop)if(y>=g.length-s.dynamicMainBullets){for(var C=s.dynamicMainBullets;0<=C;--C)g.eq(g.length-C).addClass(s.bulletActiveClass+"-main");g.eq(g.length-s.dynamicMainBullets-1).addClass(s.bulletActiveClass+"-prev")}else b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next");else b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next")}}s.dynamicBullets&&(p=Math.min(g.length,s.dynamicMainBullets+4),f=(this.pagination.bulletSize*p-this.pagination.bulletSize)/2-h*this.pagination.bulletSize,m=e?"right":"left",g.css(this.isHorizontal()?m:"top",f+"px"))}"fraction"===s.type&&(l.find("."+s.currentClass).text(s.formatFractionCurrent(a+1)),l.find("."+s.totalClass).text(s.formatFractionTotal(c))),"progressbar"===s.type&&(t=s.progressbarOpposite?this.isHorizontal()?"vertical":"horizontal":this.isHorizontal()?"horizontal":"vertical",i=(a+1)/c,o=n=1,"horizontal"==t?n=i:o=i,l.find("."+s.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+n+") scaleY("+o+")").transition(this.params.speed)),"custom"===s.type&&s.renderCustom?(l.html(s.renderCustom(this,a+1,c)),this.emit("paginationRender",this,l[0])):this.emit("paginationUpdate",this,l[0]),l[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](s.lockClass)}},render:function(){var e=this.params.pagination;if(e.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length){var t=this.virtual&&this.params.virtual.enabled?this.virtual.slides.length:this.slides.length,i=this.pagination.$el,n="";if("bullets"===e.type){for(var s=this.params.loop?Math.ceil((t-2*this.loopedSlides)/this.params.slidesPerGroup):this.snapGrid.length,a=0;a<s;a+=1)e.renderBullet?n+=e.renderBullet.call(this,a,e.bulletClass):n+="<"+e.bulletElement+' class="'+e.bulletClass+'"></'+e.bulletElement+">";i.html(n),this.pagination.bullets=i.find("."+e.bulletClass)}"fraction"===e.type&&(n=e.renderFraction?e.renderFraction.call(this,e.currentClass,e.totalClass):'<span class="'+e.currentClass+'"></span> / <span class="'+e.totalClass+'"></span>',i.html(n)),"progressbar"===e.type&&(n=e.renderProgressbar?e.renderProgressbar.call(this,e.progressbarFillClass):'<span class="'+e.progressbarFillClass+'"></span>',i.html(n)),"custom"!==e.type&&this.emit("paginationRender",this.pagination.$el[0])}},init:function(){var e,i=this,t=i.params.pagination;!t.el||0!==(e=D(t.el)).length&&(i.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1===i.$el.find(t.el).length&&(e=i.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),i.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(e){e.preventDefault();var t=D(this).index()*i.params.slidesPerGroup;i.params.loop&&(t+=i.loopedSlides),i.slideTo(t)}),ae.extend(i.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this.params.pagination;t.el&&this.pagination.el&&this.pagination.$el&&0!==this.pagination.$el.length&&((e=this.pagination.$el).removeClass(t.hiddenClass),e.removeClass(t.modifierClass+t.type),this.pagination.bullets&&this.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&e.off("click","."+t.bulletClass))}},Z={setTranslate:function(){var e,t,i,n,s,a,o,r,l,c;this.params.scrollbar.el&&this.scrollbar.el&&(e=this.scrollbar,t=this.rtlTranslate,i=this.progress,n=e.dragSize,s=e.trackSize,a=e.$dragEl,o=e.$el,r=this.params.scrollbar,c=(s-(l=n))*i,t?0<(c=-c)?(l=n-c,c=0):s<-c+n&&(l=s+c):c<0?(l=n+c,c=0):s<c+n&&(l=s-c),this.isHorizontal()?(a.transform("translate3d("+c+"px, 0, 0)"),a[0].style.width=l+"px"):(a.transform("translate3d(0px, "+c+"px, 0)"),a[0].style.height=l+"px"),r.hide&&(clearTimeout(this.scrollbar.timeout),o[0].style.opacity=1,this.scrollbar.timeout=setTimeout(function(){o[0].style.opacity=0,o.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,i,n,s,a,o;this.params.scrollbar.el&&this.scrollbar.el&&(t=(e=this.scrollbar).$dragEl,i=e.$el,t[0].style.width="",t[0].style.height="",n=this.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,a=(s=this.size/this.virtualSize)*(n/this.size),o="auto"===this.params.scrollbar.dragSize?n*s:parseInt(this.params.scrollbar.dragSize,10),this.isHorizontal()?t[0].style.width=o+"px":t[0].style.height=o+"px",i[0].style.display=1<=s?"none":"",this.params.scrollbar.hide&&(i[0].style.opacity=0),ae.extend(e,{trackSize:n,divider:s,moveDivider:a,dragSize:o}),e.$el[this.params.watchOverflow&&this.isLocked?"addClass":"removeClass"](this.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t=this.scrollbar,i=this.rtlTranslate,n=t.$el,s=t.dragSize,a=t.trackSize,o=t.dragStartPos,r=(t.getPointerPosition(e)-n.offset()[this.isHorizontal()?"left":"top"]-(null!==o?o:s/2))/(a-s);r=Math.max(Math.min(r,1),0),i&&(r=1-r);var l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*r;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart:function(e){var t=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,s=i.$el,a=i.$dragEl;this.scrollbar.isTouched=!0,this.scrollbar.dragStartPos=e.target===a[0]||e.target===a?i.getPointerPosition(e)-e.target.getBoundingClientRect()[this.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),n.transition(100),a.transition(100),i.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),s.transition(0),t.hide&&s.css("opacity",1),this.params.cssMode&&this.$wrapperEl.css("scroll-snap-type","none"),this.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,i=this.$wrapperEl,n=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),i.transition(0),n.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this.params.scrollbar,i=this.scrollbar,n=this.$wrapperEl,s=i.$el;this.scrollbar.isTouched&&(this.scrollbar.isTouched=!1,this.params.cssMode&&(this.$wrapperEl.css("scroll-snap-type",""),n.transition("")),t.hide&&(clearTimeout(this.scrollbar.dragTimeout),this.scrollbar.dragTimeout=ae.nextTick(function(){s.css("opacity",0),s.transition(400)},1e3)),this.emit("scrollbarDragEnd",e),t.snapOnRelease&&this.slideToClosest())},enableDraggable:function(){var e,t,i,n,s,a,o;this.params.scrollbar.el&&(e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,n=this.params,s=e.$el[0],a=!(!E.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},o=!(!E.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},E.touch?(s.addEventListener(t.start,this.scrollbar.onDragStart,a),s.addEventListener(t.move,this.scrollbar.onDragMove,a),s.addEventListener(t.end,this.scrollbar.onDragEnd,o)):(s.addEventListener(i.start,this.scrollbar.onDragStart,a),m.addEventListener(i.move,this.scrollbar.onDragMove,a),m.addEventListener(i.end,this.scrollbar.onDragEnd,o)))},disableDraggable:function(){var e,t,i,n,s,a,o;this.params.scrollbar.el&&(e=this.scrollbar,t=this.touchEventsTouch,i=this.touchEventsDesktop,n=this.params,s=e.$el[0],a=!(!E.passiveListener||!n.passiveListeners)&&{passive:!1,capture:!1},o=!(!E.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},E.touch?(s.removeEventListener(t.start,this.scrollbar.onDragStart,a),s.removeEventListener(t.move,this.scrollbar.onDragMove,a),s.removeEventListener(t.end,this.scrollbar.onDragEnd,o)):(s.removeEventListener(i.start,this.scrollbar.onDragStart,a),m.removeEventListener(i.move,this.scrollbar.onDragMove,a),m.removeEventListener(i.end,this.scrollbar.onDragEnd,o)))},init:function(){var e,t,i,n,s;this.params.scrollbar.el&&(e=this.scrollbar,t=this.$el,n=D((i=this.params.scrollbar).el),this.params.uniqueNavElements&&"string"==typeof i.el&&1<n.length&&1===t.find(i.el).length&&(n=t.find(i.el)),0===(s=n.find("."+this.params.scrollbar.dragClass)).length&&(s=D('<div class="'+this.params.scrollbar.dragClass+'"></div>'),n.append(s)),ae.extend(e,{$el:n,el:n[0],$dragEl:s,dragEl:s[0]}),i.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},J={setTransform:function(e,t){var i,n,s=this.rtl,a=D(e),o=s?-1:1,r=a.attr("data-swiper-parallax")||"0",l=a.attr("data-swiper-parallax-x"),c=a.attr("data-swiper-parallax-y"),u=a.attr("data-swiper-parallax-scale"),d=a.attr("data-swiper-parallax-opacity");l||c?(l=l||"0",c=c||"0"):this.isHorizontal()?(l=r,c="0"):(c=r,l="0"),l=0<=l.indexOf("%")?parseInt(l,10)*t*o+"%":l*t*o+"px",c=0<=c.indexOf("%")?parseInt(c,10)*t+"%":c*t+"px",null!=d&&(i=d-(d-1)*(1-Math.abs(t)),a[0].style.opacity=i),null==u?a.transform("translate3d("+l+", "+c+", 0px)"):(n=u-(u-1)*(1-Math.abs(t)),a.transform("translate3d("+l+", "+c+", 0px) scale("+n+")"))},setTranslate:function(){var n=this,e=n.$el,t=n.slides,s=n.progress,a=n.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){n.parallax.setTransform(t,s)}),t.each(function(e,t){var i=t.progress;1<n.params.slidesPerGroup&&"auto"!==n.params.slidesPerView&&(i+=Math.ceil(e/2)-s*(a.length-1)),i=Math.min(Math.max(i,-1),1),D(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){n.parallax.setTransform(t,i)})})},setTransition:function(s){void 0===s&&(s=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var i=D(t),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||s;0===s&&(n=0),i.transition(n)})}},ee={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(s-i,2))},onGestureStart:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!E.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,n.scaleStart=ee.getDistanceBetweenTouches(e)}n.$slideEl&&n.$slideEl.length||(n.$slideEl=D(e.target).closest("."+this.params.slideClass),0===n.$slideEl.length&&(n.$slideEl=this.slides.eq(this.activeIndex)),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+t.containerClass),n.maxRatio=n.$imageWrapEl.attr("data-swiper-zoom")||t.maxRatio,0!==n.$imageWrapEl.length)?(n.$imageEl&&n.$imageEl.transition(0),this.zoom.isScaling=!0):n.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!E.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,n.scaleMove=ee.getDistanceBetweenTouches(e)}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=E.gestures?e.scale*i.currentScale:n.scaleMove/n.scaleStart*i.currentScale,i.scale>n.maxRatio&&(i.scale=n.maxRatio-1+Math.pow(i.scale-n.maxRatio+1,.5)),i.scale<t.minRatio&&(i.scale=t.minRatio+1-Math.pow(t.minRatio-i.scale+1,.5)),n.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,i=this.zoom,n=i.gesture;if(!E.gestures){if(!i.fakeGestureTouched||!i.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!M.android)return;i.fakeGestureTouched=!1,i.fakeGestureMoved=!1}n.$imageEl&&0!==n.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,n.maxRatio),t.minRatio),n.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+i.scale+")"),i.currentScale=i.scale,i.isScaling=!1,1===i.scale&&(n.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,i=t.gesture,n=t.image;i.$imageEl&&0!==i.$imageEl.length&&(n.isTouched||(M.android&&e.preventDefault(),n.isTouched=!0,n.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,i=t.gesture,n=t.image,s=t.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(this.allowClick=!1,n.isTouched&&i.$slideEl)){n.isMoved||(n.width=i.$imageEl[0].offsetWidth,n.height=i.$imageEl[0].offsetHeight,n.startX=ae.getTranslate(i.$imageWrapEl[0],"x")||0,n.startY=ae.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),this.rtl&&(n.startX=-n.startX,n.startY=-n.startY));var a=n.width*t.scale,o=n.height*t.scale;if(!(a<i.slideWidth&&o<i.slideHeight)){if(n.minX=Math.min(i.slideWidth/2-a/2,0),n.maxX=-n.minX,n.minY=Math.min(i.slideHeight/2-o/2,0),n.maxY=-n.minY,n.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,n.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!n.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(n.minX)===Math.floor(n.startX)&&n.touchesCurrent.x<n.touchesStart.x||Math.floor(n.maxX)===Math.floor(n.startX)&&n.touchesCurrent.x>n.touchesStart.x))return void(n.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(n.minY)===Math.floor(n.startY)&&n.touchesCurrent.y<n.touchesStart.y||Math.floor(n.maxY)===Math.floor(n.startY)&&n.touchesCurrent.y>n.touchesStart.y))return void(n.isTouched=!1)}e.preventDefault(),e.stopPropagation(),n.isMoved=!0,n.currentX=n.touchesCurrent.x-n.touchesStart.x+n.startX,n.currentY=n.touchesCurrent.y-n.touchesStart.y+n.startY,n.currentX<n.minX&&(n.currentX=n.minX+1-Math.pow(n.minX-n.currentX+1,.8)),n.currentX>n.maxX&&(n.currentX=n.maxX-1+Math.pow(n.currentX-n.maxX+1,.8)),n.currentY<n.minY&&(n.currentY=n.minY+1-Math.pow(n.minY-n.currentY+1,.8)),n.currentY>n.maxY&&(n.currentY=n.maxY-1+Math.pow(n.currentY-n.maxY+1,.8)),s.prevPositionX||(s.prevPositionX=n.touchesCurrent.x),s.prevPositionY||(s.prevPositionY=n.touchesCurrent.y),s.prevTime||(s.prevTime=Date.now()),s.x=(n.touchesCurrent.x-s.prevPositionX)/(Date.now()-s.prevTime)/2,s.y=(n.touchesCurrent.y-s.prevPositionY)/(Date.now()-s.prevTime)/2,Math.abs(n.touchesCurrent.x-s.prevPositionX)<2&&(s.x=0),Math.abs(n.touchesCurrent.y-s.prevPositionY)<2&&(s.y=0),s.prevPositionX=n.touchesCurrent.x,s.prevPositionY=n.touchesCurrent.y,s.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var s=300,a=300,o=n.x*s,r=i.currentX+o,l=n.y*a,c=i.currentY+l;0!==n.x&&(s=Math.abs((r-i.currentX)/n.x)),0!==n.y&&(a=Math.abs((c-i.currentY)/n.y));var u=Math.max(s,a);i.currentX=r,i.currentY=c;var d=i.width*e.scale,h=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-d/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(u).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,n,s,a,o,r,l,c,u,d,h,p,f,m,g,v=this.zoom,y=this.params.zoom,b=v.gesture,w=v.image;b.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?b.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):b.$slideEl=this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),b.$imageWrapEl=b.$imageEl.parent("."+y.containerClass)),b.$imageEl&&0!==b.$imageEl.length&&(b.$slideEl.addClass(""+y.zoomedSlideClass),i=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),v.scale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,v.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(m=b.$slideEl[0].offsetWidth,g=b.$slideEl[0].offsetHeight,n=b.$slideEl.offset().left+m/2-t,s=b.$slideEl.offset().top+g/2-i,r=b.$imageEl[0].offsetWidth,l=b.$imageEl[0].offsetHeight,c=r*v.scale,u=l*v.scale,p=-(d=Math.min(m/2-c/2,0)),f=-(h=Math.min(g/2-u/2,0)),(a=n*v.scale)<d&&(a=d),p<a&&(a=p),(o=s*v.scale)<h&&(o=h),f<o&&(o=f)):o=a=0,b.$imageWrapEl.transition(300).transform("translate3d("+a+"px, "+o+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+v.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,i=e.gesture;i.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?i.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):i.$slideEl=this.slides.eq(this.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+t.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(e.scale=1,e.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+t.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e,t,i,n=this.zoom;n.enabled||(n.enabled=!0,e=!("touchstart"!==this.touchEvents.start||!E.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},t=!E.passiveListener||{passive:!1,capture:!0},i="."+this.params.slideClass,E.gestures?(this.$wrapperEl.on("gesturestart",i,n.onGestureStart,e),this.$wrapperEl.on("gesturechange",i,n.onGestureChange,e),this.$wrapperEl.on("gestureend",i,n.onGestureEnd,e)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.on(this.touchEvents.start,i,n.onGestureStart,e),this.$wrapperEl.on(this.touchEvents.move,i,n.onGestureChange,t),this.$wrapperEl.on(this.touchEvents.end,i,n.onGestureEnd,e),this.touchEvents.cancel&&this.$wrapperEl.on(this.touchEvents.cancel,i,n.onGestureEnd,e)),this.$wrapperEl.on(this.touchEvents.move,"."+this.params.zoom.containerClass,n.onTouchMove,t))},disable:function(){var e,t,i,n=this.zoom;n.enabled&&(this.zoom.enabled=!1,e=!("touchstart"!==this.touchEvents.start||!E.passiveListener||!this.params.passiveListeners)&&{passive:!0,capture:!1},t=!E.passiveListener||{passive:!1,capture:!0},i="."+this.params.slideClass,E.gestures?(this.$wrapperEl.off("gesturestart",i,n.onGestureStart,e),this.$wrapperEl.off("gesturechange",i,n.onGestureChange,e),this.$wrapperEl.off("gestureend",i,n.onGestureEnd,e)):"touchstart"===this.touchEvents.start&&(this.$wrapperEl.off(this.touchEvents.start,i,n.onGestureStart,e),this.$wrapperEl.off(this.touchEvents.move,i,n.onGestureChange,t),this.$wrapperEl.off(this.touchEvents.end,i,n.onGestureEnd,e),this.touchEvents.cancel&&this.$wrapperEl.off(this.touchEvents.cancel,i,n.onGestureEnd,e)),this.$wrapperEl.off(this.touchEvents.move,"."+this.params.zoom.containerClass,n.onTouchMove,t))}},te={loadInSlide:function(e,l){void 0===l&&(l=!0);var c,t,u=this,d=u.params.lazy;void 0!==e&&0!==u.slides.length&&(t=(c=u.virtual&&u.params.virtual.enabled?u.$wrapperEl.children("."+u.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):u.slides.eq(e)).find("."+d.elementClass+":not(."+d.loadedClass+"):not(."+d.loadingClass+")"),!c.hasClass(d.elementClass)||c.hasClass(d.loadedClass)||c.hasClass(d.loadingClass)||(t=t.add(c[0])),0!==t.length&&t.each(function(e,t){var n=D(t);n.addClass(d.loadingClass);var s=n.attr("data-background"),a=n.attr("data-src"),o=n.attr("data-srcset"),r=n.attr("data-sizes");u.loadImage(n[0],a||s,o,r,!1,function(){var e,t,i;null==u||!u||u&&!u.params||u.destroyed||(s?(n.css("background-image",'url("'+s+'")'),n.removeAttr("data-background")):(o&&(n.attr("srcset",o),n.removeAttr("data-srcset")),r&&(n.attr("sizes",r),n.removeAttr("data-sizes")),a&&(n.attr("src",a),n.removeAttr("data-src"))),n.addClass(d.loadedClass).removeClass(d.loadingClass),c.find("."+d.preloaderClass).remove(),u.params.loop&&l&&(e=c.attr("data-swiper-slide-index"),c.hasClass(u.params.slideDuplicateClass)?(t=u.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+u.params.slideDuplicateClass+")"),u.lazy.loadInSlide(t.index(),!1)):(i=u.$wrapperEl.children("."+u.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]'),u.lazy.loadInSlide(i.index(),!1))),u.emit("lazyImageReady",c[0],n[0]),u.params.autoHeight&&u.updateAutoHeight())}),u.emit("lazyImageLoad",c[0],n[0])}))},load:function(){var n=this,t=n.$wrapperEl,i=n.params,s=n.slides,e=n.activeIndex,a=n.virtual&&i.virtual.enabled,o=i.lazy,r=i.slidesPerView;function l(e){if(a){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function c(e){return a?D(e).attr("data-swiper-slide-index"):D(e).index()}if("auto"===r&&(r=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e,t){var i=a?D(t).attr("data-swiper-slide-index"):D(t).index();n.lazy.loadInSlide(i)});else if(1<r)for(var u=e;u<e+r;u+=1)l(u)&&n.lazy.loadInSlide(u);else n.lazy.loadInSlide(e);if(o.loadPrevNext)if(1<r||o.loadPrevNextAmount&&1<o.loadPrevNextAmount){for(var d=o.loadPrevNextAmount,h=r,p=Math.min(e+h+Math.max(d,h),s.length),f=Math.max(e-Math.max(h,d),0),m=e+r;m<p;m+=1)l(m)&&n.lazy.loadInSlide(m);for(var g=f;g<e;g+=1)l(g)&&n.lazy.loadInSlide(g)}else{var v=t.children("."+i.slideNextClass);0<v.length&&n.lazy.loadInSlide(c(v));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(c(y))}}},ie={LinearSpline:function(e,t){var i,n,s,a,o;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(o=function(e,t){for(n=-1,i=e.length;1<i-n;)e[s=i+n>>1]<=t?n=s:i=s;return i}(this.x,e),a=o-1,(e-this.x[a])*(this.y[o]-this.y[a])/(this.x[o]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new ie.LinearSpline(this.slidesGrid,e.slidesGrid):new ie.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,n,s=this,a=s.controller.control;function o(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),n=-s.controller.spline.interpolate(-t)),n&&"container"!==s.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),n=(t-s.minTranslate())*i+e.minTranslate()),s.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var r=0;r<a.length;r+=1)a[r]!==t&&a[r]instanceof j&&o(a[r]);else a instanceof j&&t!==a&&o(a)},setTransition:function(t,e){var i,n=this,s=n.controller.control;function a(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.params.autoHeight&&ae.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof j&&a(s[i]);else s instanceof j&&e!==s&&a(s)}},ne={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t,i=this.params.a11y;13===e.keyCode&&(t=D(e.target),this.navigation&&this.navigation.$nextEl&&t.is(this.navigation.$nextEl)&&(this.isEnd&&!this.params.loop||this.slideNext(),this.isEnd?this.a11y.notify(i.lastSlideMessage):this.a11y.notify(i.nextSlideMessage)),this.navigation&&this.navigation.$prevEl&&t.is(this.navigation.$prevEl)&&(this.isBeginning&&!this.params.loop||this.slidePrev(),this.isBeginning?this.a11y.notify(i.firstSlideMessage):this.a11y.notify(i.prevSlideMessage)),this.pagination&&t.is("."+this.params.pagination.bulletClass)&&t[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,i;!this.params.loop&&this.navigation&&(t=(e=this.navigation).$nextEl,(i=e.$prevEl)&&0<i.length&&(this.isBeginning?this.a11y.disableEl(i):this.a11y.enableEl(i)),t&&0<t.length&&(this.isEnd?this.a11y.disableEl(t):this.a11y.enableEl(t)))},updatePagination:function(){var n=this,s=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e,t){var i=D(t);n.a11y.makeElFocusable(i),n.a11y.addElRole(i,"button"),n.a11y.addElLabel(i,s.paginationBulletMessage.replace(/\{\{index\}\}/,i.index()+1))})},init:function(){this.$el.append(this.a11y.liveRegion);var e,t,i=this.params.a11y;this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&(this.a11y.makeElFocusable(e),this.a11y.addElRole(e,"button"),this.a11y.addElLabel(e,i.nextSlideMessage),e.on("keydown",this.a11y.onEnterKey)),t&&(this.a11y.makeElFocusable(t),this.a11y.addElRole(t,"button"),this.a11y.addElLabel(t,i.prevSlideMessage),t.on("keydown",this.a11y.onEnterKey)),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.on("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)},destroy:function(){var e,t;this.a11y.liveRegion&&0<this.a11y.liveRegion.length&&this.a11y.liveRegion.remove(),this.navigation&&this.navigation.$nextEl&&(e=this.navigation.$nextEl),this.navigation&&this.navigation.$prevEl&&(t=this.navigation.$prevEl),e&&e.off("keydown",this.a11y.onEnterKey),t&&t.off("keydown",this.a11y.onEnterKey),this.pagination&&this.params.pagination.clickable&&this.pagination.bullets&&this.pagination.bullets.length&&this.pagination.$el.off("keydown","."+this.params.pagination.bulletClass,this.a11y.onEnterKey)}},oe={init:function(){if(this.params.history){if(!se.history||!se.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var e=this.history;e.initialized=!0,e.paths=oe.getPathValues(),(e.paths.key||e.paths.value)&&(e.scrollToSlide(0,e.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||se.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||se.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=oe.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=se.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){var i,n,s;this.history.initialized&&this.params.history.enabled&&(i=this.slides.eq(t),n=oe.slugify(i.attr("data-history")),se.location.pathname.includes(e)||(n=e+"/"+n),(s=se.history.state)&&s.value===n||(this.params.history.replaceState?se.history.replaceState({value:n},null,n):se.history.pushState({value:n},null,n)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){if(t)for(var n=0,s=this.slides.length;n<s;n+=1){var a,o=this.slides.eq(n);oe.slugify(o.attr("data-history"))!==t||o.hasClass(this.params.slideDuplicateClass)||(a=o.index(),this.slideTo(a,e,i))}else this.slideTo(0,e,i)}},re={onHashCange:function(){var e=m.location.hash.replace("#","");if(e!==this.slides.eq(this.activeIndex).attr("data-hash")){var t=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+e+'"]').index();if(void 0===t)return;this.slideTo(t)}},setHash:function(){var e,t;this.hashNavigation.initialized&&this.params.hashNavigation.enabled&&(this.params.hashNavigation.replaceState&&se.history&&se.history.replaceState?se.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""):(t=(e=this.slides.eq(this.activeIndex)).attr("data-hash")||e.attr("data-history"),m.location.hash=t||""))},init:function(){if(!(!this.params.hashNavigation.enabled||this.params.history&&this.params.history.enabled)){this.hashNavigation.initialized=!0;var e=m.location.hash.replace("#","");if(e)for(var t=0,i=this.slides.length;t<i;t+=1){var n,s=this.slides.eq(t);(s.attr("data-hash")||s.attr("data-history"))!==e||s.hasClass(this.params.slideDuplicateClass)||(n=s.index(),this.slideTo(n,0,this.params.runCallbacksOnInit,!0))}this.params.hashNavigation.watchState&&D(se).on("hashchange",this.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&D(se).off("hashchange",this.hashNavigation.onHashCange)}},le={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=ae.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},i)},start:function(){return void 0===this.autoplay.timeout&&!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0)},stop:function(){return!!this.autoplay.running&&void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0)},pause:function(e){this.autoplay.running&&(this.autoplay.paused||(this.autoplay.timeout&&clearTimeout(this.autoplay.timeout),this.autoplay.paused=!0,0!==e&&this.params.autoplay.waitForTransition?(this.$wrapperEl[0].addEventListener("transitionend",this.autoplay.onTransitionEnd),this.$wrapperEl[0].addEventListener("webkitTransitionEnd",this.autoplay.onTransitionEnd)):(this.autoplay.paused=!1,this.autoplay.run())))}},ce={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var i=this.slides.eq(t),n=-i[0].swiperSlideOffset;this.params.virtualTranslate||(n-=this.translate);var s=0;this.isHorizontal()||(s=n,n=0);var a=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:a}).transform("translate3d("+n+"px, "+s+"px, 0px)")}},setTransition:function(e){var i,n=this,t=n.slides,s=n.$wrapperEl;t.transition(e),n.params.virtualTranslate&&0!==e&&(i=!1,t.transitionEnd(function(){if(!i&&n&&!n.destroyed){i=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},ue={setTranslate:function(){var e,t=this.$el,i=this.$wrapperEl,n=this.slides,s=this.width,a=this.height,o=this.rtlTranslate,r=this.size,l=this.params.cubeEffect,c=this.isHorizontal(),u=this.virtual&&this.params.virtual.enabled,d=0;l.shadow&&(c?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=D('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:s+"px"})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=D('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var h,p,f,m,g,v=0;v<n.length;v+=1){var y=n.eq(v),b=v;u&&(b=parseInt(y.attr("data-swiper-slide-index"),10));var w=90*b,x=Math.floor(w/360);o&&(w=-w,x=Math.floor(-w/360));var C=Math.max(Math.min(y[0].progress,1),-1),S=0,T=0,E=0;b%4==0?(S=4*-x*r,E=0):(b-1)%4==0?(S=0,E=4*-x*r):(b-2)%4==0?(S=r+4*x*r,E=r):(b-3)%4==0&&(S=-r,E=3*r+4*r*x),o&&(S=-S),c||(T=S,S=0);var k,A,M="rotateX("+(c?0:-w)+"deg) rotateY("+(c?w:0)+"deg) translate3d("+S+"px, "+T+"px, "+E+"px)";C<=1&&-1<C&&(d=o?90*-b-90*C:90*b+90*C),y.transform(M),l.slideShadows&&(k=c?y.find(".swiper-slide-shadow-left"):y.find(".swiper-slide-shadow-top"),A=c?y.find(".swiper-slide-shadow-right"):y.find(".swiper-slide-shadow-bottom"),0===k.length&&(k=D('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),y.append(k)),0===A.length&&(A=D('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),y.append(A)),k.length&&(k[0].style.opacity=Math.max(-C,0)),A.length&&(A[0].style.opacity=Math.max(C,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+r/2+"px","-moz-transform-origin":"50% 50% -"+r/2+"px","-ms-transform-origin":"50% 50% -"+r/2+"px","transform-origin":"50% 50% -"+r/2+"px"}),l.shadow&&(c?e.transform("translate3d(0px, "+(s/2+l.shadowOffset)+"px, "+-s/2+"px) rotateX(90deg) rotateZ(0deg) scale("+l.shadowScale+")"):(h=Math.abs(d)-90*Math.floor(Math.abs(d)/90),p=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),f=l.shadowScale,m=l.shadowScale/p,g=l.shadowOffset,e.transform("scale3d("+f+", 1, "+m+") translate3d(0px, "+(a/2+g)+"px, "+-a/2/m+"px) rotateX(-90deg)")));var P=B.isSafari||B.isUiWebView?-r/2:0;i.transform("translate3d(0px,0,"+P+"px) rotateX("+(this.isHorizontal()?0:d)+"deg) rotateY("+(this.isHorizontal()?-d:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},de={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,i=0;i<e.length;i+=1){var n=e.eq(i),s=n[0].progress;this.params.flipEffect.limitRotation&&(s=Math.max(Math.min(n[0].progress,1),-1));var a,o,r=-180*s,l=0,c=-n[0].swiperSlideOffset,u=0;this.isHorizontal()?t&&(r=-r):(u=c,l=-r,r=c=0),n[0].style.zIndex=-Math.abs(Math.round(s))+e.length,this.params.flipEffect.slideShadows&&(a=this.isHorizontal()?n.find(".swiper-slide-shadow-left"):n.find(".swiper-slide-shadow-top"),o=this.isHorizontal()?n.find(".swiper-slide-shadow-right"):n.find(".swiper-slide-shadow-bottom"),0===a.length&&(a=D('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),n.append(a)),0===o.length&&(o=D('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),n.append(o)),a.length&&(a[0].style.opacity=Math.max(-s,0)),o.length&&(o[0].style.opacity=Math.max(s,0))),n.transform("translate3d("+c+"px, "+u+"px, 0px) rotateX("+l+"deg) rotateY("+r+"deg)")}},setTransition:function(e){var i,n=this,t=n.slides,s=n.activeIndex,a=n.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),n.params.virtualTranslate&&0!==e&&(i=!1,t.eq(s).transitionEnd(function(){if(!i&&n&&!n.destroyed){i=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}}))}},he={setTranslate:function(){for(var e=this.width,t=this.height,i=this.slides,n=this.$wrapperEl,s=this.slidesSizesGrid,a=this.params.coverflowEffect,o=this.isHorizontal(),r=this.translate,l=o?e/2-r:t/2-r,c=o?a.rotate:-a.rotate,u=a.depth,d=0,h=i.length;d<h;d+=1){var p=i.eq(d),f=s[d],m=(l-p[0].swiperSlideOffset-f/2)/f*a.modifier,g=o?c*m:0,v=o?0:c*m,y=-u*Math.abs(m),b=a.stretch;"string"==typeof b&&-1!==b.indexOf("%")&&(b=parseFloat(a.stretch)/100*f);var w=o?0:b*m,x=o?b*m:0;Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(y)<.001&&(y=0),Math.abs(g)<.001&&(g=0),Math.abs(v)<.001&&(v=0);var C,S,T="translate3d("+x+"px,"+w+"px,"+y+"px)  rotateX("+v+"deg) rotateY("+g+"deg)";p.transform(T),p[0].style.zIndex=1-Math.abs(Math.round(m)),a.slideShadows&&(C=o?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),S=o?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom"),0===C.length&&(C=D('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),p.append(C)),0===S.length&&(S=D('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),p.append(S)),C.length&&(C[0].style.opacity=0<m?m:0),S.length&&(S[0].style.opacity=0<-m?-m:0))}(E.pointerEvents||E.prefixedPointerEvents)&&(n[0].style.perspectiveOrigin=l+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},pe={init:function(){var e=this.params.thumbs,t=this.constructor;e.swiper instanceof t?(this.thumbs.swiper=e.swiper,ae.extend(this.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),ae.extend(this.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):ae.isObject(e.swiper)&&(this.thumbs.swiper=new t(ae.extend({},e.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),this.thumbs.swiperCreated=!0),this.thumbs.swiper.$el.addClass(this.params.thumbs.thumbsContainerClass),this.thumbs.swiper.on("tap",this.thumbs.onThumbClick)},onThumbClick:function(){var e,t,i,n,s,a,o=this.thumbs.swiper;o&&(e=o.clickedIndex,(t=o.clickedSlide)&&D(t).hasClass(this.params.thumbs.slideThumbActiveClass)||null==e||(a=o.params.loop?parseInt(D(o.clickedSlide).attr("data-swiper-slide-index"),10):e,this.params.loop&&(i=this.activeIndex,this.slides.eq(i).hasClass(this.params.slideDuplicateClass)&&(this.loopFix(),this._clientLeft=this.$wrapperEl[0].clientLeft,i=this.activeIndex),n=this.slides.eq(i).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),s=this.slides.eq(i).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),a=void 0===n||void 0!==s&&s-i<i-n?s:n),this.slideTo(a)))},update:function(e){var t=this.thumbs.swiper;if(t){var i,n,s,a,o,r="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,l=this.params.thumbs.autoScrollOffset,c=l&&!t.params.loop;this.realIndex===t.realIndex&&!c||(i=t.activeIndex,o=t.params.loop?(t.slides.eq(i).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,i=t.activeIndex),n=t.slides.eq(i).prevAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),s=t.slides.eq(i).nextAll('[data-swiper-slide-index="'+this.realIndex+'"]').eq(0).index(),a=void 0===n?s:void 0===s?n:s-i==i-n?i:s-i<i-n?s:n,this.activeIndex>this.previousIndex?"next":"prev"):(a=this.realIndex)>this.previousIndex?"next":"prev",c&&(a+="next"===o?l:-1*l),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(a)<0&&(t.params.centeredSlides?a=i<a?a-Math.floor(r/2)+1:a+Math.floor(r/2)-1:i<a&&(a=a-r+1),t.slideTo(a,e?0:void 0)));var u=1,d=this.params.thumbs.slideThumbActiveClass;if(1<this.params.slidesPerView&&!this.params.centeredSlides&&(u=this.params.slidesPerView),this.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),t.slides.removeClass(d),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var h=0;h<u;h+=1)t.$wrapperEl.children('[data-swiper-slide-index="'+(this.realIndex+h)+'"]').addClass(d);else for(var p=0;p<u;p+=1)t.slides.eq(this.realIndex+p).addClass(d)}}},fe=[F,R,H,q,X,W,G,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){ae.extend(this,{mousewheel:{enabled:!1,enable:U.enable.bind(this),disable:U.disable.bind(this),handle:U.handle.bind(this),handleMouseEnter:U.handleMouseEnter.bind(this),handleMouseLeave:U.handleMouseLeave.bind(this),animateSlider:U.animateSlider.bind(this),releaseScroll:U.releaseScroll.bind(this),lastScrollTime:ae.now(),lastEventBeforeSnap:void 0,recentWheelEvents:[]}})},on:{init:function(){!this.params.mousewheel.enabled&&this.params.cssMode&&this.mousewheel.disable(),this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.params.cssMode&&this.mousewheel.enable(),this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){ae.extend(this,{navigation:{init:K.init.bind(this),update:K.update.bind(this),destroy:K.destroy.bind(this),onNextClick:K.onNextClick.bind(this),onPrevClick:K.onPrevClick.bind(this)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,i=this.navigation,n=i.$nextEl,s=i.$prevEl;!this.params.navigation.hideOnClick||D(e.target).is(s)||D(e.target).is(n)||(n?t=n.hasClass(this.params.navigation.hiddenClass):s&&(t=s.hasClass(this.params.navigation.hiddenClass)),!0===t?this.emit("navigationShow",this):this.emit("navigationHide",this),n&&n.toggleClass(this.params.navigation.hiddenClass),s&&s.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){ae.extend(this,{pagination:{init:Q.init.bind(this),render:Q.render.bind(this),update:Q.update.bind(this),destroy:Q.destroy.bind(this),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){this.params.pagination.el&&this.params.pagination.hideOnClick&&0<this.pagination.$el.length&&!D(e.target).hasClass(this.params.pagination.bulletClass)&&(!0===this.pagination.$el.hasClass(this.params.pagination.hiddenClass)?this.emit("paginationShow",this):this.emit("paginationHide",this),this.pagination.$el.toggleClass(this.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){ae.extend(this,{scrollbar:{init:Z.init.bind(this),destroy:Z.destroy.bind(this),updateSize:Z.updateSize.bind(this),setTranslate:Z.setTranslate.bind(this),setTransition:Z.setTransition.bind(this),enableDraggable:Z.enableDraggable.bind(this),disableDraggable:Z.disableDraggable.bind(this),setDragPosition:Z.setDragPosition.bind(this),getPointerPosition:Z.getPointerPosition.bind(this),onDragStart:Z.onDragStart.bind(this),onDragMove:Z.onDragMove.bind(this),onDragEnd:Z.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){ae.extend(this,{parallax:{setTransform:J.setTransform.bind(this),setTranslate:J.setTranslate.bind(this),setTransition:J.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var n=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=ee[e].bind(n)}),ae.extend(n,{zoom:t});var s=1;Object.defineProperty(n.zoom,"scale",{get:function(){return s},set:function(e){var t,i;s!==e&&(t=n.zoom.gesture.$imageEl?n.zoom.gesture.$imageEl[0]:void 0,i=n.zoom.gesture.$slideEl?n.zoom.gesture.$slideEl[0]:void 0,n.emit("zoomChange",e,t,i)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()},slideChange:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.params.cssMode&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){ae.extend(this,{lazy:{initialImageLoaded:!1,load:te.load.bind(this),loadInSlide:te.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){this.params.lazy.enabled&&(this.params.lazy.loadOnTransitionStart||!this.params.lazy.loadOnTransitionStart&&!this.lazy.initialImageLoaded)&&this.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()},slideChange:function(){this.params.lazy.enabled&&this.params.cssMode&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){ae.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:ie.getInterpolateFunction.bind(this),setTranslate:ie.setTranslate.bind(this),setTransition:ie.setTransition.bind(this)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;ae.extend(t,{a11y:{liveRegion:D('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(ne).forEach(function(e){t.a11y[e]=ne[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){ae.extend(this,{history:{init:oe.init.bind(this),setHistory:oe.setHistory.bind(this),setHistoryPopState:oe.setHistoryPopState.bind(this),scrollToSlide:oe.scrollToSlide.bind(this),destroy:oe.destroy.bind(this)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)},slideChange:function(){this.history.initialized&&this.params.cssMode&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){ae.extend(this,{hashNavigation:{initialized:!1,init:re.init.bind(this),destroy:re.destroy.bind(this),setHash:re.setHash.bind(this),onHashCange:re.onHashCange.bind(this)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()},slideChange:function(){this.hashNavigation.initialized&&this.params.cssMode&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;ae.extend(t,{autoplay:{running:!1,paused:!1,run:le.run.bind(t),start:le.start.bind(t),stop:le.stop.bind(t),pause:le.pause.bind(t),onVisibilityChange:function(){"hidden"===document.visibilityState&&t.autoplay.running&&t.autoplay.pause(),"visible"===document.visibilityState&&t.autoplay.paused&&(t.autoplay.run(),t.autoplay.paused=!1)},onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&(this.autoplay.start(),document.addEventListener("visibilitychange",this.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},touchEnd:function(){this.params.cssMode&&this.autoplay.paused&&!this.params.autoplay.disableOnInteraction&&this.autoplay.run()},destroy:function(){this.autoplay.running&&this.autoplay.stop(),document.removeEventListener("visibilitychange",this.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){ae.extend(this,{fadeEffect:{setTranslate:ce.setTranslate.bind(this),setTransition:ce.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"fade"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"fade"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){ae.extend(this,{cubeEffect:{setTranslate:ue.setTranslate.bind(this),setTransition:ue.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"cube"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"cube"),this.classNames.push(this.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){ae.extend(this,{flipEffect:{setTranslate:de.setTranslate.bind(this),setTransition:de.setTransition.bind(this)}})},on:{beforeInit:function(){var e;"flip"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"flip"),this.classNames.push(this.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},ae.extend(this.params,e),ae.extend(this.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){ae.extend(this,{coverflowEffect:{setTranslate:he.setTranslate.bind(this),setTransition:he.setTransition.bind(this)}})},on:{beforeInit:function(){"coverflow"===this.params.effect&&(this.classNames.push(this.params.containerModifierClass+"coverflow"),this.classNames.push(this.params.containerModifierClass+"3d"),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){ae.extend(this,{thumbs:{swiper:null,init:pe.init.bind(this),update:pe.update.bind(this),onThumbClick:pe.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===j.use&&(j.use=j.Class.use,j.installModule=j.Class.installModule),j.use(fe),j}),function(h){"use strict";var p=null,f=null;!function(){for(var e,s,a,o,r,t=["webkit","moz","o","ms"],i=h.document.createElement("div"),n=-1,n=0;n<t.length&&!h.requestAnimationFrame;n++)h.requestAnimationFrame=h[t[n]+"RequestAnimationFrame"];function l(){}void 0===i.nextElementSibling&&Object.defineProperty(h.Element.prototype,"nextElementSibling",{get:function(){for(var e=this.nextSibling;e;){if(1===e.nodeType)return e;e=e.nextSibling}return null}}),(e=h.Element.prototype).matches=e.matches||e.machesSelector||e.mozMatchesSelector||e.msMatchesSelector||e.oMatchesSelector||e.webkitMatchesSelector||function(e){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(e),this)},Object.keys||(Object.keys=(a=Object.prototype.hasOwnProperty,o=!{toString:null}.propertyIsEnumerable("toString"),r=(s=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(e){var t=[],i="",n=-1;if("object"!=typeof e&&("function"!=typeof e||null===e))throw new TypeError("Object.keys called on non-object");for(i in e)a.call(e,i)&&t.push(i);if(o)for(n=0;n<r;n++)a.call(e,s[n])&&t.push(s[n]);return t})),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),"function"!=typeof Object.create&&(Object.create=function(e,t){if(e!==Object(e)&&null!==e)throw TypeError("Argument must be an object, or null");l.prototype=e||{};var i=new l;return l.prototype=null,void 0!==t&&Object.defineProperties(i,t),null===e&&(i.__proto__=null),i}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){var t,i,n,s;if(null===this)throw new TypeError;if(0==(s=(n=Object(this)).length>>>0))return-1;if(t=0,1<arguments.length&&((t=Number(arguments[1]))!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(0<t||-1)*Math.floor(Math.abs(t)))),s<=t)return-1;for(i=0<=t?t:Math.max(s-Math.abs(t),0);i<s;i++)if(i in n&&n[i]===e)return i;return-1}),Function.prototype.bind||(Function.prototype.bind=function(e){var t,i,n,s;if("function"!=typeof this)throw new TypeError;return t=Array.prototype.slice.call(arguments,1),n=function(){},s=function(){return i.apply(this instanceof n?this:e,t.concat(Array.prototype.slice.call(arguments)))},(i=this).prototype&&(n.prototype=this.prototype),s.prototype=new n,s}),h.Element.prototype.dispatchEvent||(h.Element.prototype.dispatchEvent=function(e){try{return this.fireEvent("on"+e.type,e)}catch(e){}})}(),(p=function(e,t,i){var n=null,s=!1,a=null,o=null,r=null,l=[],c="",u=[],d=-1,r=i||h.document;if((s=arguments[3])&&(s="boolean"==typeof s),"string"==typeof e)u=r.querySelectorAll(e);else if(e&&"object"==typeof e&&f.isElement(e,r))u=[e];else{if(!e||"object"!=typeof e||!e.length)throw new Error(p.messages.errorFactoryInvalidContainer());u=e}if(u.length<1)throw new Error(p.messages.errorFactoryContainerNotFound());for(d=0;(n=u[d])&&(!(0<d)||s);d++)n.id?c=n.id:(c="MixItUp"+f.randomHex(),n.id=c),p.instances[c]instanceof p.Mixer?(a=p.instances[c],(!t||t&&t.debug&&!1!==t.debug.showWarnings)&&console.warn(p.messages.warningFactoryPreexistingInstance())):((a=new p.Mixer).attach(n,r,c,t),p.instances[c]=a),o=new p.Facade(a),t&&t.debug&&t.debug.enable?l.push(a):l.push(o);return s?new p.Collection(l):l[0]}).use=function(e){p.Base.prototype.callActions.call(p,"beforeUse",arguments),"function"==typeof e&&"mixitup-extension"===e.TYPE?void 0===p.extensions[e.NAME]&&(e(p),p.extensions[e.NAME]=e):e.fn&&e.fn.jquery&&(p.libraries.$=e),p.Base.prototype.callActions.call(p,"afterUse",arguments)},p.instances={},p.extensions={},p.libraries={},f={hasClass:function(e,t){return!!e.className.match(new RegExp("(\\s|^)"+t+"(\\s|$)"))},addClass:function(e,t){this.hasClass(e,t)||(e.className+=e.className?" "+t:t)},removeClass:function(e,t){var i;this.hasClass(e,t)&&(i=new RegExp("(\\s|^)"+t+"(\\s|$)"),e.className=e.className.replace(i," ").trim())},extend:function(t,e,i,n){var s=[],a="",o=-1;i=i||!1,n=n||!1;try{if(Array.isArray(e))for(o=0;o<e.length;o++)s.push(o);else e&&(s=Object.keys(e));for(o=0;o<s.length;o++)a=s[o],!i||"object"!=typeof e[a]||this.isElement(e[a])?t[a]=e[a]:(Array.isArray(e[a])?t[a]||(t[a]=[]):t[a]||(t[a]={}),this.extend(t[a],e[a],i,n))}catch(e){if(!n)throw e;this.handleExtendError(e,t)}return t},handleExtendError:function(e,t){var i=null,n="",s="",a="",o="",r="",l=-1,c=-1;if(e instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(e.message))){for(r in n=i[1],t){for(c=0;c<n.length&&n.charAt(c)===r.charAt(c);)c++;l<c&&(l=c,o=r)}throw 1<l&&(a=p.messages.errorConfigInvalidPropertySuggestion({probableMatch:o})),s=p.messages.errorConfigInvalidProperty({erroneous:n,suggestion:a}),new TypeError(s)}throw e},template:function(n){for(var e=/\${([\w]*)}/g,s={},t=null;t=e.exec(n);)s[t[1]]=new RegExp("\\${"+t[1]+"}","g");return function(e){var t="",i=n;for(t in e=e||{},s)i=i.replace(s[t],void 0!==e[t]?e[t]:"");return i}},on:function(e,t,i,n){e&&(e.addEventListener?e.addEventListener(t,i,n):e.attachEvent&&(e["e"+t+i]=i,e[t+i]=function(){e["e"+t+i](h.event)},e.attachEvent("on"+t,e[t+i])))},off:function(e,t,i){e&&(e.removeEventListener?e.removeEventListener(t,i,!1):e.detachEvent&&(e.detachEvent("on"+t,e[t+i]),e[t+i]=null))},getCustomEvent:function(e,t,i){var n=null;return i=i||h.document,"function"==typeof h.CustomEvent?n=new h.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(n=i.createEvent("CustomEvent")).initCustomEvent(e,!0,!0,t):((n=i.createEventObject()).type=e,n.returnValue=!1,n.cancelBubble=!1,n.detail=t),n},getOriginalEvent:function(e){return e.touches&&e.touches.length?e.touches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e},index:function(e,t){for(var i=0;null!==(e=e.previousElementSibling);)t&&!e.matches(t)||++i;return i},camelCase:function(e){return e.toLowerCase().replace(/([_-][a-z])/g,function(e){return e.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(e){return(e=this.camelCase(e)).charAt(0).toUpperCase()+e.slice(1)},dashCase:function(e){return e.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(e,t){return t=t||h.document,!!(h.HTMLElement&&e instanceof h.HTMLElement)||(!!(t.defaultView&&t.defaultView.HTMLElement&&e instanceof t.defaultView.HTMLElement)||null!==e&&1===e.nodeType&&"string"==typeof e.nodeName)},createElement:function(e,t){var i=null,n=null,i=(t=t||h.document).createDocumentFragment();for((n=t.createElement("div")).innerHTML=e.trim();n.firstChild;)i.appendChild(n.firstChild);return i},removeWhitespace:function(e){for(var t;e&&"#text"===e.nodeName;)e=(t=e).previousSibling,t.parentElement&&t.parentElement.removeChild(t)},isEqualArray:function(e,t){var i=e.length;if(i!==t.length)return!1;for(;i--;)if(e[i]!==t[i])return!1;return!0},deepEquals:function(e,t){var i;if("object"==typeof e&&e&&"object"==typeof t&&t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(i in e)if(!t.hasOwnProperty(i)||!this.deepEquals(e[i],t[i]))return!1}else if(e!==t)return!1;return!0},arrayShuffle:function(e){for(var t=e.slice(),i=t.length,n=i,s=-1,a=[];n--;)s=~~(Math.random()*i),a=t[n],t[n]=t[s],t[s]=a;return t},arrayFromList:function(t){var i,n;try{return Array.prototype.slice.call(t)}catch(e){for(i=[],n=0;n<t.length;n++)i.push(t[n]);return i}},debounce:function(s,a,o){var r;return function(){function e(){r=null,o||s.apply(t,i)}var t=this,i=arguments,n=o&&!r;clearTimeout(r),r=setTimeout(e,a),n&&s.apply(t,i)}},position:function(e){for(var t=0,i=0,n=e;e;)t-=e.scrollLeft,i-=e.scrollTop,e===n&&(t+=e.offsetLeft,i+=e.offsetTop,n=e.offsetParent),e=e.parentElement;return{x:t,y:i}},getHypotenuse:function(e,t){var i=(i=e.x-t.x)<0?-1*i:i,n=(n=e.y-t.y)<0?-1*n:n;return Math.sqrt(Math.pow(i,2)+Math.pow(n,2))},getIntersectionRatio:function(e,t){var i=e.width*e.height,n=Math.max(0,Math.min(e.left+e.width,t.left+t.width)-Math.max(e.left,t.left));return Math.max(0,Math.min(e.top+e.height,t.top+t.height)-Math.max(e.top,t.top))*n/i},closestParent:function(e,t,i,n){var s=e.parentNode;if(n=n||h.document,i&&e.matches(t))return e;for(;s&&s!=n.body;){if(s.matches&&s.matches(t))return s;if(!s.parentNode)return null;s=s.parentNode}return null},children:function(e,t,i){var n=[],s="";return i=i||h.doc,e&&(e.id||(s="Temp"+this.randomHexKey(),e.id=s),n=i.querySelectorAll("#"+e.id+" > "+t),s&&e.removeAttribute("id")),n},clean:function(e){for(var t=[],i=-1,i=0;i<e.length;i++)""!==e[i]&&t.push(e[i]);return t},defer:function(e){var t=null,i=null,n=null,i=new this.Deferred;return p.features.has.promises?i.promise=new Promise(function(e,t){i.resolve=e,i.reject=t}):(n=h.jQuery||e.$)&&"function"==typeof n.Deferred?(t=n.Deferred(),i.promise=t.promise(),i.resolve=t.resolve,i.reject=t.reject):h.console&&console.warn(p.messages.warningNoPromiseImplementation()),i},all:function(e,t){var i=null;return p.features.has.promises?Promise.all(e):(i=h.jQuery||t.$)&&"function"==typeof i.when?i.when.apply(i,e).done(function(){return arguments}):(h.console&&console.warn(p.messages.warningNoPromiseImplementation()),[])},getPrefix:function(e,t,i){var n=-1,s="";if(f.dashCase(t)in e.style)return"";for(n=0;s=i[n];n++)if(s+t in e.style)return s.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(e){return e="object"==typeof e.body?e:h.document,{scrollTop:h.pageYOffset,scrollLeft:h.pageXOffset,docHeight:e.documentElement.scrollHeight,docWidth:e.documentElement.scrollWidth,viewportHeight:e.documentElement.clientHeight,viewportWidth:e.documentElement.clientWidth}},bind:function(e,t){return function(){return t.apply(e,arguments)}},isVisible:function(e){var t;return!!e.offsetParent||"fixed"===(t=h.getComputedStyle(e)).position&&"hidden"!==t.visibility&&"0"!==t.opacity},seal:function(e){"function"==typeof Object.seal&&Object.seal(e)},freeze:function(e){"function"==typeof Object.freeze&&Object.freeze(e)},compareVersions:function(e,t){for(var i=e.split("."),n=t.split("."),s=-1,a=-1,o=-1,o=0;o<i.length;o++){if(s=parseInt(i[o].replace(/[^\d.]/g,"")),(a=parseInt(n[o].replace(/[^\d.]/g,"")||0))<s)return!1;if(s<a)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=f.randomHex()},isEmptyObject:function(e){var t="";if("function"==typeof Object.keys)return 0===Object.keys(e).length;for(t in e)if(e.hasOwnProperty(t))return!1;return!0},getClassname:function(e,t,i){var n="";return(n+=e.block).length&&(n+=e.delineatorElement),n+=e["element"+this.pascalCase(t)],i?(n.length&&(n+=e.delineatorModifier),n+=i):n},getProperty:function(e,t){var i,n=t.split("."),s="",a=0;if(!t)return e;for(i=function(e){return e?e[s]:null};a<n.length;)s=n[a],e=i(e),a++;return void 0!==e?e:null}},p.h=f,p.Base=function(){},p.Base.prototype={constructor:p.Base,callActions:function(e,t){var i=this.constructor.actions[e],n="";if(i&&!f.isEmptyObject(i))for(n in i)i[n].apply(this,t)},callFilters:function(e,t,i){var n=this.constructor.filters[e],s=t,a="";if(!n||f.isEmptyObject(n))return s;for(a in i=i||[],n)(i=f.arrayFromList(i)).unshift(s),s=n[a].apply(this,i);return s}},p.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(e){f.extend(this.prototype,e)},this.registerAction=function(e,t,i){(this.actions[e]=this.actions[e]||{})[t]=i},this.registerFilter=function(e,t,i){(this.filters[e]=this.filters[e]||{})[t]=i}},p.Features=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new p.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},p.BaseStatic.call(p.Features),p.Features.prototype=Object.create(p.Base.prototype),f.extend(p.Features.prototype,{constructor:p.Features,init:function(){this.callActions("beforeInit",arguments),this.canary=document.createElement("div"),this.setPrefixes(),this.runTests(),this.callActions("beforeInit",arguments)},runTests:function(){this.callActions("beforeRunTests",arguments),this.has.promises="function"==typeof h.Promise,this.has.transitions="unsupported"!==this.transitionPrefix,this.callActions("afterRunTests",arguments),f.freeze(this.has)},setPrefixes:function(){var e=this;e.callActions("beforeSetPrefixes",arguments),e.transitionPrefix=f.getPrefix(e.canary,"Transition",e.VENDORS),e.transformPrefix=f.getPrefix(e.canary,"Transform",e.VENDORS),e.boxSizingPrefix=f.getPrefix(e.canary,"BoxSizing",e.VENDORS),e.boxSizingProp=e.boxSizingPrefix?e.boxSizingPrefix+f.pascalCase(e.BOX_SIZING_PROP):e.BOX_SIZING_PROP,e.transitionProp=e.transitionPrefix?e.transitionPrefix+f.pascalCase(e.TRANSITION_PROP):e.TRANSITION_PROP,e.transformProp=e.transformPrefix?e.transformPrefix+f.pascalCase(e.TRANSFORM_PROP):e.TRANSFORM_PROP,e.transformRule=e.transformPrefix?"-"+e.transformPrefix+"-"+e.TRANSFORM_PROP:e.TRANSFORM_PROP,e.perspectiveProp=e.transformPrefix?e.transformPrefix+f.pascalCase(e.PERSPECTIVE_PROP):e.PERSPECTIVE_PROP,e.perspectiveOriginProp=e.transformPrefix?e.transformPrefix+f.pascalCase(e.PERSPECTIVE_ORIGIN_PROP):e.PERSPECTIVE_ORIGIN_PROP,e.callActions("afterSetPrefixes",arguments)}}),p.Has=function(){this.transitions=!1,this.promises=!1,f.seal(this)},p.features=new p.Features,p.features.init(),p.ConfigAnimation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigAnimation),p.ConfigAnimation.prototype=Object.create(p.Base.prototype),p.ConfigAnimation.prototype.constructor=p.ConfigAnimation,p.ConfigBehavior=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigBehavior),p.ConfigBehavior.prototype=Object.create(p.Base.prototype),p.ConfigBehavior.prototype.constructor=p.ConfigBehavior,p.ConfigCallbacks=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigCallbacks),p.ConfigCallbacks.prototype=Object.create(p.Base.prototype),p.ConfigCallbacks.prototype.constructor=p.ConfigCallbacks,p.ConfigControls=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigControls),p.ConfigControls.prototype=Object.create(p.Base.prototype),p.ConfigControls.prototype.constructor=p.ConfigControls,p.ConfigClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigClassNames),p.ConfigClassNames.prototype=Object.create(p.Base.prototype),p.ConfigClassNames.prototype.constructor=p.ConfigClassNames,p.ConfigData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigData),p.ConfigData.prototype=Object.create(p.Base.prototype),p.ConfigData.prototype.constructor=p.ConfigData,p.ConfigDebug=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigDebug),p.ConfigDebug.prototype=Object.create(p.Base.prototype),p.ConfigDebug.prototype.constructor=p.ConfigDebug,p.ConfigLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLayout),p.ConfigLayout.prototype=Object.create(p.Base.prototype),p.ConfigLayout.prototype.constructor=p.ConfigLayout,p.ConfigLoad=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLoad),p.ConfigLoad.prototype=Object.create(p.Base.prototype),p.ConfigLoad.prototype.constructor=p.ConfigLoad,p.ConfigSelectors=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigSelectors),p.ConfigSelectors.prototype=Object.create(p.Base.prototype),p.ConfigSelectors.prototype.constructor=p.ConfigSelectors,p.ConfigRender=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigRender),p.ConfigRender.prototype=Object.create(p.Base.prototype),p.ConfigRender.prototype.constructor=p.ConfigRender,p.ConfigTemplates=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigTemplates),p.ConfigTemplates.prototype=Object.create(p.Base.prototype),p.ConfigTemplates.prototype.constructor=p.ConfigTemplates,p.Config=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.animation=new p.ConfigAnimation,this.behavior=new p.ConfigBehavior,this.callbacks=new p.ConfigCallbacks,this.controls=new p.ConfigControls,this.classNames=new p.ConfigClassNames,this.data=new p.ConfigData,this.debug=new p.ConfigDebug,this.layout=new p.ConfigLayout,this.load=new p.ConfigLoad,this.selectors=new p.ConfigSelectors,this.render=new p.ConfigRender,this.templates=new p.ConfigTemplates,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Config),p.Config.prototype=Object.create(p.Base.prototype),p.Config.prototype.constructor=p.Config,p.MixerDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.MixerDom),p.MixerDom.prototype=Object.create(p.Base.prototype),p.MixerDom.prototype.constructor=p.MixerDom,p.UiClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UiClassNames),p.UiClassNames.prototype=Object.create(p.Base.prototype),p.UiClassNames.prototype.constructor=p.UiClassNames,p.CommandDataset=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandDataset),p.CommandDataset.prototype=Object.create(p.Base.prototype),p.CommandDataset.prototype.constructor=p.CommandDataset,p.CommandMultimix=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandMultimix),p.CommandMultimix.prototype=Object.create(p.Base.prototype),p.CommandMultimix.prototype.constructor=p.CommandMultimix,p.CommandFilter=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandFilter),p.CommandFilter.prototype=Object.create(p.Base.prototype),p.CommandFilter.prototype.constructor=p.CommandFilter,p.CommandSort=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandSort),p.CommandSort.prototype=Object.create(p.Base.prototype),p.CommandSort.prototype.constructor=p.CommandSort,p.CommandInsert=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandInsert),p.CommandInsert.prototype=Object.create(p.Base.prototype),p.CommandInsert.prototype.constructor=p.CommandInsert,p.CommandRemove=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandRemove),p.CommandRemove.prototype=Object.create(p.Base.prototype),p.CommandRemove.prototype.constructor=p.CommandRemove,p.CommandChangeLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandChangeLayout),p.CommandChangeLayout.prototype=Object.create(p.Base.prototype),p.CommandChangeLayout.prototype.constructor=p.CommandChangeLayout,p.ControlDefinition=function(e,t,i,n){p.Base.call(this),this.callActions("beforeConstruct"),this.type=e,this.selector=t,this.live=i||!1,this.parent=n||"",this.callActions("afterConstruct"),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.ControlDefinition),p.ControlDefinition.prototype=Object.create(p.Base.prototype),p.ControlDefinition.prototype.constructor=p.ControlDefinition,p.controlDefinitions=[],p.controlDefinitions.push(new p.ControlDefinition("multimix","[data-filter][data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("filter","[data-filter]")),p.controlDefinitions.push(new p.ControlDefinition("sort","[data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("toggle","[data-toggle]")),p.Control=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new p.UiClassNames,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Control),p.Control.prototype=Object.create(p.Base.prototype),f.extend(p.Control.prototype,{constructor:p.Control,init:function(e,t,i){var n=this;if(this.callActions("beforeInit",arguments),n.el=e,n.type=t,n.selector=i,n.selector)n.status="live";else switch(n.canDisable="boolean"==typeof n.el.disable,n.type){case"filter":n.filter=n.el.getAttribute("data-filter");break;case"toggle":n.filter=n.el.getAttribute("data-toggle");break;case"sort":n.sort=n.el.getAttribute("data-sort");break;case"multimix":n.filter=n.el.getAttribute("data-filter"),n.sort=n.el.getAttribute("data-sort")}n.bindClick(),p.controls.push(n),this.callActions("afterInit",arguments)},isBound:function(e){var t;return this.callActions("beforeIsBound",arguments),t=-1<this.bound.indexOf(e),this.callFilters("afterIsBound",t,arguments)},addBinding:function(e){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(e),this.callActions("afterAddBinding",arguments)},removeBinding:function(e){var t=-1;this.callActions("beforeRemoveBinding",arguments),-1<(t=this.bound.indexOf(e))&&this.bound.splice(t,1),this.bound.length<1&&(this.unbindClick(),t=p.controls.indexOf(this),p.controls.splice(t,1),"active"===this.status&&this.renderStatus(this.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var t=this;this.callActions("beforeBindClick",arguments),t.handler=function(e){t.handleClick(e)},f.on(t.el,"click",t.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),f.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(e){var t=this,i=null,n=null,s=!1,a={},o=null,r=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,n=t.bound[0],i=t.selector?f.closestParent(e.target,n.config.selectors.control+t.selector,!0,n.dom.document):t.el){switch(t.type){case"filter":a.filter=t.filter||i.getAttribute("data-filter");break;case"sort":a.sort=t.sort||i.getAttribute("data-sort");break;case"multimix":a.filter=t.filter||i.getAttribute("data-filter"),a.sort=t.sort||i.getAttribute("data-sort");break;case"toggle":a.filter=t.filter||i.getAttribute("data-toggle"),s="live"===t.status?f.hasClass(i,t.classNames.active):"active"===t.status}for(l=0;l<t.bound.length;l++)o=new p.CommandMultimix,f.extend(o,a),r.push(o);for(r=t.callFilters("commandsHandleClick",r,arguments),t.pending=t.bound.length,l=0;n=t.bound[l];l++)(a=r[l])&&(n.lastClicked||(n.lastClicked=i),p.events.fire("mixClick",n.dom.container,{state:n.state,instance:n,originalEvent:e,control:n.lastClicked},n.dom.document),"function"==typeof n.config.callbacks.onMixClick&&!1===n.config.callbacks.onMixClick.call(n.lastClicked,n.state,e,n)||("toggle"===t.type?s?n.toggleOff(a.filter):n.toggleOn(a.filter):n.multimix(a)));this.callActions("afterHandleClick",arguments)}else t.callActions("afterHandleClick",arguments)},update:function(e,t){var i=this,n=new p.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),0<i.pending||("live"===i.status?i.updateLive(e,t):(n.sort=i.sort,n.filter=i.filter,i.callFilters("actionsUpdate",n,arguments),i.parseStatusChange(i.el,e,n,t)),i.callActions("afterUpdate",arguments))},updateLive:function(e,t){var i,n=null,s=null,a=-1;if(this.callActions("beforeUpdateLive",arguments),this.el){for(i=this.el.querySelectorAll(this.selector),a=0;s=i[a];a++){switch(n=new p.CommandMultimix,this.type){case"filter":n.filter=s.getAttribute("data-filter");break;case"sort":n.sort=s.getAttribute("data-sort");break;case"multimix":n.filter=s.getAttribute("data-filter"),n.sort=s.getAttribute("data-sort");break;case"toggle":n.filter=s.getAttribute("data-toggle")}n=this.callFilters("actionsUpdateLive",n,arguments),this.parseStatusChange(s,e,n,t)}this.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(e,t,i,n){var s=this,a="",o=-1;switch(s.callActions("beforeParseStatusChange",arguments),s.type){case"filter":t.filter===i.filter?s.renderStatus(e,"active"):s.renderStatus(e,"inactive");break;case"multimix":t.sort===i.sort&&t.filter===i.filter?s.renderStatus(e,"active"):s.renderStatus(e,"inactive");break;case"sort":t.sort.match(/:asc/g)&&(a=t.sort.replace(/:asc/g,"")),t.sort===i.sort||a===i.sort?s.renderStatus(e,"active"):s.renderStatus(e,"inactive");break;case"toggle":for(n.length<1&&s.renderStatus(e,"inactive"),t.filter===i.filter&&s.renderStatus(e,"active"),o=0;o<n.length;o++){if(n[o]===i.filter){s.renderStatus(e,"active");break}s.renderStatus(e,"inactive")}}s.callActions("afterParseStatusChange",arguments)},renderStatus:function(e,t){var i=this;switch(i.callActions("beforeRenderStatus",arguments),t){case"active":f.addClass(e,i.classNames.active),f.removeClass(e,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":f.removeClass(e,i.classNames.active),f.removeClass(e,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),f.addClass(e,i.classNames.disabled),f.removeClass(e,i.classNames.active)}"live"!==i.status&&(i.status=t),i.callActions("afterRenderStatus",arguments)}}),p.controls=[],p.StyleData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new p.TransformData,this.translateX=new p.TransformData,this.translateY=new p.TransformData,this.translateZ=new p.TransformData,this.rotateX=new p.TransformData,this.rotateY=new p.TransformData,this.rotateZ=new p.TransformData,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.StyleData),p.StyleData.prototype=Object.create(p.Base.prototype),p.StyleData.prototype.constructor=p.StyleData,p.TransformData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformData),p.TransformData.prototype=Object.create(p.Base.prototype),p.TransformData.prototype.constructor=p.TransformData,p.TransformDefaults=function(){p.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformDefaults),p.TransformDefaults.prototype=Object.create(p.StyleData.prototype),p.TransformDefaults.prototype.constructor=p.TransformDefaults,p.transformDefaults=new p.TransformDefaults,p.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},p.Events=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Events),p.Events.prototype=Object.create(p.Base.prototype),p.Events.prototype.constructor=p.Events,p.Events.prototype.fire=function(e,t,i,n){var s,a=new p.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[e])throw new Error('Event type "'+e+'" not found.');a.state=new p.State,f.extend(a.state,i.state),i.futureState&&(a.futureState=new p.State,f.extend(a.futureState,i.futureState)),a.instance=i.instance,i.originalEvent&&(a.originalEvent=i.originalEvent),s=f.getCustomEvent(e,a,n),this.callFilters("eventFire",s,arguments),t.dispatchEvent(s)},p.events=new p.Events,p.QueueItem=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.QueueItem),p.QueueItem.prototype=Object.create(p.Base.prototype),p.QueueItem.prototype.constructor=p.QueueItem,p.Mixer=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.config=new p.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new p.MixerDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Mixer),p.Mixer.prototype=Object.create(p.Base.prototype),f.extend(p.Mixer.prototype,{constructor:p.Mixer,attach:function(e,t,i,n){var s=this,a=null,o=-1;for(s.callActions("beforeAttach",arguments),s.id=i,n&&f.extend(s.config,n,!0,!0),s.sanitizeConfig(),s.cacheDom(e,t),s.config.layout.containerClassName&&f.addClass(s.dom.container,s.config.layout.containerClassName),p.features.has.transitions||(s.config.animation.enable=!1),void 0===h.console&&(s.config.debug.showWarnings=!1),s.config.data.uidKey&&(s.config.controls.enable=!1),s.indexTargets(),s.state=s.getInitialState(),o=0;a=s.lastOperation.toHide[o];o++)a.hide();s.config.controls.enable&&(s.initControls(),s.buildToggleArray(null,s.state),s.updateControls({filter:s.state.activeFilter,sort:s.state.activeSort})),s.parseEffects(),s.callActions("afterAttach",arguments)},sanitizeConfig:function(){var e=this;e.callActions("beforeSanitizeConfig",arguments),e.config.controls.scope=e.config.controls.scope.toLowerCase().trim(),e.config.controls.toggleLogic=e.config.controls.toggleLogic.toLowerCase().trim(),e.config.controls.toggleDefault=e.config.controls.toggleDefault.toLowerCase().trim(),e.config.animation.effects=e.config.animation.effects.trim(),e.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var e=this,t=new p.State,i=new p.Operation;if(e.callActions("beforeGetInitialState",arguments),t.activeContainerClassName=e.config.layout.containerClassName,e.config.load.dataset){if(!e.config.data.uidKey||"string"!=typeof e.config.data.uidKey)throw new TypeError(p.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=t.activeDataset=e.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=t.activeContainerClassName,i.show=e.targets.slice(),t=e.callFilters("stateGetInitialState",t,arguments)}else t.activeFilter=e.parseFilterArgs([e.config.load.filter]).command,t.activeSort=e.parseSortArgs([e.config.load.sort]).command,t.totalTargets=e.targets.length,(t=e.callFilters("stateGetInitialState",t,arguments)).activeSort.collection||t.activeSort.attribute||"random"===t.activeSort.order||"desc"===t.activeSort.order?(i.newSort=t.activeSort,e.sortOperation(i),e.printSort(!1,i),e.targets=i.newOrder):i.startOrder=i.newOrder=e.targets,i.startFilter=i.newFilter=t.activeFilter,i.startSort=i.newSort=t.activeSort,i.startContainerClassName=i.newContainerClassName=t.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=e.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=e.callFilters("operationGetInitialState",i,[t]),(e.lastOperation=i).newFilter&&e.filterOperation(i),t=e.buildState(i)},cacheDom:function(e,t){this.callActions("beforeCacheDom",arguments),this.dom.document=t,this.dom.body=this.dom.document.querySelector("body"),this.dom.container=e,this.dom.parent=e,this.callActions("afterCacheDom",arguments)},indexTargets:function(){var e,t=this,i=null,n=null,s=-1;if(t.callActions("beforeIndexTargets",arguments),t.dom.targets=t.config.layout.allowNestedTargets?t.dom.container.querySelectorAll(t.config.selectors.target):f.children(t.dom.container,t.config.selectors.target,t.dom.document),t.dom.targets=f.arrayFromList(t.dom.targets),t.targets=[],(e=t.config.load.dataset)&&e.length!==t.dom.targets.length)throw new Error(p.messages.errorDatasetPrerenderedMismatch());if(t.dom.targets.length){for(s=0;n=t.dom.targets[s];s++)(i=new p.Target).init(n,t,e?e[s]:void 0),i.isInDom=!0,t.targets.push(i);t.dom.parent=t.dom.targets[0].parentElement===t.dom.container?t.dom.container:t.dom.targets[0].parentElement}t.origOrder=t.targets,t.callActions("afterIndexTargets",arguments)},initControls:function(){var e=this,t="",i=null,n=null,s=null,a=null,o=null,r=-1,l=-1;switch(e.callActions("beforeInitControls",arguments),e.config.controls.scope){case"local":s=e.dom.container;break;case"global":s=e.dom.document;break;default:throw new Error(p.messages.errorConfigInvalidControlsScope())}for(r=0;t=p.controlDefinitions[r];r++)if(e.config.controls.live||t.live){if(t.parent){if(!(a=e.dom[t.parent])||a.length<0)continue;"number"!=typeof a.length&&(a=[a])}else a=[s];for(l=0;n=a[l];l++)o=e.getControl(n,t.type,t.selector),e.controls.push(o)}else for(i=s.querySelectorAll(e.config.selectors.control+t.selector),l=0;n=i[l];l++)(o=e.getControl(n,t.type,""))&&e.controls.push(o);e.callActions("afterInitControls",arguments)},getControl:function(e,t,i){var n=this,s=null,a=-1;if(n.callActions("beforeGetControl",arguments),!i)for(a=0;s=p.controls[a];a++){if(s.el===e&&s.isBound(n))return n.callFilters("controlGetControl",null,arguments);if(s.el===e&&s.type===t&&s.selector===i)return s.addBinding(n),n.callFilters("controlGetControl",s,arguments)}return(s=new p.Control).init(e,t,i),s.classNames.base=f.getClassname(n.config.classNames,t),s.classNames.active=f.getClassname(n.config.classNames,t,n.config.classNames.modifierActive),s.classNames.disabled=f.getClassname(n.config.classNames,t,n.config.classNames.modifierDisabled),s.addBinding(n),n.callFilters("controlGetControl",s,arguments)},getToggleSelector:function(){var e="or"===this.config.controls.toggleLogic?", ":"",t="";return this.callActions("beforeGetToggleSelector",arguments),this.toggleArray=f.clean(this.toggleArray),""===(t=this.toggleArray.join(e))&&(t=this.config.controls.toggleDefault),this.callFilters("selectorGetToggleSelector",t,arguments)},buildToggleArray:function(e,t){var i="";if(this.callActions("beforeBuildToggleArray",arguments),e&&e.filter)i=e.filter.selector.replace(/\s/g,"");else{if(!t)return;i=t.activeFilter.selector.replace(/\s/g,"")}i!==this.config.selectors.target&&"all"!==i||(i=""),"or"===this.config.controls.toggleLogic?this.toggleArray=i.split(","):this.toggleArray=this.splitCompoundSelector(i),this.toggleArray=f.clean(this.toggleArray),this.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(e){var t=e.split(/([\.\[])/g),i=[],n="",s=-1;for(""===t[0]&&t.shift(),s=0;s<t.length;s++)s%2==0&&(n=""),n+=t[s],s%2!=0&&i.push(n);return i},updateControls:function(e){var t=null,i=new p.CommandMultimix,n=-1;for(this.callActions("beforeUpdateControls",arguments),e.filter?i.filter=e.filter.selector:i.filter=this.state.activeFilter.selector,e.sort?i.sort=this.buildSortString(e.sort):i.sort=this.buildSortString(this.state.activeSort),i.filter===this.config.selectors.target&&(i.filter="all"),""===i.filter&&(i.filter="none"),f.freeze(i),n=0;t=this.controls[n];n++)t.update(i,this.toggleArray);this.callActions("afterUpdateControls",arguments)},buildSortString:function(e){var t="";return t+=e.sortString,e.next&&(t+=" "+this.buildSortString(e.next)),t},insertTargets:function(e,t){var i,n=this,s=-1,a=null,o=null,r=null,l=-1;if(n.callActions("beforeInsertTargets",arguments),void 0===e.index&&(e.index=0),i=n.getNextSibling(e.index,e.sibling,e.position),a=n.dom.document.createDocumentFragment(),s=i?f.index(i,n.config.selectors.target):n.targets.length,e.collection){for(l=0;r=e.collection[l];l++){if(-1<n.dom.targets.indexOf(r))throw new Error(p.messages.errorInsertPreexistingElement());r.style.display="none",a.appendChild(r),a.appendChild(n.dom.document.createTextNode(" ")),f.isElement(r,n.dom.document)&&r.matches(n.config.selectors.target)&&((o=new p.Target).init(r,n),o.isInDom=!0,n.targets.splice(s,0,o),s++)}n.dom.parent.insertBefore(a,i)}t.startOrder=n.origOrder=n.targets,n.callActions("afterInsertTargets",arguments)},getNextSibling:function(e,t,i){var n=this,s=null;return e=Math.max(e,0),t&&"before"===i?s=t:t&&"after"===i?s=t.nextElementSibling||null:0<n.targets.length&&void 0!==e?s=e<n.targets.length||!n.targets.length?n.targets[e].dom.el:n.targets[n.targets.length-1].dom.el.nextElementSibling:0===n.targets.length&&0<n.dom.parent.children.length&&(n.config.layout.siblingAfter?s=n.config.layout.siblingAfter:n.config.layout.siblingBefore?s=n.config.layout.siblingBefore.nextElementSibling:n.dom.parent.children[0]),n.callFilters("elementGetNextSibling",s,arguments)},filterOperation:function(e){var t,i=!1,n=-1,s=null,a=-1;for(this.callActions("beforeFilterOperation",arguments),t=e.newFilter.action,a=0;s=e.newOrder[a];a++)i=e.newFilter.collection?-1<e.newFilter.collection.indexOf(s.dom.el):""!==e.newFilter.selector&&s.dom.el.matches(e.newFilter.selector),this.evaluateHideShow(i,s,t,e);if(e.toRemove.length)for(a=0;s=e.show[a];a++)-1<e.toRemove.indexOf(s)&&(e.show.splice(a,1),-1<(n=e.toShow.indexOf(s))&&e.toShow.splice(n,1),e.toHide.push(s),e.hide.push(s),a--);e.matching=e.show.slice(),0===e.show.length&&""!==e.newFilter.selector&&0!==this.targets.length&&(e.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(e,t,i,n){var s=Array.prototype.slice.call(arguments,1),a=this.callFilters("testResultEvaluateHideShow",e,s);this.callActions("beforeEvaluateHideShow",arguments),!0===a&&"show"===i||!1===a&&"hide"===i?(n.show.push(t),t.isShown||n.toShow.push(t)):(n.hide.push(t),t.isShown&&n.toHide.push(t)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(i){var n=this,e=[],t=null,s=null,a=-1;if(n.callActions("beforeSortOperation",arguments),i.startOrder=n.targets,i.newSort.collection){for(e=[],a=0;s=i.newSort.collection[a];a++){if(n.dom.targets.indexOf(s)<0)throw new Error(p.messages.errorSortNonExistentElement());(t=new p.Target).init(s,n),t.isInDom=!0,e.push(t)}i.newOrder=e}else"random"===i.newSort.order?i.newOrder=f.arrayShuffle(i.startOrder):""===i.newSort.attribute?(i.newOrder=n.origOrder.slice(),"desc"===i.newSort.order&&i.newOrder.reverse()):(i.newOrder=i.startOrder.slice(),i.newOrder.sort(function(e,t){return n.compare(e,t,i.newSort)}));f.isEqualArray(i.newOrder,i.startOrder)&&(i.willSort=!1),n.callActions("afterSortOperation",arguments)},compare:function(e,t,i){var n=i.order,s=this.getAttributeValue(e,i.attribute),a=this.getAttributeValue(t,i.attribute),a=isNaN(+s)||isNaN(+a)?(s=s.toLowerCase(),a.toLowerCase()):(s=+s,+a);return s<a?"asc"===n?-1:1:a<s?"asc"===n?1:-1:s===a&&i.next?this.compare(e,t,i.next):0},getAttributeValue:function(e,t){var i;return null===(i=e.dom.el.getAttribute("data-"+t))&&this.config.debug.showWarnings&&console.warn(p.messages.warningInconsistentSortingAttributes({attribute:"data-"+t})),this.callFilters("valueGetAttributeValue",i||0,arguments)},printSort:function(e,t){var i,n=e?t.newOrder:t.startOrder,s=e?t.startOrder:t.newOrder,a=n.length?n[n.length-1].dom.el.nextElementSibling:null,o=h.document.createDocumentFragment(),r=null,l=null,c=-1;for(this.callActions("beforePrintSort",arguments),c=0;r=n[c];c++)"absolute"!==(l=r.dom.el).style.position&&(f.removeWhitespace(l.previousSibling),l.parentElement.removeChild(l));for((i=a?a.previousSibling:this.dom.parent.lastChild)&&"#text"===i.nodeName&&f.removeWhitespace(i),c=0;r=s[c];c++)l=r.dom.el,f.isElement(o.lastChild)&&o.appendChild(h.document.createTextNode(" ")),o.appendChild(l);this.dom.parent.firstChild&&this.dom.parent.firstChild!==a&&o.insertBefore(h.document.createTextNode(" "),o.childNodes[0]),a?(o.appendChild(h.document.createTextNode(" ")),this.dom.parent.insertBefore(o,a)):this.dom.parent.appendChild(o),this.callActions("afterPrintSort",arguments)},parseSortString:function(e,t){for(var i=e.split(" "),n=t,s=[],a=-1,a=0;a<i.length;a++){switch(s=i[a].split(":"),n.sortString=i[a],n.attribute=f.dashCase(s[0]),n.order=s[1]||"asc",n.attribute){case"default":n.attribute="";break;case"random":n.attribute="",n.order="random"}if(!n.attribute||"random"===n.order)break;a<i.length-1&&(n.next=new p.CommandSort,f.freeze(n),n=n.next)}return this.callFilters("commandsParseSort",t,arguments)},parseEffects:function(){var e=this,t="",i=e.config.animation.effectsIn||e.config.animation.effects,n=e.config.animation.effectsOut||e.config.animation.effects;for(t in e.callActions("beforeParseEffects",arguments),e.effectsIn=new p.StyleData,e.effectsOut=new p.StyleData,e.transformIn=[],e.transformOut=[],e.effectsIn.opacity=e.effectsOut.opacity=1,e.parseEffect("fade",i,e.effectsIn,e.transformIn),e.parseEffect("fade",n,e.effectsOut,e.transformOut,!0),p.transformDefaults)p.transformDefaults[t]instanceof p.TransformData&&(e.parseEffect(t,i,e.effectsIn,e.transformIn),e.parseEffect(t,n,e.effectsOut,e.transformOut,!0));e.parseEffect("stagger",i,e.effectsIn,e.transformIn),e.parseEffect("stagger",n,e.effectsOut,e.transformOut,!0),e.callActions("afterParseEffects",arguments)},parseEffect:function(e,t,i,n,s){var a,o="",r="",l=["%","px","em","rem","vh","vw","deg"],c="",u=-1;if(this.callActions("beforeParseEffect",arguments),"string"!=typeof t)throw new TypeError(p.messages.errorConfigInvalidAnimationEffects());if(t.indexOf(e)<0)"stagger"===e&&(this.staggerDuration=0);else{switch(-1<(a=t.indexOf(e+"("))&&(o=t.substring(a),r=/\(([^)]+)\)/.exec(o)[1]),e){case"fade":i.opacity=r?parseFloat(r):0;break;case"stagger":this.staggerDuration=r?parseFloat(r):100;break;default:if(s&&this.config.animation.reverseOut&&"scale"!==e?i[e].value=-1*(r?parseFloat(r):p.transformDefaults[e].value):i[e].value=r?parseFloat(r):p.transformDefaults[e].value,r){for(u=0;c=l[u];u++)if(-1<r.indexOf(c)){i[e].unit=c;break}}else i[e].unit=p.transformDefaults[e].unit;n.push(e+"("+i[e].value+i[e].unit+")")}this.callActions("afterParseEffect",arguments)}},buildState:function(e){var t=new p.State,i=null,n=-1;for(this.callActions("beforeBuildState",arguments),n=0;i=this.targets[n];n++)(!e.toRemove.length||e.toRemove.indexOf(i)<0)&&t.targets.push(i.dom.el);for(n=0;i=e.matching[n];n++)t.matching.push(i.dom.el);for(n=0;i=e.show[n];n++)t.show.push(i.dom.el);for(n=0;i=e.hide[n];n++)(!e.toRemove.length||e.toRemove.indexOf(i)<0)&&t.hide.push(i.dom.el);return t.id=this.id,t.container=this.dom.container,t.activeFilter=e.newFilter,t.activeSort=e.newSort,t.activeDataset=e.newDataset,t.activeContainerClassName=e.newContainerClassName,t.hasFailed=e.hasFailed,t.totalTargets=this.targets.length,t.totalShow=e.show.length,t.totalHide=e.hide.length,t.totalMatching=e.matching.length,t.triggerElement=e.triggerElement,this.callFilters("stateBuildState",t,arguments)},goMix:function(e,t){var i=this,n=null;return i.callActions("beforeGoMix",arguments),i.config.animation.duration&&i.config.animation.effects&&f.isVisible(i.dom.container)||(e=!1),t.toShow.length||t.toHide.length||t.willSort||t.willChangeLayout||(e=!1),t.startState.show.length||t.show.length||(e=!1),p.events.fire("mixStart",i.dom.container,{state:t.startState,futureState:t.newState,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixStart&&i.config.callbacks.onMixStart.call(i.dom.container,t.startState,t.newState,i),f.removeClass(i.dom.container,f.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed)),n=i.userDeferred?i.userDeferred:i.userDeferred=f.defer(p.libraries),i.isBusy=!0,e&&p.features.has.transitions?(h.pageYOffset!==t.docState.scrollTop&&h.scrollTo(t.docState.scrollLeft,t.docState.scrollTop),i.config.animation.applyPerspective&&(i.dom.parent.style[p.features.perspectiveProp]=i.config.animation.perspectiveDistance,i.dom.parent.style[p.features.perspectiveOriginProp]=i.config.animation.perspectiveOrigin),i.config.animation.animateResizeContainer&&t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(i.dom.parent.style.height=t.startHeight+"px"),i.config.animation.animateResizeContainer&&t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(i.dom.parent.style.width=t.startWidth+"px"),t.startHeight===t.newHeight&&(i.dom.parent.style.height=t.startHeight+"px"),t.startWidth===t.newWidth&&(i.dom.parent.style.width=t.startWidth+"px"),t.startHeight===t.newHeight&&t.startWidth===t.newWidth&&(i.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){i.moveTargets(t)})):i.config.debug.fauxAsync?setTimeout(function(){i.cleanUp(t)},i.config.animation.duration):i.cleanUp(t),i.callFilters("promiseGoMix",n.promise,arguments)},getStartMixData:function(e){var t=h.getComputedStyle(this.dom.parent),i=this.dom.parent.getBoundingClientRect(),n=null,s={},a=-1,o=t[p.features.boxSizingProp];for(this.incPadding="border-box"===o,this.callActions("beforeGetStartMixData",arguments),a=0;n=e.show[a];a++)s=n.getPosData(),e.showPosData[a]={startPosData:s};for(a=0;n=e.toHide[a];a++)s=n.getPosData(),e.toHidePosData[a]={startPosData:s};e.startX=i.left,e.startY=i.top,e.startHeight=this.incPadding?i.height:i.height-parseFloat(t.paddingTop)-parseFloat(t.paddingBottom)-parseFloat(t.borderTop)-parseFloat(t.borderBottom),e.startWidth=this.incPadding?i.width:i.width-parseFloat(t.paddingLeft)-parseFloat(t.paddingRight)-parseFloat(t.borderLeft)-parseFloat(t.borderRight),this.callActions("afterGetStartMixData",arguments)},setInter:function(e){var t=this,i=null,n=-1;for(t.callActions("beforeSetInter",arguments),t.config.animation.clampHeight&&(t.dom.parent.style.height=e.startHeight+"px",t.dom.parent.style.overflow="hidden"),t.config.animation.clampWidth&&(t.dom.parent.style.width=e.startWidth+"px",t.dom.parent.style.overflow="hidden"),n=0;i=e.toShow[n];n++)i.show();e.willChangeLayout&&(f.removeClass(t.dom.container,e.startContainerClassName),f.addClass(t.dom.container,e.newContainerClassName)),t.callActions("afterSetInter",arguments)},getInterMixData:function(e){var t=null,i=-1;for(this.callActions("beforeGetInterMixData",arguments),i=0;t=e.show[i];i++)e.showPosData[i].interPosData=t.getPosData();for(i=0;t=e.toHide[i];i++)e.toHidePosData[i].interPosData=t.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(e){var t=null,i=-1;for(this.callActions("beforeSetFinal",arguments),e.willSort&&this.printSort(!1,e),i=0;t=e.toHide[i];i++)t.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(e){var t,i=this,n=null,s=null,a=-1;for(i.callActions("beforeGetFinalMixData",arguments),a=0;s=e.show[a];a++)e.showPosData[a].finalPosData=s.getPosData();for(a=0;s=e.toHide[a];a++)e.toHidePosData[a].finalPosData=s.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(n=h.getComputedStyle(i.dom.parent)),t=i.dom.parent.getBoundingClientRect(),e.newX=t.left,e.newY=t.top,e.newHeight=i.incPadding?t.height:t.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),e.newWidth=i.incPadding?t.width:t.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),e.viewportDeltaX=e.docState.viewportWidth-this.dom.document.documentElement.clientWidth,e.viewportDeltaY=e.docState.viewportHeight-this.dom.document.documentElement.clientHeight,e.willSort&&i.printSort(!0,e),a=0;s=e.toShow[a];a++)s.hide();for(a=0;s=e.toHide[a];a++)s.show();e.willChangeLayout&&(f.removeClass(i.dom.container,e.newContainerClassName),f.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(e){var t=this,i=null,n=null,s=Object.getOwnPropertyNames(t.effectsIn),a="",o=null,r=-1,l=-1,c=-1,u=-1;for(t.callActions("beforeGetTweenData",arguments),c=0;i=e.show[c];c++)for((n=e.showPosData[c]).posIn=new p.StyleData,n.posOut=new p.StyleData,n.tweenData=new p.StyleData,i.isShown?(n.posIn.x=n.startPosData.x-n.interPosData.x,n.posIn.y=n.startPosData.y-n.interPosData.y):n.posIn.x=n.posIn.y=0,n.posOut.x=n.finalPosData.x-n.interPosData.x,n.posOut.y=n.finalPosData.y-n.interPosData.y,n.posIn.opacity=i.isShown?1:t.effectsIn.opacity,n.posOut.opacity=1,n.tweenData.opacity=n.posOut.opacity-n.posIn.opacity,i.isShown||t.config.animation.nudge||(n.posIn.x=n.posOut.x,n.posIn.y=n.posOut.y),n.tweenData.x=n.posOut.x-n.posIn.x,n.tweenData.y=n.posOut.y-n.posIn.y,t.config.animation.animateResizeTargets&&(n.posIn.width=n.startPosData.width,n.posIn.height=n.startPosData.height,r=(n.startPosData.width||n.finalPosData.width)-n.interPosData.width,n.posIn.marginRight=n.startPosData.marginRight-r,l=(n.startPosData.height||n.finalPosData.height)-n.interPosData.height,n.posIn.marginBottom=n.startPosData.marginBottom-l,n.posOut.width=n.finalPosData.width,n.posOut.height=n.finalPosData.height,r=(n.finalPosData.width||n.startPosData.width)-n.interPosData.width,n.posOut.marginRight=n.finalPosData.marginRight-r,l=(n.finalPosData.height||n.startPosData.height)-n.interPosData.height,n.posOut.marginBottom=n.finalPosData.marginBottom-l,n.tweenData.width=n.posOut.width-n.posIn.width,n.tweenData.height=n.posOut.height-n.posIn.height,n.tweenData.marginRight=n.posOut.marginRight-n.posIn.marginRight,n.tweenData.marginBottom=n.posOut.marginBottom-n.posIn.marginBottom),u=0;a=s[u];u++)(o=t.effectsIn[a])instanceof p.TransformData&&o.value&&(n.posIn[a].value=o.value,n.posOut[a].value=0,n.tweenData[a].value=n.posOut[a].value-n.posIn[a].value,n.posIn[a].unit=n.posOut[a].unit=n.tweenData[a].unit=o.unit);for(c=0;i=e.toHide[c];c++)for((n=e.toHidePosData[c]).posIn=new p.StyleData,n.posOut=new p.StyleData,n.tweenData=new p.StyleData,n.posIn.x=i.isShown?n.startPosData.x-n.interPosData.x:0,n.posIn.y=i.isShown?n.startPosData.y-n.interPosData.y:0,n.posOut.x=t.config.animation.nudge?0:n.posIn.x,n.posOut.y=t.config.animation.nudge?0:n.posIn.y,n.tweenData.x=n.posOut.x-n.posIn.x,n.tweenData.y=n.posOut.y-n.posIn.y,t.config.animation.animateResizeTargets&&(n.posIn.width=n.startPosData.width,n.posIn.height=n.startPosData.height,r=n.startPosData.width-n.interPosData.width,n.posIn.marginRight=n.startPosData.marginRight-r,l=n.startPosData.height-n.interPosData.height,n.posIn.marginBottom=n.startPosData.marginBottom-l),n.posIn.opacity=1,n.posOut.opacity=t.effectsOut.opacity,n.tweenData.opacity=n.posOut.opacity-n.posIn.opacity,u=0;a=s[u];u++)(o=t.effectsOut[a])instanceof p.TransformData&&o.value&&(n.posIn[a].value=0,n.posOut[a].value=o.value,n.tweenData[a].value=n.posOut[a].value-n.posIn[a].value,n.posIn[a].unit=n.posOut[a].unit=n.tweenData[a].unit=o.unit);t.callActions("afterGetTweenData",arguments)},moveTargets:function(e){var t=this,i=null,n=null,s=null,a="",o=!1,r=-1,l=-1,c=t.checkProgress.bind(t);for(t.callActions("beforeMoveTargets",arguments),l=0;i=e.show[l];l++)n=new p.IMoveData,s=e.showPosData[l],a=i.isShown?"none":"show",(o=t.willTransition(a,e.hasEffect,s.posIn,s.posOut))&&r++,i.show(),n.posIn=s.posIn,n.posOut=s.posOut,n.statusChange=a,n.staggerIndex=r,n.operation=e,n.callback=o?c:null,i.move(n);for(l=0;i=e.toHide[l];l++)s=e.toHidePosData[l],n=new p.IMoveData,a="hide",o=t.willTransition(a,s.posIn,s.posOut),n.posIn=s.posIn,n.posOut=s.posOut,n.statusChange=a,n.staggerIndex=l,n.operation=e,n.callback=o?c:null,i.move(n);t.config.animation.animateResizeContainer&&(t.dom.parent.style[p.features.transitionProp]="height "+t.config.animation.duration+"ms ease, width "+t.config.animation.duration+"ms ease ",requestAnimationFrame(function(){e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(t.dom.parent.style.height=e.newHeight+"px"),e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(t.dom.parent.style.width=e.newWidth+"px")})),e.willChangeLayout&&(f.removeClass(t.dom.container,t.config.layout.ContainerClassName),f.addClass(t.dom.container,e.newContainerClassName)),t.callActions("afterMoveTargets",arguments)},hasEffect:function(){var e=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],t="",i=null,n=!1,s=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(s=0;t=e[s];s++)if(0!==("undefined"!==(i=this.effectsIn[t]).value?i.value:i)){n=!0;break}return this.callFilters("resultHasEffect",n,arguments)},willTransition:function(e,t,i,n){var s=!1,s=!!f.isVisible(this.dom.container)&&(!!("none"!==e&&t||i.x!==n.x||i.y!==n.y)||!!this.config.animation.animateResizeTargets&&(i.width!==n.width||i.height!==n.height||i.marginRight!==n.marginRight||i.marginTop!==n.marginTop));return this.callFilters("resultWillTransition",s,arguments)},checkProgress:function(e){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(e)},cleanUp:function(e){var t=this,i=null,n=null,s=null,a=null,o=-1;for(t.callActions("beforeCleanUp",arguments),t.targetsMoved=t.targetsImmovable=t.targetsBound=t.targetsDone=0,o=0;i=e.show[o];o++)i.cleanUp(),i.show();for(o=0;i=e.toHide[o];o++)i.cleanUp(),i.hide();if(e.willSort&&t.printSort(!1,e),t.dom.parent.style[p.features.transitionProp]=t.dom.parent.style.height=t.dom.parent.style.width=t.dom.parent.style.overflow=t.dom.parent.style[p.features.perspectiveProp]=t.dom.parent.style[p.features.perspectiveOriginProp]="",e.willChangeLayout&&(f.removeClass(t.dom.container,e.startContainerClassName),f.addClass(t.dom.container,e.newContainerClassName)),e.toRemove.length){for(o=0;i=t.targets[o];o++)-1<e.toRemove.indexOf(i)&&((n=i.dom.el.previousSibling)&&"#text"===n.nodeName&&(s=i.dom.el.nextSibling)&&"#text"===s.nodeName&&f.removeWhitespace(n),e.willSort||t.dom.parent.removeChild(i.dom.el),t.targets.splice(o,1),i.isInDom=!1,o--);t.origOrder=t.targets}e.willSort&&(t.targets=e.newOrder),t.state=e.newState,t.lastOperation=e,t.dom.targets=t.state.targets,p.events.fire("mixEnd",t.dom.container,{state:t.state,instance:t},t.dom.document),"function"==typeof t.config.callbacks.onMixEnd&&t.config.callbacks.onMixEnd.call(t.dom.container,t.state,t),e.hasFailed&&(p.events.fire("mixFail",t.dom.container,{state:t.state,instance:t},t.dom.document),"function"==typeof t.config.callbacks.onMixFail&&t.config.callbacks.onMixFail.call(t.dom.container,t.state,t),f.addClass(t.dom.container,f.getClassname(t.config.classNames,"container",t.config.classNames.modifierFailed))),"function"==typeof t.userCallback&&t.userCallback.call(t.dom.container,t.state,t),"function"==typeof t.userDeferred.resolve&&t.userDeferred.resolve(t.state),t.userCallback=null,t.userDeferred=null,t.lastClicked=null,t.isToggling=!1,t.isBusy=!1,t.queue.length&&(t.callActions("beforeReadQueueCleanUp",arguments),a=t.queue.shift(),t.userDeferred=a.deferred,t.isToggling=a.isToggling,t.lastClicked=a.triggerElement,a.instruction.command instanceof p.CommandMultimix?t.multimix.apply(t,a.args):t.dataset.apply(t,a.args)),t.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(e){var t=new p.UserInstruction,i=null,n=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandMultimix,n=0;n<e.length;n++)null!==(i=e[n])&&("object"==typeof i?f.extend(t.command,i):"boolean"==typeof i?t.animate=i:"function"==typeof i&&(t.callback=i));return!t.command.insert||t.command.insert instanceof p.CommandInsert||(t.command.insert=this.parseInsertArgs([t.command.insert]).command),!t.command.remove||t.command.remove instanceof p.CommandRemove||(t.command.remove=this.parseRemoveArgs([t.command.remove]).command),!t.command.filter||t.command.filter instanceof p.CommandFilter||(t.command.filter=this.parseFilterArgs([t.command.filter]).command),!t.command.sort||t.command.sort instanceof p.CommandSort||(t.command.sort=this.parseSortArgs([t.command.sort]).command),!t.command.changeLayout||t.command.changeLayout instanceof p.CommandChangeLayout||(t.command.changeLayout=this.parseChangeLayoutArgs([t.command.changeLayout]).command),t=this.callFilters("instructionParseMultimixArgs",t,arguments),f.freeze(t),t},parseFilterArgs:function(e){var t=new p.UserInstruction,i=null,n=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandFilter,n=0;n<e.length;n++)"string"==typeof(i=e[n])?t.command.selector=i:null===i?t.command.collection=[]:"object"==typeof i&&f.isElement(i,this.dom.document)?t.command.collection=[i]:"object"==typeof i&&void 0!==i.length?t.command.collection=f.arrayFromList(i):"object"==typeof i?f.extend(t.command,i):"boolean"==typeof i?t.animate=i:"function"==typeof i&&(t.callback=i);if(t.command.selector&&t.command.collection)throw new Error(p.messages.errorFilterInvalidArguments());return t=this.callFilters("instructionParseFilterArgs",t,arguments),f.freeze(t),t},parseSortArgs:function(e){var t=new p.UserInstruction,i=null,n="",s=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandSort,s=0;s<e.length;s++)if(null!==(i=e[s]))switch(typeof i){case"string":n=i;break;case"object":i.length&&(t.command.collection=f.arrayFromList(i));break;case"boolean":t.animate=i;break;case"function":t.callback=i}return n&&(t.command=this.parseSortString(n,t.command)),t=this.callFilters("instructionParseSortArgs",t,arguments),f.freeze(t),t},parseInsertArgs:function(e){var t=new p.UserInstruction,i=null,n=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandInsert,n=0;n<e.length;n++)null!==(i=e[n])&&("number"==typeof i?t.command.index=i:"string"==typeof i&&-1<["before","after"].indexOf(i)?t.command.position=i:"string"==typeof i?t.command.collection=f.arrayFromList(f.createElement(i).childNodes):"object"==typeof i&&f.isElement(i,this.dom.document)?t.command.collection.length?t.command.sibling=i:t.command.collection=[i]:"object"==typeof i&&i.length?t.command.collection.length?t.command.sibling=i[0]:t.command.collection=i:"object"==typeof i&&i.childNodes&&i.childNodes.length?t.command.collection.length?t.command.sibling=i.childNodes[0]:t.command.collection=f.arrayFromList(i.childNodes):"object"==typeof i?f.extend(t.command,i):"boolean"==typeof i?t.animate=i:"function"==typeof i&&(t.callback=i));if(t.command.index&&t.command.sibling)throw new Error(p.messages.errorInsertInvalidArguments());return!t.command.collection.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningInsertNoElements()),t=this.callFilters("instructionParseInsertArgs",t,arguments),f.freeze(t),t},parseRemoveArgs:function(e){var t=new p.UserInstruction,i=null,n=null,s=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandRemove,s=0;s<e.length;s++)if(null!==(n=e[s]))switch(typeof n){case"number":this.targets[n]&&(t.command.targets[0]=this.targets[n]);break;case"string":t.command.collection=f.arrayFromList(this.dom.parent.querySelectorAll(n));break;case"object":n&&n.length?t.command.collection=n:f.isElement(n,this.dom.document)?t.command.collection=[n]:f.extend(t.command,n);break;case"boolean":t.animate=n;break;case"function":t.callback=n}if(t.command.collection.length)for(s=0;i=this.targets[s];s++)-1<t.command.collection.indexOf(i.dom.el)&&t.command.targets.push(i);return!t.command.targets.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningRemoveNoElements()),f.freeze(t),t},parseDatasetArgs:function(e){var t=new p.UserInstruction,i=null,n=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandDataset,n=0;n<e.length;n++)if(null!==(i=e[n]))switch(typeof i){case"object":Array.isArray(i)||"number"==typeof i.length?t.command.dataset=i:f.extend(t.command,i);break;case"boolean":t.animate=i;break;case"function":t.callback=i}return f.freeze(t),t},parseChangeLayoutArgs:function(e){var t=new p.UserInstruction,i=null,n=-1;for(t.animate=this.config.animation.enable,t.command=new p.CommandChangeLayout,n=0;n<e.length;n++)if(null!==(i=e[n]))switch(typeof i){case"string":t.command.containerClassName=i;break;case"object":f.extend(t.command,i);break;case"boolean":t.animate=i;break;case"function":t.callback=i}return f.freeze(t),t},queueMix:function(e){var t=this,i=null,n="";return t.callActions("beforeQueueMix",arguments),i=f.defer(p.libraries),t.config.animation.queue&&t.queue.length<t.config.animation.queueLimit?(e.deferred=i,t.queue.push(e),t.config.controls.enable&&(t.isToggling?(t.buildToggleArray(e.instruction.command),n=t.getToggleSelector(),t.updateControls({filter:{selector:n}})):t.updateControls(e.instruction.command))):(t.config.debug.showWarnings&&console.warn(p.messages.warningMultimixInstanceQueueFull()),i.resolve(t.state),p.events.fire("mixBusy",t.dom.container,{state:t.state,instance:t},t.dom.document),"function"==typeof t.config.callbacks.onMixBusy&&t.config.callbacks.onMixBusy.call(t.dom.container,t.state,t)),t.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(e){var t=this,i=new p.Operation,n=[],i=t.callFilters("operationUnmappedGetDataOperation",i,arguments);if(t.dom.targets.length&&!(n=t.state.activeDataset||[]).length)throw new Error(p.messages.errorDatasetNotSet());return i.id=f.randomHex(),i.startState=t.state,i.startDataset=n,i.newDataset=e.slice(),t.diffDatasets(i),i.startOrder=t.targets,i.newOrder=i.show,t.config.animation.enable&&(t.getStartMixData(i),t.setInter(i),i.docState=f.getDocumentState(t.dom.document),t.getInterMixData(i),t.setFinal(i),t.getFinalMixData(i),t.parseEffects(),i.hasEffect=t.hasEffect(),t.getTweenData(i)),t.targets=i.show.slice(),i.newState=t.buildState(i),Array.prototype.push.apply(t.targets,i.toRemove),i=t.callFilters("operationMappedGetDataOperation",i,arguments)},diffDatasets:function(e){var t=this,i=[],n=[],s=[],a=null,o=null,r=null,l=null,c=null,u={},d="",h=-1;for(t.callActions("beforeDiffDatasets",arguments),h=0;a=e.newDataset[h];h++){if(void 0===(d=a[t.config.data.uidKey])||d.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:t.config.data.uidKey}));if(u[d])throw new Error(p.messages.errorDatasetDuplicateUid({uid:d}));u[d]=!0,(o=t.cache[d])instanceof p.Target?(t.config.data.dirtyCheck&&!f.deepEquals(a,o.data)&&(r=o.render(a),o.data=a,r!==o.dom.el&&(o.isInDom&&(o.unbindEvents(),t.dom.parent.replaceChild(r,o.dom.el)),o.isShown||(r.style.display="none"),o.dom.el=r,o.isInDom&&o.bindEvents())),r=o.dom.el):((o=new p.Target).init(null,t,a),o.hide()),o.isInDom?(c=o.dom.el.nextElementSibling,n.push(d),l&&(l.lastElementChild&&l.appendChild(t.dom.document.createTextNode(" ")),t.insertDatasetFrag(l,o.dom.el,s),l=null)):((l=l||t.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(t.dom.document.createTextNode(" ")),l.appendChild(o.dom.el),o.isInDom=!0,o.unbindEvents(),o.bindEvents(),o.hide(),e.toShow.push(o),s.push(o)),e.show.push(o)}for(l&&((c=c||t.config.layout.siblingAfter)&&l.appendChild(t.dom.document.createTextNode(" ")),t.insertDatasetFrag(l,c,s)),h=0;a=e.startDataset[h];h++)d=a[t.config.data.uidKey],o=t.cache[d],e.show.indexOf(o)<0?(e.hide.push(o),e.toHide.push(o),e.toRemove.push(o)):i.push(d);f.isEqualArray(i,n)||(e.willSort=!0),t.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(e,t,i){var n=t?f.arrayFromList(this.dom.parent.children).indexOf(t):this.targets.length;for(this.dom.parent.insertBefore(e,t);i.length;)this.targets.splice(n,0,i.shift()),n++},willSort:function(e,t){var i=!1,i=!!(this.config.behavior.liveSort||"random"===e.order||e.attribute!==t.attribute||e.order!==t.order||e.collection!==t.collection||null===e.next&&t.next||e.next&&null===t.next)||!(!e.next||!t.next)&&this.willSort(e.next,t.next);return this.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var e=this.parseFilterArgs(arguments);return this.multimix({filter:e.command},e.animate,e.callback)},toggleOn:function(){var e,t=this.parseFilterArgs(arguments),i=t.command.selector;return this.isToggling=!0,this.toggleArray.indexOf(i)<0&&this.toggleArray.push(i),e=this.getToggleSelector(),this.multimix({filter:e},t.animate,t.callback)},toggleOff:function(){var e,t=this.parseFilterArgs(arguments),i=t.command.selector,n=this.toggleArray.indexOf(i);return this.isToggling=!0,-1<n&&this.toggleArray.splice(n,1),e=this.getToggleSelector(),this.multimix({filter:e},t.animate,t.callback)},sort:function(){var e=this.parseSortArgs(arguments);return this.multimix({sort:e.command},e.animate,e.callback)},changeLayout:function(){var e=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:e.command},e.animate,e.callback)},dataset:function(){var e=this.parseDatasetArgs(arguments),t=null,i=null,n=!1;return this.callActions("beforeDataset",arguments),this.isBusy?((i=new p.QueueItem).args=arguments,i.instruction=e,this.queueMix(i)):(e.callback&&(this.userCallback=e.callback),n=e.animate^this.config.animation.enable?e.animate:this.config.animation.enable,t=this.getDataOperation(e.command.dataset),this.goMix(n,t))},multimix:function(){var e=this,t=null,i=!1,n=null,s=e.parseMultimixArgs(arguments);return e.callActions("beforeMultimix",arguments),e.isBusy?((n=new p.QueueItem).args=arguments,n.instruction=s,n.triggerElement=e.lastClicked,n.isToggling=e.isToggling,e.queueMix(n)):(t=e.getOperation(s.command),e.config.controls.enable&&(s.command.filter&&!e.isToggling&&(e.toggleArray.length=0,e.buildToggleArray(t.command)),e.queue.length<1&&e.updateControls(t.command)),s.callback&&(e.userCallback=s.callback),i=s.animate^e.config.animation.enable?s.animate:e.config.animation.enable,e.callFilters("operationMultimix",t,arguments),e.goMix(i,t))},getOperation:function(e){var t=this,i=e.sort,n=e.filter,s=e.changeLayout,a=e.remove,o=e.insert,r=new p.Operation;return(r=t.callFilters("operationUnmappedGetOperation",r,arguments)).id=f.randomHex(),r.command=e,r.startState=t.state,r.triggerElement=t.lastClicked,t.isBusy?(t.config.debug.showWarnings&&console.warn(p.messages.warningGetOperationInstanceBusy()),null):(o&&t.insertTargets(o,r),a&&(r.toRemove=a.targets),r.startSort=r.newSort=r.startState.activeSort,r.startOrder=r.newOrder=t.targets,i&&(r.startSort=r.startState.activeSort,r.newSort=i,r.willSort=t.willSort(i,r.startState.activeSort),r.willSort&&t.sortOperation(r)),r.startFilter=r.startState.activeFilter,r.newFilter=n||f.extend(new p.CommandFilter,r.startFilter),"all"===r.newFilter.selector?r.newFilter.selector=t.config.selectors.target:"none"===r.newFilter.selector&&(r.newFilter.selector=""),t.filterOperation(r),r.startContainerClassName=r.startState.activeContainerClassName,s?(r.newContainerClassName=s.containerClassName,r.newContainerClassName!==r.startContainerClassName&&(r.willChangeLayout=!0)):r.newContainerClassName=r.startContainerClassName,t.config.animation.enable&&(t.getStartMixData(r),t.setInter(r),r.docState=f.getDocumentState(t.dom.document),t.getInterMixData(r),t.setFinal(r),t.getFinalMixData(r),t.parseEffects(),r.hasEffect=t.hasEffect(),t.getTweenData(r)),r.willSort&&(t.targets=r.newOrder),r.newState=t.buildState(r),t.callFilters("operationMappedGetOperation",r,arguments))},tween:function(e,t){var i=null,n=null,s=-1,a=-1;for(t=Math.min(t,1),t=Math.max(t,0),a=0;i=e.show[a];a++)n=e.showPosData[a],i.applyTween(n,t);for(a=0;i=e.hide[a];a++)i.isShown&&i.hide(),-1<(s=e.toHide.indexOf(i))&&(n=e.toHidePosData[s],i.isShown||i.show(),i.applyTween(n,t))},insert:function(){var e=this.parseInsertArgs(arguments);return this.multimix({insert:e.command},e.animate,e.callback)},insertBefore:function(){var e=this.parseInsertArgs(arguments);return this.insert(e.command.collection,"before",e.command.sibling,e.animate,e.callback)},insertAfter:function(){var e=this.parseInsertArgs(arguments);return this.insert(e.command.collection,"after",e.command.sibling,e.animate,e.callback)},prepend:function(){var e=this.parseInsertArgs(arguments);return this.insert(0,e.command.collection,e.animate,e.callback)},append:function(){var e=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,e.command.collection,e.animate,e.callback)},remove:function(){var e=this.parseRemoveArgs(arguments);return this.multimix({remove:e.command},e.animate,e.callback)},getConfig:function(e){var t=null,t=e?f.getProperty(this.config,e):this.config;return this.callFilters("valueGetConfig",t,arguments)},configure:function(e){this.callActions("beforeConfigure",arguments),f.extend(this.config,e,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var e=new p.State;return f.extend(e,this.state),f.freeze(e),this.callFilters("stateGetState",e,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var e=null,t=null,i="";for(i in this.cache)(t=(e=this.cache[i]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),this.dom.parent.replaceChild(t,e.dom.el)),e.isShown||(t.style.display="none"),e.dom.el=t,e.isInDom&&e.bindEvents());this.state=this.buildState(this.lastOperation)},destroy:function(e){var t=null,i=null,n=0;for(this.callActions("beforeDestroy",arguments),n=0;t=this.controls[n];n++)t.removeBinding(this);for(n=0;i=this.targets[n];n++)e&&i.show(),i.unbindEvents();this.dom.container.id.match(/^MixItUp/)&&this.dom.container.removeAttribute("id"),delete p.instances[this.id],this.callActions("afterDestroy",arguments)}}),p.IMoveData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.IMoveData),p.IMoveData.prototype=Object.create(p.Base.prototype),p.IMoveData.prototype.constructor=p.IMoveData,p.TargetDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TargetDom),p.TargetDom.prototype=Object.create(p.Base.prototype),p.TargetDom.prototype.constructor=p.TargetDom,p.Target=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new p.TargetDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Target),p.Target.prototype=Object.create(p.Base.prototype),f.extend(p.Target.prototype,{constructor:p.Target,init:function(e,t,i){var n=this,s="";if(n.callActions("beforeInit",arguments),n.mixer=t,e=e||n.render(i),n.cacheDom(e),n.bindEvents(),"none"!==n.dom.el.style.display&&(n.isShown=!0),i&&t.config.data.uidKey){if(void 0===(s=i[t.config.data.uidKey])||s.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:t.config.data.uidKey}));n.id=s,n.data=i,t.cache[s]=n}n.callActions("afterInit",arguments)},render:function(e){var t,i=null,n=null,s=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(i=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(p.messages.errorDatasetRendererNotSet());return(t=i(e))&&"object"==typeof t&&f.isElement(t)?n=t:"string"==typeof t&&((s=document.createElement("div")).innerHTML=t,n=s.firstElementChild),this.callFilters("elRender",n,arguments)},cacheDom:function(e){this.callActions("beforeCacheDom",arguments),this.dom.el=e,this.callActions("afterCacheDom",arguments)},getSortString:function(e){var t=this.dom.el.getAttribute("data-"+e)||"";this.callActions("beforeGetSortString",arguments),t=isNaN(+t)?t.toLowerCase():+t,this.sortString=t,this.callActions("afterGetSortString",arguments)},show:function(){this.callActions("beforeShow",arguments),this.isShown||(this.dom.el.style.display="",this.isShown=!0),this.callActions("afterShow",arguments)},hide:function(){this.callActions("beforeHide",arguments),this.isShown&&(this.dom.el.style.display="none",this.isShown=!1),this.callActions("afterHide",arguments)},move:function(e){var t=this;t.callActions("beforeMove",arguments),t.isExcluded||t.mixer.targetsMoved++,t.applyStylesIn(e),requestAnimationFrame(function(){t.applyStylesOut(e)}),t.callActions("afterMove",arguments)},applyTween:function(e,t){var i="",n=null,s=e.posIn,a=[],o=new p.StyleData,r=-1;for(this.callActions("beforeApplyTween",arguments),o.x=s.x,o.y=s.y,0===t?this.hide():this.isShown||this.show(),r=0;i=p.features.TWEENABLE[r];r++)if(n=e.tweenData[i],"x"===i){if(!n)continue;o.x=s.x+n*t}else if("y"===i){if(!n)continue;o.y=s.y+n*t}else if(n instanceof p.TransformData){if(!n.value)continue;o[i].value=s[i].value+n.value*t,o[i].unit=n.unit,a.push(i+"("+o[i].value+n.unit+")")}else{if(!n)continue;o[i]=s[i]+n*t,this.dom.el.style[i]=o[i]}(o.x||o.y)&&a.unshift("translate("+o.x+"px, "+o.y+"px)"),a.length&&(this.dom.el.style[p.features.transformProp]=a.join(" ")),this.callActions("afterApplyTween",arguments)},applyStylesIn:function(e){var t=this,i=e.posIn,n=1!==t.mixer.effectsIn.opacity,s=[];t.callActions("beforeApplyStylesIn",arguments),s.push("translate("+i.x+"px, "+i.y+"px)"),t.mixer.config.animation.animateResizeTargets&&("show"!==e.statusChange&&(t.dom.el.style.width=i.width+"px",t.dom.el.style.height=i.height+"px"),t.dom.el.style.marginRight=i.marginRight+"px",t.dom.el.style.marginBottom=i.marginBottom+"px"),n&&(t.dom.el.style.opacity=i.opacity),"show"===e.statusChange&&(s=s.concat(t.mixer.transformIn)),t.dom.el.style[p.features.transformProp]=s.join(" "),t.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(e){var t=this,i=[],n=[],s=t.mixer.config.animation.animateResizeTargets,a=void 0!==t.mixer.effectsIn.opacity;if(t.callActions("beforeApplyStylesOut",arguments),i.push(t.writeTransitionRule(p.features.transformRule,e.staggerIndex)),"none"!==e.statusChange&&i.push(t.writeTransitionRule("opacity",e.staggerIndex,e.duration)),s&&(i.push(t.writeTransitionRule("width",e.staggerIndex,e.duration)),i.push(t.writeTransitionRule("height",e.staggerIndex,e.duration)),i.push(t.writeTransitionRule("margin",e.staggerIndex,e.duration))),!e.callback)return t.mixer.targetsImmovable++,void(t.mixer.targetsMoved===t.mixer.targetsImmovable&&t.mixer.cleanUp(e.operation));switch(t.operation=e.operation,t.callback=e.callback,t.isExcluded||t.mixer.targetsBound++,t.isBound=!0,t.applyTransition(i),s&&0<e.posOut.width&&0<e.posOut.height&&(t.dom.el.style.width=e.posOut.width+"px",t.dom.el.style.height=e.posOut.height+"px",t.dom.el.style.marginRight=e.posOut.marginRight+"px",t.dom.el.style.marginBottom=e.posOut.marginBottom+"px"),t.mixer.config.animation.nudge||"hide"!==e.statusChange||n.push("translate("+e.posOut.x+"px, "+e.posOut.y+"px)"),e.statusChange){case"hide":a&&(t.dom.el.style.opacity=t.mixer.effectsOut.opacity),n=n.concat(t.mixer.transformOut);break;case"show":a&&(t.dom.el.style.opacity=1)}(t.mixer.config.animation.nudge||!t.mixer.config.animation.nudge&&"hide"!==e.statusChange)&&n.push("translate("+e.posOut.x+"px, "+e.posOut.y+"px)"),t.dom.el.style[p.features.transformProp]=n.join(" "),t.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(e,t,i){var n=this.getDelay(t),s=e+" "+(0<i?i:this.mixer.config.animation.duration)+"ms "+n+"ms "+("opacity"===e?"linear":this.mixer.config.animation.easing);return this.callFilters("ruleWriteTransitionRule",s,arguments)},getDelay:function(e){var t;return"function"==typeof this.mixer.config.animation.staggerSequence&&(e=this.mixer.config.animation.staggerSequence.call(this,e,this.state)),t=this.mixer.staggerDuration?e*this.mixer.staggerDuration:0,this.callFilters("delayGetDelay",t,arguments)},applyTransition:function(e){var t=e.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[p.features.transitionProp]=t,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(e){var t=this,i=e.propertyName,n=t.mixer.config.animation.animateResizeTargets;t.callActions("beforeHandleTransitionEnd",arguments),t.isBound&&e.target.matches(t.mixer.config.selectors.target)&&(-1<i.indexOf("transform")||-1<i.indexOf("opacity")||n&&-1<i.indexOf("height")||n&&-1<i.indexOf("width")||n&&-1<i.indexOf("margin"))&&(t.callback.call(t,t.operation),t.isBound=!1,t.callback=null,t.operation=null),t.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(e){switch(this.callActions("beforeEventBus",arguments),e.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(e)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){this.callActions("beforeUnbindEvents",arguments),f.off(this.dom.el,"webkitTransitionEnd",this.handler),f.off(this.dom.el,"transitionend",this.handler),this.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var e,t=this;t.callActions("beforeBindEvents",arguments),e="webkit"===p.features.transitionPrefix?"webkitTransitionEnd":"transitionend",t.handler=function(e){return t.eventBus(e)},f.on(t.dom.el,e,t.handler),t.callActions("afterBindEvents",arguments)},getPosData:function(e){var t={},i=null,n=new p.StyleData;return this.callActions("beforeGetPosData",arguments),n.x=this.dom.el.offsetLeft,n.y=this.dom.el.offsetTop,(this.mixer.config.animation.animateResizeTargets||e)&&(i=this.dom.el.getBoundingClientRect(),n.top=i.top,n.right=i.right,n.bottom=i.bottom,n.left=i.left,n.width=i.width,n.height=i.height),this.mixer.config.animation.animateResizeTargets&&(t=h.getComputedStyle(this.dom.el),n.marginBottom=parseFloat(t.marginBottom),n.marginRight=parseFloat(t.marginRight)),this.callFilters("posDataGetPosData",n,arguments)},cleanUp:function(){var e=this;e.callActions("beforeCleanUp",arguments),e.dom.el.style[p.features.transformProp]="",e.dom.el.style[p.features.transitionProp]="",e.dom.el.style.opacity="",e.mixer.config.animation.animateResizeTargets&&(e.dom.el.style.width="",e.dom.el.style.height="",e.dom.el.style.marginRight="",e.dom.el.style.marginBottom=""),e.callActions("afterCleanUp",arguments)}}),p.Collection=function(e){var t=null,i=-1;for(this.callActions("beforeConstruct"),i=0;t=e[i];i++)this[i]=t;this.length=e.length,this.callActions("afterConstruct"),f.freeze(this)},p.BaseStatic.call(p.Collection),p.Collection.prototype=Object.create(p.Base.prototype),f.extend(p.Collection.prototype,{constructor:p.Collection,mixitup:function(e){var t=null,i=Array.prototype.slice.call(arguments),n=[],s=-1;for(this.callActions("beforeMixitup"),i.shift(),s=0;t=this[s];s++)n.push(t[e].apply(t,i));return this.callFilters("promiseMixitup",f.all(n,p.libraries),arguments)}}),p.Operation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Operation),p.Operation.prototype=Object.create(p.Base.prototype),p.Operation.prototype.constructor=p.Operation,p.State=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.State),p.State.prototype=Object.create(p.Base.prototype),p.State.prototype.constructor=p.State,p.UserInstruction=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UserInstruction),p.UserInstruction.prototype=Object.create(p.Base.prototype),p.UserInstruction.prototype.constructor=p.UserInstruction,p.Messages=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),f.seal(this)},p.BaseStatic.call(p.Messages),p.Messages.prototype=Object.create(p.Base.prototype),p.Messages.prototype.constructor=p.Messages,p.Messages.prototype.compileTemplates=function(){var e="",t="";for(e in this)"string"==typeof(t=this[e])&&(this[f.camelCase(e)]=f.template(t))},p.messages=new p.Messages,p.Facade=function(e){p.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=e.configure.bind(e),this.show=e.show.bind(e),this.hide=e.hide.bind(e),this.filter=e.filter.bind(e),this.toggleOn=e.toggleOn.bind(e),this.toggleOff=e.toggleOff.bind(e),this.sort=e.sort.bind(e),this.changeLayout=e.changeLayout.bind(e),this.multimix=e.multimix.bind(e),this.dataset=e.dataset.bind(e),this.tween=e.tween.bind(e),this.insert=e.insert.bind(e),this.insertBefore=e.insertBefore.bind(e),this.insertAfter=e.insertAfter.bind(e),this.prepend=e.prepend.bind(e),this.append=e.append.bind(e),this.remove=e.remove.bind(e),this.destroy=e.destroy.bind(e),this.forceRefresh=e.forceRefresh.bind(e),this.forceRender=e.forceRender.bind(e),this.isMixing=e.isMixing.bind(e),this.getOperation=e.getOperation.bind(e),this.getConfig=e.getConfig.bind(e),this.getState=e.getState.bind(e),this.callActions("afterConstruct",arguments),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.Facade),p.Facade.prototype=Object.create(p.Base.prototype),p.Facade.prototype.constructor=p.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=p:"function"==typeof define&&define.amd?define(function(){return p}):void 0!==h.mixitup&&"function"==typeof h.mixitup||(h.mixitup=p),p.BaseStatic.call(p.constructor),p.NAME="mixitup",p.CORE_VERSION="3.3.1"}(window),function(q){"use strict";var _='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',n={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},X={startColor:"#c0392b",endColor:"#f1c40f"};function Y(e,t,i){return e===t?e=t:e===i&&(e=i),e}function W(e){return void 0!==e}var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,V=function(e){if(!i.test(e))return null;var t=i.exec(e);return{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}};function G(e,t,i){var n=i/100*(t-e);return 1===(n=Math.round(e+n).toString(16)).length&&(n="0"+n),n}function U(a,p){this.node=a.get(0);var i=this;a.empty().addClass("jq-ry-container");var f,n,m,g,v,e,t=q("<div/>").addClass("jq-ry-group-wrapper").appendTo(a),y=q("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(t),s=q("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(t),b=0,o=p.rating,r=!1;function l(e){W(e)||(e=p.rating);var t=(o=e)/f,i=t*m;1<t&&(i+=(Math.ceil(t)-1)*v),x(p.ratedFill),(i=p.rtl?100-i:i)<0?i=0:100<i&&(i=100),s.css("width",i+"%")}function c(){e=n*p.numStars+g*(p.numStars-1),m=n/e*100,v=g/e*100,a.width(e),l()}function u(e){var t=p.starWidth=e;return n=window.parseFloat(p.starWidth.replace("px","")),y.find("svg").attr({width:p.starWidth,height:t}),s.find("svg").attr({width:p.starWidth,height:t}),c(),a}function d(e){return p.spacing=e,g=parseFloat(p.spacing.replace("px","")),y.find("svg:not(:first-child)").css({"margin-left":e}),s.find("svg:not(:first-child)").css({"margin-left":e}),c(),a}function h(e){return p.normalFill=e,(p.rtl?s:y).find("svg").attr({fill:p.normalFill}),a}var w=p.ratedFill;function x(e){var t,i;return p.multiColor?(t=(o-b)/p.maxValue*100,e=function(e,t,i){if(!e||!t)return null;i=W(i)?i:0,e=V(e),t=V(t);var n=G(e.r,t.r,i),s=G(e.b,t.b,i);return"#"+n+G(e.g,t.g,i)+s}((i=p.multiColor||{}).startColor||X.startColor,i.endColor||X.endColor,t)):w=e,p.ratedFill=e,(p.rtl?y:s).find("svg").attr({fill:p.ratedFill}),a}function C(e){e=!!e,p.rtl=e,h(p.normalFill),l()}function S(e){x((p.multiColor=e)||w)}function T(e){p.numStars=e,f=p.maxValue/p.numStars,y.empty(),s.empty();for(var t=0;t<p.numStars;t++)y.append(q(p.starSvg||_)),s.append(q(p.starSvg||_));return u(p.starWidth),h(p.normalFill),d(p.spacing),l(),a}function E(e){return p.maxValue=e,f=p.maxValue/p.numStars,p.rating>e&&O(e),l(),a}function k(e){return p.precision=e,O(p.rating),a}function A(e){return p.halfStar=e,a}function M(e){return p.fullStar=e,a}function P(e){var t,i,n,s,a,o=y.offset().left,r=o+y.width(),l=p.maxValue,c=e.pageX,u=0;if(c<o)u=b;else if(r<c)u=l;else{var d=(c-o)/(r-o);if(0<g)for(var h=d*=100;0<h;)m<h?(u+=f,h-=m+v):(u+=h/m*f,h=0);else u=d*p.maxValue;i=(t=u)%f,n=f/2,s=p.halfStar,((a=p.fullStar)||s)&&(a||s&&n<i?t+=f-i:(t-=i,0<i&&(t+=n))),u=t}return p.rtl&&(u=l-u),parseFloat(u)}function D(e){return p.readOnly=e,a.attr("readonly",!0),H(),e||(a.removeAttr("readonly"),a.on("mousemove",N).on("mouseenter",N).on("mouseleave",z).on("click",j).on("rateyo.init",F).on("rateyo.change",R).on("rateyo.set",B)),a}function O(e){var t=e,i=p.maxValue;return"string"==typeof t&&("%"===t[t.length-1]&&(t=t.substr(0,t.length-1),E(i=100)),t=parseFloat(t)),function(e,t,i){if(!(t<=e&&e<=i))throw Error("Invalid Rating, expected value between "+t+" and "+i)}(t,b,i),t=parseFloat(t.toFixed(p.precision)),Y(parseFloat(t),b,i),p.rating=t,l(),r&&a.trigger("rateyo.set",{rating:t}),a}function I(e){return p.onInit=e,a}function L(e){return p.onSet=e,a}function $(e){return p.onChange=e,a}function N(e){var t=P(e).toFixed(p.precision),i=p.maxValue;l(t=Y(parseFloat(t),b,i)),a.trigger("rateyo.change",{rating:t})}function z(){var e,t;t=!1,e=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(t=!0),t||(l(),a.trigger("rateyo.change",{rating:p.rating}))}function j(e){var t=P(e).toFixed(p.precision),t=parseFloat(t);i.rating(t)}function F(e,t){p.onInit&&"function"==typeof p.onInit&&p.onInit.apply(this,[t.rating,i])}function R(e,t){p.onChange&&"function"==typeof p.onChange&&p.onChange.apply(this,[t.rating,i])}function B(e,t){p.onSet&&"function"==typeof p.onSet&&p.onSet.apply(this,[t.rating,i])}function H(){a.off("mousemove",N).off("mouseenter",N).off("mouseleave",z).off("click",j).off("rateyo.init",F).off("rateyo.change",R).off("rateyo.set",B)}this.rating=function(e){return W(e)?(O(e),a):p.rating},this.destroy=function(){var n,s;return p.readOnly||H(),U.prototype.collection=(n=a.get(0),s=this.collection,q.each(s,function(e){if(n===this.node){var t=s.slice(0,e),i=s.slice(e+1,s.length);return s=t.concat(i),!1}}),s),a.removeClass("jq-ry-container").children().remove(),a},this.method=function(e){if(!e)throw Error("Method name not specified!");if(!W(this[e]))throw Error("Method "+e+" doesn't exist!");var t=Array.prototype.slice.apply(arguments,[]).slice(1);return this[e].apply(this,t)},this.option=function(e,t){if(!W(e))return p;var i;switch(e){case"starWidth":i=u;break;case"numStars":i=T;break;case"normalFill":i=h;break;case"ratedFill":i=x;break;case"multiColor":i=S;break;case"maxValue":i=E;break;case"precision":i=k;break;case"rating":i=O;break;case"halfStar":i=A;break;case"fullStar":i=M;break;case"readOnly":i=D;break;case"spacing":i=d;break;case"rtl":i=C;break;case"onInit":i=I;break;case"onSet":i=L;break;case"onChange":i=$;break;default:throw Error("No such option as "+e)}return W(t)?i(t):p[e]},T(p.numStars),D(p.readOnly),p.rtl&&C(p.rtl),this.collection.push(this),this.rating(p.rating,!0),r=!0,a.trigger("rateyo.init",{rating:p.rating})}function c(e,t){var i;return q.each(t,function(){if(e===this.node)return i=this,!1}),i}U.prototype.collection=[],window.RateYo=U,q.fn.rateYo=function(){return function(i){var a=U.prototype.collection,e=q(this);if(0===e.length)return e;var t=Array.prototype.slice.apply(arguments,[]);if(0===t.length)i=t[0]={};else{if(1!==t.length||"object"!=typeof t[0]){if(1<=t.length&&"string"==typeof t[0]){var o=t[0],r=t.slice(1),l=[];return q.each(e,function(e,t){var i=c(t,a);if(!i)throw Error("Trying to set options before even initialization");var n=i[o];if(!n)throw Error("Method "+o+" does not exist!");var s=n.apply(i,r);l.push(s)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}i=t[0]}return i=q.extend({},n,i),q.each(e,function(){var e=c(this,a);if(e)return e;var t=q(this),n={},s=q.extend({},i);return q.each(t.data(),function(e,t){var i;0===e.indexOf("rateyo")&&(i=(i=e.replace(/^rateyo/,""))[0].toLowerCase()+i.slice(1),n[i]=t,delete s[i])}),new U(q(this),q.extend({},n,s))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery),function(e){"function"==typeof define&&define.amd?define([],e):"undefined"!=typeof module&&null!==module&&module.exports?module.exports=e:e()}(function(){var s=Object.assign||window.jQuery&&jQuery.extend,m=8,a=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){return window.setTimeout(function(){e()},25)};function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var i=document.createEvent("CustomEvent");return i.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),i}"function"!=typeof window.CustomEvent&&(e.prototype=window.Event.prototype,window.CustomEvent=e);var o,n={textarea:!0,input:!0,select:!0,button:!0},r={move:"mousemove",cancel:"mouseup dragstart",end:"mouseup"},l={move:"touchmove",cancel:"touchend",end:"touchend"},c=/\s+/,u={bubbles:!0,cancelable:!0},t="function"==typeof Symbol?Symbol("events"):{};function d(e){return e[t]||(e[t]={})}function h(e,t,i,n){t=t.split(c);var s,a=d(e),o=t.length;function r(e){i(e,n)}for(;o--;)(a[s=t[o]]||(a[s]=[])).push([i,r]),e.addEventListener(s,r)}function p(e,t,i){t=t.split(c);var n,s,a,o=d(e),r=t.length;if(o)for(;r--;)if(s=o[n=t[r]])for(a=s.length;a--;)s[a][0]===i&&(e.removeEventListener(n,s[a][1]),s.splice(a,1))}function g(e,t,i){var n=new CustomEvent(t,u);i&&s(n,i),e.dispatchEvent(n)}function f(e){var i=e,n=!1,s=!1;function t(e){n?(i(),a(t),n=!(s=!0)):s=!1}this.kick=function(e){n=!0,s||t()},this.end=function(e){var t=i;e&&(s?(i=n?function(){t(),e()}:e,n=!0):e())}}function v(){}function y(e){e.preventDefault()}function b(e,t){var i,n;if(e.identifiedTouch)return e.identifiedTouch(t);for(i=-1,n=e.length;++i<n;)if(e[i].identifier===t)return e[i]}function w(e,t){var i=b(e.changedTouches,t.identifier);if(i&&(i.pageX!==t.pageX||i.pageY!==t.pageY))return i}function i(e,t){T(e,t,e,C)}function x(e,t){C()}function C(){p(document,r.move,i),p(document,r.cancel,x)}function S(e){p(document,l.move,e.touchmove),p(document,l.cancel,e.touchend)}function T(e,t,i,n){var s,a,o,r,l,c,u,d,h,p=i.pageX-t.pageX,f=i.pageY-t.pageY;p*p+f*f<m*m||(a=t,o=i,r=p,l=f,c=n,u=(s=e).targetTouches,d=s.timeStamp-a.timeStamp,h={altKey:s.altKey,ctrlKey:s.ctrlKey,shiftKey:s.shiftKey,startX:a.pageX,startY:a.pageY,distX:r,distY:l,deltaX:r,deltaY:l,pageX:o.pageX,pageY:o.pageY,velocityX:r/d,velocityY:l/d,identifier:a.identifier,targetTouches:u,finger:u?u.length:1,enableMove:function(){this.moveEnabled=!0,this.enableMove=v,s.preventDefault()}},g(a.target,"movestart",h),c(a))}function E(e,t){var i=t.timer;t.touch=e,t.timeStamp=e.timeStamp,i.kick()}function k(e,t){var i=t.target,n=t.event,s=t.timer;p(document,r.move,E),p(document,r.end,k),M(i,n,s,function(){setTimeout(function(){p(i,"click",y)},0)})}function A(e,t){var i,n=t.target,s=t.event,a=t.timer;b(e.changedTouches,s.identifier)&&(i=t,p(document,l.move,i.activeTouchmove),p(document,l.end,i.activeTouchend),M(n,s,a))}function M(e,t,i,n){i.end(function(){return g(e,"moveend",t),n&&n()})}function P(e){e.enableMove()}function D(e){e.enableMove()}function O(e){e.enableMove()}function I(e){var n=e.handler;e.handler=function(e){for(var t,i=o.length;i--;)e[t=o[i]]=e.originalEvent[t];n.apply(this,arguments)}}h(document,"mousedown",function(e){var t;1!==(t=e).which||t.ctrlKey||t.altKey||n[e.target.tagName.toLowerCase()]||(h(document,r.move,i,e),h(document,r.cancel,x,e))}),h(document,"touchstart",function(e){var t,i;n[e.target.tagName.toLowerCase()]||(i={target:(t=e.changedTouches[0]).target,pageX:t.pageX,pageY:t.pageY,identifier:t.identifier,touchmove:function(e,t){!function(e,t){var i=w(e,t);if(!i)return;T(e,t,i,S)}(e,t)},touchend:function(e,t){!function(e,t){if(!b(e.changedTouches,t.identifier))return;S(t)}(e,t)}},h(document,l.move,i.touchmove,i),h(document,l.cancel,i.touchend,i))}),h(document,"movestart",function(e){var t,i;e.defaultPrevented||e.moveEnabled&&(t={startX:e.startX,startY:e.startY,pageX:e.pageX,pageY:e.pageY,distX:e.distX,distY:e.distY,deltaX:e.deltaX,deltaY:e.deltaY,velocityX:e.velocityX,velocityY:e.velocityY,identifier:e.identifier,targetTouches:e.targetTouches,finger:e.finger},i={target:e.target,event:t,timer:new f(function(e){(function(e,t,i){var n=i-e.timeStamp;e.distX=t.pageX-e.startX,e.distY=t.pageY-e.startY,e.deltaX=t.pageX-e.pageX,e.deltaY=t.pageY-e.pageY,e.velocityX=.3*e.velocityX+.7*e.deltaX/n,e.velocityY=.3*e.velocityY+.7*e.deltaY/n,e.pageX=t.pageX,e.pageY=t.pageY})(t,i.touch,i.timeStamp),g(i.target,"move",t)}),touch:void 0,timeStamp:e.timeStamp},void 0===e.identifier?(h(e.target,"click",y),h(document,r.move,E,i),h(document,r.end,k,i)):(i.activeTouchmove=function(e,t){var i,n,s,a,o;i=e,s=(n=t).event,a=n.timer,(o=w(i,s))&&(i.preventDefault(),s.targetTouches=i.targetTouches,n.touch=o,n.timeStamp=i.timeStamp,a.kick())},i.activeTouchend=function(e,t){A(e,t)},h(document,l.move,i.activeTouchmove,i),h(document,l.end,i.activeTouchend,i)))}),window.jQuery&&(o="startX startY pageX pageY distX distY deltaX deltaY velocityX velocityY".split(" "),jQuery.event.special.movestart={setup:function(){return h(this,"movestart",P),!1},teardown:function(){return p(this,"movestart",P),!1},add:I},jQuery.event.special.move={setup:function(){return h(this,"movestart",D),!1},teardown:function(){return p(this,"movestart",D),!1},add:I},jQuery.event.special.moveend={setup:function(){return h(this,"movestart",O),!1},teardown:function(){return p(this,"movestart",O),!1},add:I})}),function(w){w.fn.twentytwenty=function(b){b=w.extend({default_offset_pct:.5,orientation:"horizontal",before_label:"Before",after_label:"After",no_overlay:!1,move_slider_on_hover:!1,move_with_handle_only:!0,click_to_move:!1},b);return this.each(function(){var e,t=b.default_offset_pct,o=w(this),r=b.orientation,i="vertical"===r?"down":"left",n="vertical"===r?"up":"right";o.wrap("<div class='twentytwenty-wrapper twentytwenty-"+r+"'></div>"),b.no_overlay||(o.append("<div class='twentytwenty-overlay'></div>"),(e=o.find(".twentytwenty-overlay")).append("<div class='twentytwenty-before-label' data-content='"+b.before_label+"'></div>"),e.append("<div class='twentytwenty-after-label' data-content='"+b.after_label+"'></div>"));var l=o.find("img:first"),c=o.find("img:last");o.append("<div class='twentytwenty-handle'></div>");var u=o.find(".twentytwenty-handle");u.append("<span class='twentytwenty-"+i+"-arrow'></span>"),u.append("<span class='twentytwenty-"+n+"-arrow'></span>"),o.addClass("twentytwenty-container"),l.addClass("twentytwenty-before"),c.addClass("twentytwenty-after");function s(e){var t,i,n,s,a=(t=e,i=l.width(),n=l.height(),{w:i+"px",h:n+"px",cw:t*i+"px",ch:t*n+"px"});u.css("vertical"===r?"top":"left","vertical"===r?a.ch:a.cw),s=a,"vertical"===r?(l.css("clip","rect(0,"+s.w+","+s.ch+",0)"),c.css("clip","rect("+s.ch+","+s.w+","+s.h+",0)")):(l.css("clip","rect(0,"+s.cw+","+s.h+",0)"),c.css("clip","rect(0,"+s.w+","+s.h+","+s.cw+")")),o.css("height",s.h)}function a(e,t){var i,n,s;return i="vertical"===r?(t-m)/v:(e-f)/g,n=0,s=1,Math.max(n,Math.min(s,i))}w(window).on("resize.twentytwenty",function(e){s(t)});function d(e){((e.distX>e.distY&&e.distX<-e.distY||e.distX<e.distY&&e.distX>-e.distY)&&"vertical"!==r||(e.distX<e.distY&&e.distX<-e.distY||e.distX>e.distY&&e.distX>-e.distY)&&"vertical"===r)&&e.preventDefault(),o.addClass("active"),f=o.offset().left,m=o.offset().top,g=l.width(),v=l.height()}function h(e){o.hasClass("active")&&(t=a(e.pageX,e.pageY),s(t))}function p(){o.removeClass("active")}var f=0,m=0,g=0,v=0,y=b.move_with_handle_only?u:o;y.on("movestart",d),y.on("move",h),y.on("moveend",p),b.move_slider_on_hover&&(o.on("mouseenter",d),o.on("mousemove",h),o.on("mouseleave",p)),u.on("touchmove",function(e){e.preventDefault()}),o.find("img").on("mousedown",function(e){e.preventDefault()}),b.click_to_move&&o.on("click",function(e){f=o.offset().left,m=o.offset().top,g=l.width(),v=l.height(),t=a(e.pageX,e.pageY),s(t)}),w(window).trigger("resize.twentytwenty")})}}(jQuery),function(u){u.extend(u.easing,{spincrementEasing:function(e,t,i,n,s){return t===s?i+n:n*(1-Math.pow(2,-10*t/s))+i}}),u.fn.spincrement=function(e){var l=u.extend({from:0,to:null,decimalPlaces:null,decimalPoint:".",thousandSeparator:",",duration:1e3,leeway:50,easing:"spincrementEasing",fade:!0,complete:null},e),i=new RegExp(/^(-?[0-9]+)([0-9]{3})/);function c(e,t){if(e=e.toFixed(t),0<t&&"."!==l.decimalPoint&&(e=e.replace(".",l.decimalPoint)),l.thousandSeparator)for(;i.test(e);)e=e.replace(i,"$1"+l.thousandSeparator+"$2");return e}return this.each(function(){var e,t,i,n=u(this),s=l.from;n.attr("data-from")&&(s=parseFloat(n.attr("data-from"))),i=n.attr("data-to")?parseFloat(n.attr("data-to")):null!==l.to?l.to:(e=-1<u.inArray(l.thousandSeparator,["\\","^","$","*","+","?","."])?"\\"+l.thousandSeparator:l.thousandSeparator,t=new RegExp(e,"g"),parseFloat(n.text().replace(t,"")));var a,o,r=l.duration;l.leeway&&(r+=Math.round(l.duration*(2*Math.random()-1)*l.leeway/100)),o=n.attr("data-dp")?parseInt(n.attr("data-dp"),10):null!==l.decimalPlaces?l.decimalPlaces:-1<(a=n.text().indexOf(l.decimalPoint))?n.text().length-(a+1):0,n.css("counter",s),l.fade&&n.css("opacity",0),n.animate({counter:i,opacity:1},{easing:l.easing,duration:r,step:function(e){n.html(c(e*i,o))},complete:function(){n.css("counter",null),n.html(c(i,o)),l.complete&&l.complete(n)}})})}}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e($||require("jquery")):e(jQuery)}(function(z){"use strict";var s="styler",n={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function a(e,t){this.element=e,this.options=z.extend({},n,t);var i=this.options.locale;void 0!==this.options.locales[i]&&z.extend(this.options,this.options.locales[i]),this.init()}function j(e){var t,i,n;z(e.target).parents().hasClass("jq-selectbox")||"OPTION"==e.target.nodeName||z("div.jq-selectbox.opened").length&&(t=z("div.jq-selectbox.opened"),i=z("div.jq-selectbox__search input",t),n=z("div.jq-selectbox__dropdown",t),t.find("select").data("_"+s).options.onSelectClosed.call(t),i.length&&i.val("").keyup(),n.hide().find("li.sel").addClass("selected"),t.removeClass("focused opened dropup dropdown"))}a.prototype={init:function(){var e,t,i,n,s,I=z(this.element),L=this.options,$=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),a=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function N(){void 0!==I.attr("id")&&""!==I.attr("id")&&(this.id=I.attr("id")+L.idSuffix),this.title=I.attr("title"),this.classes=I.attr("class"),this.data=I.data()}I.is(":checkbox")?((e=function(){var e=new N,t=z('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);I.after(t).prependTo(t),I.is(":checked")&&t.addClass("checked"),I.is(":disabled")&&t.addClass("disabled"),t.click(function(e){e.preventDefault(),I.triggerHandler("click"),t.is(".disabled")||(I.is(":checked")?(I.prop("checked",!1),t.removeClass("checked")):(I.prop("checked",!0),t.addClass("checked")),I.focus().change())}),I.closest("label").add('label[for="'+I.attr("id")+'"]').on("click.styler",function(e){z(e.target).is("a")||z(e.target).closest(t).length||(t.triggerHandler("click"),e.preventDefault())}),I.on("change.styler",function(){I.is(":checked")?t.addClass("checked"):t.removeClass("checked")}).on("keydown.styler",function(e){32==e.which&&t.click()}).on("focus.styler",function(){t.is(".disabled")||t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")})})(),I.on("refresh",function(){I.closest("label").add('label[for="'+I.attr("id")+'"]').off(".styler"),I.off(".styler").parent().before(I).remove(),e()})):I.is(":radio")?((t=function(){var e=new N,i=z('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);I.after(i).prependTo(i),I.is(":checked")&&i.addClass("checked"),I.is(":disabled")&&i.addClass("disabled"),z.fn.commonParents=function(){var e=this;return e.first().parents().filter(function(){return z(this).find(e).length===e.length})},z.fn.commonParent=function(){return z(this).commonParents().first()},i.click(function(e){var t;e.preventDefault(),I.triggerHandler("click"),i.is(".disabled")||((t=z('input[name="'+I.attr("name")+'"]')).commonParent().find(t).prop("checked",!1).parent().removeClass("checked"),I.prop("checked",!0).parent().addClass("checked"),I.focus().change())}),I.closest("label").add('label[for="'+I.attr("id")+'"]').on("click.styler",function(e){z(e.target).is("a")||z(e.target).closest(i).length||(i.triggerHandler("click"),e.preventDefault())}),I.on("change.styler",function(){I.parent().addClass("checked")}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})})(),I.on("refresh",function(){I.closest("label").add('label[for="'+I.attr("id")+'"]').off(".styler"),I.off(".styler").parent().before(I).remove(),t()})):I.is(":file")?((i=function(){var e=new N,n=I.data("placeholder");void 0===n&&(n=L.filePlaceholder);var t=I.data("browse");void 0!==t&&""!==t||(t=L.fileBrowse);var s=z('<div class="jq-file"><div class="jq-file__name">'+n+'</div><div class="jq-file__browse">'+t+"</div></div>").attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);I.after(s).appendTo(s),I.is(":disabled")&&s.addClass("disabled");var i=I.val(),a=z("div.jq-file__name",s);i&&a.text(i.replace(/.+[\\\/]/,"")),I.on("change.styler",function(){var e,t,i=I.val();I.is("[multiple]")&&(i="",0<(e=I[0].files.length)&&(void 0===(t=I.data("number"))&&(t=L.fileNumber),i=t=t.replace("%s",e))),a.text(i.replace(/.+[\\\/]/,"")),""===i?(a.text(n),s.removeClass("changed")):s.addClass("changed")}).on("focus.styler",function(){s.addClass("focused")}).on("blur.styler",function(){s.removeClass("focused")}).on("click.styler",function(){s.removeClass("focused")})})(),I.on("refresh",function(){I.off(".styler").parent().before(I).remove(),i()})):I.is('input[type="number"]')?((n=function(){var e=new N,t=z('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);I.after(t).prependTo(t).wrap('<div class="jq-number__field"></div>'),I.is(":disabled")&&t.addClass("disabled");var a,o,r,i=null,n=null;void 0!==I.attr("min")&&(a=I.attr("min")),void 0!==I.attr("max")&&(o=I.attr("max")),r=void 0!==I.attr("step")&&z.isNumeric(I.attr("step"))?Number(I.attr("step")):Number(1);function s(e){var t,i=I.val();z.isNumeric(i)||(i=0,I.val("0")),e.is(".minus")?t=Number(i)-r:e.is(".plus")&&(t=Number(i)+r);var n=(r.toString().split(".")[1]||[]).length;if(0<n){for(var s="1";s.length<=n;)s+="0";t=Math.round(t*s)/s}z.isNumeric(a)&&z.isNumeric(o)?a<=t&&t<=o&&I.val(t):z.isNumeric(a)&&!z.isNumeric(o)?a<=t&&I.val(t):(z.isNumeric(a)||!z.isNumeric(o)||t<=o)&&I.val(t)}t.is(".disabled")||(t.on("mousedown","div.jq-number__spin",function(){var e=z(this);s(e),i=setTimeout(function(){n=setInterval(function(){s(e)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(i),clearInterval(n)}).on("mouseup","div.jq-number__spin",function(){I.change().trigger("input")}),I.on("focus.styler",function(){t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")}))})(),I.on("refresh",function(){I.off(".styler").closest(".jq-number").before(I).remove(),n()})):I.is("select")?((s=function(){function M(t){var i=t.prop("scrollHeight")-t.outerHeight(),n=null,s=null;t.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(e){n=e.originalEvent.detail<0||0<e.originalEvent.wheelDelta?1:-1,s=t.scrollTop(),(i<=s&&n<0||s<=0&&0<n)&&(e.stopPropagation(),e.preventDefault())})}var P=z("option",I),D="";function O(){for(var e=0;e<P.length;e++){var t=P.eq(e),i="",n="",s="",a="",o="",r="",l="",c="",u="";t.prop("selected")&&(n="selected sel"),t.is(":disabled")&&(n="disabled"),t.is(":selected:disabled")&&(n="selected sel disabled"),void 0!==t.attr("id")&&""!==t.attr("id")&&(a=' id="'+t.attr("id")+L.idSuffix+'"'),void 0!==t.attr("title")&&""!==P.attr("title")&&(o=' title="'+t.attr("title")+'"'),void 0!==t.attr("class")&&(l=" "+t.attr("class"),u=' data-jqfs-class="'+t.attr("class")+'"');var d=t.data();for(var h in d)""!==d[h]&&(r+=" data-"+h+'="'+d[h]+'"');n+l!==""&&(s=' class="'+n+l+'"'),i="<li"+u+r+s+o+a+">"+t.html()+"</li>",t.parent().is("optgroup")&&(void 0!==t.parent().attr("class")&&(c=" "+t.parent().attr("class")),i="<li"+u+r+' class="'+n+l+" option"+c+'"'+o+a+">"+t.html()+"</li>",t.is(":first-child")&&(i='<li class="optgroup'+c+'">'+t.parent().attr("label")+"</li>"+i)),D+=i}}if(I.is("[multiple]")){if(a||$)return;!function(){var e=new N,t=z('<div class="jq-select-multiple jqselect"></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);I.after(t),O(),t.append("<ul>"+D+"</ul>");var i=z("ul",t),s=z("li",t),n=I.attr("size"),a=i.outerHeight(),o=s.outerHeight();void 0!==n&&0<n?i.css({height:o*n}):i.css({height:4*o}),a>t.height()&&(i.css("overflowY","scroll"),M(i),s.filter(".selected").length&&i.scrollTop(i.scrollTop()+s.filter(".selected").position().top)),I.prependTo(t),I.is(":disabled")?(t.addClass("disabled"),P.each(function(){z(this).is(":selected")&&s.eq(z(this).index()).addClass("selected")})):(s.filter(":not(.disabled):not(.optgroup)").click(function(e){I.focus();var t,i,n=z(this);e.ctrlKey||e.metaKey||n.addClass("selected"),e.shiftKey||n.addClass("first"),e.ctrlKey||e.metaKey||e.shiftKey||n.siblings().removeClass("selected first"),(e.ctrlKey||e.metaKey)&&(n.is(".selected")?n.removeClass("selected first"):n.addClass("selected first"),n.siblings().removeClass("first")),e.shiftKey&&(i=t=!1,n.siblings().removeClass("selected").siblings(".first").addClass("selected"),n.prevAll().each(function(){z(this).is(".first")&&(t=!0)}),n.nextAll().each(function(){z(this).is(".first")&&(i=!0)}),t&&n.prevAll().each(function(){if(z(this).is(".selected"))return!1;z(this).not(".disabled, .optgroup").addClass("selected")}),i&&n.nextAll().each(function(){if(z(this).is(".selected"))return!1;z(this).not(".disabled, .optgroup").addClass("selected")}),1==s.filter(".selected").length&&n.addClass("first")),P.prop("selected",!1),s.filter(".selected").each(function(){var e=z(this),t=e.index();e.is(".option")&&(t-=e.prevAll(".optgroup").length),P.eq(t).prop("selected",!0)}),I.change()}),P.each(function(e){z(this).data("optionIndex",e)}),I.on("change.styler",function(){s.removeClass("selected");var t=[];P.filter(":selected").each(function(){t.push(z(this).data("optionIndex"))}),s.not(".optgroup").filter(function(e){return-1<z.inArray(e,t)}).addClass("selected")}).on("focus.styler",function(){t.addClass("focused")}).on("blur.styler",function(){t.removeClass("focused")}),a>t.height()&&I.on("keydown.styler",function(e){38!=e.which&&37!=e.which&&33!=e.which||i.scrollTop(i.scrollTop()+s.filter(".selected").position().top-o),40!=e.which&&39!=e.which&&34!=e.which||i.scrollTop(i.scrollTop()+s.filter(".selected:last").position().top-i.innerHeight()+2*o)}))}()}else!function(){var e=new N,t="",i=I.data("placeholder"),n=I.data("search"),s=I.data("search-limit"),a=I.data("search-not-found"),o=I.data("search-placeholder"),l=I.data("smart-positioning");void 0===i&&(i=L.selectPlaceholder),void 0!==n&&""!==n||(n=L.selectSearch),void 0!==s&&""!==s||(s=L.selectSearchLimit),void 0!==a&&""!==a||(a=L.selectSearchNotFound),void 0===o&&(o=L.selectSearchPlaceholder),void 0!==l&&""!==l||(l=L.selectSmartPositioning);var c=z('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:e.id,title:e.title}).addClass(e.classes).data(e.data);I.after(c).prependTo(c);var u=0<(u=c.css("z-index"))?u:1,r=z("div.jq-selectbox__select",c),d=z("div.jq-selectbox__select-text",c),h=P.filter(":selected");O(),n&&(t='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+o+'"></div><div class="jq-selectbox__not-found">'+a+"</div>");var p=z('<div class="jq-selectbox__dropdown">'+t+"<ul>"+D+"</ul></div>");c.append(p);var f=z("ul",p),m=z("li",p),g=z("input",p),v=z("div.jq-selectbox__not-found",p).hide();m.length<s&&g.parent().hide(),""===P.first().text()&&P.first().is(":selected")&&!1!==i?d.text(i).addClass("placeholder"):d.text(h.text());var y,b,w=0,x=0;m.css({display:"inline-block"}),m.each(function(){var e=z(this);e.innerWidth()>w&&(w=e.innerWidth(),x=e.width())}),m.css({display:""}),d.is(".placeholder")&&d.width()>w?d.width(d.width()):(b=(y=c.clone().appendTo("body").width("auto")).outerWidth(),y.remove(),b==c.outerWidth()&&d.width(x)),w>c.width()&&p.width(w),""===P.first().text()&&""!==I.data("placeholder")&&m.first().hide();var C,S=c.outerHeight(!0),T=g.parent().outerHeight(!0)||0,E=f.css("max-height"),k=m.filter(".selected");k.length<1&&m.first().addClass("selected sel"),void 0===m.data("li-height")&&(C=m.outerHeight(),!1!==i&&(C=m.eq(1).outerHeight()),m.data("li-height",C));var A=p.css("top");"auto"==p.css("left")&&p.css({left:0}),"auto"==p.css("top")&&(p.css({top:S}),A=S),p.hide(),k.length&&(P.first().text()!=h.text()&&c.addClass("changed"),c.data("jqfs-class",k.data("jqfs-class")),c.addClass(k.data("jqfs-class"))),I.is(":disabled")?c.addClass("disabled"):(r.click(function(){var t,i,n,s,e,a,o,r;z("div.jq-selectbox").filter(".opened").length&&L.onSelectClosed.call(z("div.jq-selectbox").filter(".opened")),I.focus(),$||(t=z(window),i=m.data("li-height"),n=c.offset().top,s=t.height()-S-(n-t.scrollTop()),void 0!==(e=I.data("visible-options"))&&""!==e||(e=L.selectVisibleOptions),a=5*i,o=i*e,0<e&&e<6&&(a=o),0===e&&(o="auto"),r=function(){p.height("auto").css({bottom:"auto",top:A});function e(){f.css("max-height",Math.floor((s-20-T)/i)*i)}e(),f.css("max-height",o),"none"!=E&&f.css("max-height",E),s<p.outerHeight()+20&&e()},!0===l||1===l?a+T+20<s?(r(),c.removeClass("dropup").addClass("dropdown")):(function(){p.height("auto").css({top:"auto",bottom:A});function e(){f.css("max-height",Math.floor((n-t.scrollTop()-20-T)/i)*i)}e(),f.css("max-height",o),"none"!=E&&f.css("max-height",E),n-t.scrollTop()-20<p.outerHeight()+20&&e()}(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?a+T+20<s&&(r(),c.removeClass("dropup").addClass("dropdown")):(p.height("auto").css({bottom:"auto",top:A}),f.css("max-height",o),"none"!=E&&f.css("max-height",E)),c.offset().left+p.outerWidth()>t.width()&&p.css({left:"auto",right:0}),z("div.jqselect").css({zIndex:u-1}).removeClass("opened"),c.css({zIndex:u}),p.is(":hidden")?(z("div.jq-selectbox__dropdown:visible").hide(),p.show(),c.addClass("opened focused"),L.onSelectOpened.call(c)):(p.hide(),c.removeClass("opened dropup dropdown"),z("div.jq-selectbox").filter(".opened").length&&L.onSelectClosed.call(c)),g.length&&(g.val("").keyup(),v.hide(),g.keyup(function(){var e=z(this).val();m.each(function(){z(this).html().match(new RegExp(".*?"+e+".*?","i"))?z(this).show():z(this).hide()}),""===P.first().text()&&""!==I.data("placeholder")&&m.first().hide(),m.filter(":visible").length<1?v.show():v.hide()})),m.filter(".selected").length&&(""===I.val()?f.scrollTop(0):(f.innerHeight()/i%2!=0&&(i/=2),f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()/2+i))),M(f))}),m.hover(function(){z(this).siblings().removeClass("selected")}),m.filter(".selected").text(),m.filter(":not(.disabled):not(.optgroup)").click(function(){I.focus();var e,t=z(this),i=t.text();t.is(".selected")||(e=t.index(),e-=t.prevAll(".optgroup").length,t.addClass("selected sel").siblings().removeClass("selected sel"),P.prop("selected",!1).eq(e).prop("selected",!0),d.text(i),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",t.data("jqfs-class")),c.addClass(t.data("jqfs-class")),I.change()),p.hide(),c.removeClass("opened dropup dropdown"),L.onSelectClosed.call(c)}),p.mouseout(function(){z("li.sel",p).addClass("selected")}),I.on("change.styler",function(){d.text(P.filter(":selected").text()).removeClass("placeholder"),m.removeClass("selected sel").not(".optgroup").eq(I[0].selectedIndex).addClass("selected sel"),P.first().text()!=m.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),z("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(e){var t=m.data("li-height");""===I.val()?d.text(i).addClass("placeholder"):d.text(P.filter(":selected").text()),m.removeClass("selected sel").not(".optgroup").eq(I[0].selectedIndex).addClass("selected sel"),38!=e.which&&37!=e.which&&33!=e.which&&36!=e.which||(""===I.val()?f.scrollTop(0):f.scrollTop(f.scrollTop()+m.filter(".selected").position().top)),40!=e.which&&39!=e.which&&34!=e.which&&35!=e.which||f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()+t),13==e.which&&(e.preventDefault(),p.hide(),c.removeClass("opened dropup dropdown"),L.onSelectClosed.call(c))}).on("keydown.styler",function(e){32==e.which&&(e.preventDefault(),r.click())}),j.registered||(z(document).on("click",j),j.registered=!0))}()})(),I.on("refresh",function(){I.off(".styler").parent().before(I).remove(),s()})):I.is(":reset")&&I.on("click",function(){setTimeout(function(){I.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var e=z(this.element);e.is(":checkbox")||e.is(":radio")?(e.removeData("_"+s).off(".styler refresh").removeAttr("style").parent().before(e).remove(),e.closest("label").add('label[for="'+e.attr("id")+'"]').off(".styler")):e.is('input[type="number"]')?e.removeData("_"+s).off(".styler refresh").closest(".jq-number").before(e).remove():(e.is(":file")||e.is("select"))&&e.removeData("_"+s).off(".styler refresh").removeAttr("style").parent().before(e).remove()}},z.fn[s]=function(t){var i,n=arguments;return void 0===t||"object"==typeof t?(this.each(function(){z.data(this,"_"+s)||z.data(this,"_"+s,new a(this,t))}).promise().done(function(){var e=z(this[0]).data("_"+s);e&&e.options.onFormStyled.call()}),this):"string"==typeof t&&"_"!==t[0]&&"init"!==t?(this.each(function(){var e=z.data(this,"_"+s);e instanceof a&&"function"==typeof e[t]&&(i=e[t].apply(e,Array.prototype.slice.call(n,1)))}),void 0!==i?i:this):void 0},j.registered=!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
